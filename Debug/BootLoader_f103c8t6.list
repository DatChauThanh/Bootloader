
BootLoader_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002694  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c4  080027c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027c4  080027c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027c4  080027c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000010  080027d8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080027d8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063c9  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bee  00000000  00000000  00026441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  00028030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053b  00000000  00000000  00028758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ac8  00000000  00000000  00028c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008dab  00000000  00000000  0003f75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080182  00000000  00000000  00048506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a9c  00000000  00000000  000c8688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ca124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002788 	.word	0x08002788

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002788 	.word	0x08002788

0800014c <BL_u32ReadAddressData>:
#define Debug
//**************************Include***************************//
#include "BL_Header.h"
#include "Can_Interface.h"
//**************************Include***************************//
static uint32_t BL_u32ReadAddressData(uint32_t address){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 800015a:	68fb      	ldr	r3, [r7, #12]
}
 800015c:	4618      	mov	r0, r3
 800015e:	3714      	adds	r7, #20
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
	...

08000168 <BL_voidBootLoader_Init>:
//**************************Function Define***************************//
void BL_voidBootLoader_Init(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
	// Read Branching Request Update Flag.
	uint32_t Local_u32Flag = BL_u32ReadAddressData(FLAG_STATUS_BOOTLOADER);
 800016e:	480a      	ldr	r0, [pc, #40]	; (8000198 <BL_voidBootLoader_Init+0x30>)
 8000170:	f7ff ffec 	bl	800014c <BL_u32ReadAddressData>
 8000174:	6078      	str	r0, [r7, #4]
	if(Local_u32Flag == BL_BRANCHING_FLAG_RESET)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800017c:	d102      	bne.n	8000184 <BL_voidBootLoader_Init+0x1c>
	{
		// Check images existence, status (and CRC).
		BL_voidCheckActiveRegion();
 800017e:	f000 f80d 	bl	800019c <BL_voidCheckActiveRegion>
	}
	else
	{
		// Do nothing
	}
}
 8000182:	e004      	b.n	800018e <BL_voidBootLoader_Init+0x26>
	else if(Local_u32Flag == BL_BRANCHING_FLAG_SET)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d101      	bne.n	800018e <BL_voidBootLoader_Init+0x26>
	    BL_voidJumpToBootloader();
 800018a:	f000 f887 	bl	800029c <BL_voidJumpToBootloader>
}
 800018e:	bf00      	nop
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	0801fc00 	.word	0x0801fc00

0800019c <BL_voidCheckActiveRegion>:

void BL_voidCheckActiveRegion(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
    // Read Images Status To Determine Which Image Will Be Excuted.
	uint32_t Local_u32ActiveImageStatus = BL_u32ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80001a2:	4818      	ldr	r0, [pc, #96]	; (8000204 <BL_voidCheckActiveRegion+0x68>)
 80001a4:	f7ff ffd2 	bl	800014c <BL_u32ReadAddressData>
 80001a8:	6078      	str	r0, [r7, #4]
	//uint32_t Local_u32ReceivedCRC       = BL_u32ReadAddressData(FLAG_STATUS_CRC_ACTIVE_REGION_ADDRESS);
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 80001aa:	f06f 030c 	mvn.w	r3, #12
 80001ae:	603b      	str	r3, [r7, #0]

    // if 
    if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f113 0f0f 	cmn.w	r3, #15
 80001b6:	d102      	bne.n	80001be <BL_voidCheckActiveRegion+0x22>
	{
		BL_voidJumpToActiveRegion();
 80001b8:	f000 f846 	bl	8000248 <BL_voidJumpToActiveRegion>
	}
    else
    {
        // Do nothing
    }
}
 80001bc:	e01d      	b.n	80001fa <BL_voidCheckActiveRegion+0x5e>
    else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f113 0f0c 	cmn.w	r3, #12
 80001c4:	d003      	beq.n	80001ce <BL_voidCheckActiveRegion+0x32>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001cc:	d115      	bne.n	80001fa <BL_voidCheckActiveRegion+0x5e>
    	Local_u32BackupStatus    = BL_32CheckBackupRegion();
 80001ce:	f000 f81b 	bl	8000208 <BL_32CheckBackupRegion>
 80001d2:	6038      	str	r0, [r7, #0]
		if(Local_u32BackupStatus == BR_IMAGE_IS_CORRECT)
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	f113 0f0e 	cmn.w	r3, #14
 80001da:	d104      	bne.n	80001e6 <BL_voidCheckActiveRegion+0x4a>
			BL_voidCopyImageToActiveRegion();
 80001dc:	f000 f866 	bl	80002ac <BL_voidCopyImageToActiveRegion>
			BL_voidJumpToActiveRegion();
 80001e0:	f000 f832 	bl	8000248 <BL_voidJumpToActiveRegion>
}
 80001e4:	e009      	b.n	80001fa <BL_voidCheckActiveRegion+0x5e>
		else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	f113 0f0c 	cmn.w	r3, #12
 80001ec:	d003      	beq.n	80001f6 <BL_voidCheckActiveRegion+0x5a>
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001f4:	d101      	bne.n	80001fa <BL_voidCheckActiveRegion+0x5e>
			BL_voidSetBranchingFlagAndMakeSWR();
 80001f6:	f000 f9c3 	bl	8000580 <BL_voidSetBranchingFlagAndMakeSWR>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	0801fc14 	.word	0x0801fc14

08000208 <BL_32CheckBackupRegion>:

uint32_t BL_32CheckBackupRegion(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
	uint32_t Local_u32BackupStatus =BL_u32ReadAddressData(FLAG_STATUS_BACKUP_REGION_ADDRESS);
 800020e:	480d      	ldr	r0, [pc, #52]	; (8000244 <BL_32CheckBackupRegion+0x3c>)
 8000210:	f7ff ff9c 	bl	800014c <BL_u32ReadAddressData>
 8000214:	6078      	str	r0, [r7, #4]
	// if exist Backup image
	if(Local_u32BackupStatus == BR_IMAGE_IS_BACKUP)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f113 0f0d 	cmn.w	r3, #13
 800021c:	d102      	bne.n	8000224 <BL_32CheckBackupRegion+0x1c>
	{
		return BR_IMAGE_IS_CORRECT;
 800021e:	f06f 030d 	mvn.w	r3, #13
 8000222:	e00b      	b.n	800023c <BL_32CheckBackupRegion+0x34>
	}
	else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f113 0f0c 	cmn.w	r3, #12
 800022a:	d003      	beq.n	8000234 <BL_32CheckBackupRegion+0x2c>
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000232:	d102      	bne.n	800023a <BL_32CheckBackupRegion+0x32>
	{
		return BR_IMAGE_IS_CORRUPTED;
 8000234:	f06f 030b 	mvn.w	r3, #11
 8000238:	e000      	b.n	800023c <BL_32CheckBackupRegion+0x34>
	}
	else
	{
		//Do nothing here
	}
	return Local_u32BackupStatus;
 800023a:	687b      	ldr	r3, [r7, #4]
}
 800023c:	4618      	mov	r0, r3
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	0801fc34 	.word	0x0801fc34

08000248 <BL_voidJumpToActiveRegion>:

void BL_voidJumpToActiveRegion(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	//MX_GPIO_Deinit();
	SysTick->CTRL = 0x0; //Disables SysTick timer and its related interrupt
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <BL_voidJumpToActiveRegion+0x40>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
	HAL_DeInit();
 8000254:	f000 fd6a 	bl	8000d2c <HAL_DeInit>
	RCC->CIR = 0x00000000; //Disable all interrupts related to clock
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <BL_voidJumpToActiveRegion+0x44>)
 800025a:	2200      	movs	r2, #0
 800025c:	609a      	str	r2, [r3, #8]

	Application_t AddressToCall = 0 ;
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
	AddressToCall = *(Application_t*)(ACTIVE_IMAGE + 4); // Point to Reset Handler
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <BL_voidJumpToActiveRegion+0x48>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	607b      	str	r3, [r7, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000268:	f3bf 8f5f 	dmb	sy
}
 800026c:	bf00      	nop

	__DMB(); //ARM says to use a DMB instruction before relocating VTOR *
	SCB->VTOR = ACTIVE_IMAGE; //We relocate vector table to the sector 1
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <BL_voidJumpToActiveRegion+0x4c>)
 8000270:	4a09      	ldr	r2, [pc, #36]	; (8000298 <BL_voidJumpToActiveRegion+0x50>)
 8000272:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000274:	f3bf 8f4f 	dsb	sy
}
 8000278:	bf00      	nop
	__DSB(); //ARM says to use a DSB instruction just after 	relocating VTOR */

	AddressToCall();
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4798      	blx	r3
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	e000e010 	.word	0xe000e010
 800028c:	40021000 	.word	0x40021000
 8000290:	08005004 	.word	0x08005004
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	08005000 	.word	0x08005000

0800029c <BL_voidJumpToBootloader>:

void BL_voidJumpToBootloader(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	//@TODO: In develop
	BL_voidUpdateHeaders();
 80002a0:	f000 f97a 	bl	8000598 <BL_voidUpdateHeaders>
	BL_voidReceiveUpdate();
 80002a4:	f000 f9c0 	bl	8000628 <BL_voidReceiveUpdate>

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}

080002ac <BL_voidCopyImageToActiveRegion>:

void BL_voidCopyImageToActiveRegion(void)
{
 80002ac:	b5b0      	push	{r4, r5, r7, lr}
 80002ae:	b08a      	sub	sp, #40	; 0x28
 80002b0:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress = BL_INITIALIZE_WITH_ZERO;
 80002b2:	2300      	movs	r3, #0
 80002b4:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveDataAddress = BL_INITIALIZE_WITH_ZERO;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32BackUpDataWord 	= BL_INITIALIZE_WITH_ZERO;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
	uint32_t Local_u32BackupSizeInWord 	= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS);
 80002be:	482b      	ldr	r0, [pc, #172]	; (800036c <BL_voidCopyImageToActiveRegion+0xc0>)
 80002c0:	f7ff ff44 	bl	800014c <BL_u32ReadAddressData>
 80002c4:	6178      	str	r0, [r7, #20]
	Local_u32BackupSizeInWord = Local_u32BackupSizeInWord / 4;
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	089b      	lsrs	r3, r3, #2
 80002ca:	617b      	str	r3, [r7, #20]
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 80002d4:	4b26      	ldr	r3, [pc, #152]	; (8000370 <BL_voidCopyImageToActiveRegion+0xc4>)
 80002d6:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 80002d8:	2316      	movs	r3, #22
 80002da:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80002dc:	f001 fadc 	bl	8001898 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80002e0:	463a      	mov	r2, r7
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4611      	mov	r1, r2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fbbe 	bl	8001a68 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80002ec:	f001 fafa 	bl	80018e4 <HAL_FLASH_Lock>

	//Copy data from backup to active region.
	HAL_FLASH_Unlock();
 80002f0:	f001 fad2 	bl	8001898 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e01d      	b.n	8000336 <BL_voidCopyImageToActiveRegion+0x8a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80002fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000300:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	61fb      	str	r3, [r7, #28]
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 8000308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800030e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	623b      	str	r3, [r7, #32]
		Local_u32BackUpDataWord    = *((volatile uint32_t*)(Local_u32BackupDataAddress));
 8000316:	6a3b      	ldr	r3, [r7, #32]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32ActiveDataAddress, Local_u32BackUpDataWord);
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	2200      	movs	r2, #0
 8000320:	461c      	mov	r4, r3
 8000322:	4615      	mov	r5, r2
 8000324:	4622      	mov	r2, r4
 8000326:	462b      	mov	r3, r5
 8000328:	69f9      	ldr	r1, [r7, #28]
 800032a:	2002      	movs	r0, #2
 800032c:	f001 fa44 	bl	80017b8 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 8000330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000332:	3301      	adds	r3, #1
 8000334:	627b      	str	r3, [r7, #36]	; 0x24
 8000336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	429a      	cmp	r2, r3
 800033c:	d3dd      	bcc.n	80002fa <BL_voidCopyImageToActiveRegion+0x4e>
	}
	HAL_FLASH_Lock();
 800033e:	f001 fad1 	bl	80018e4 <HAL_FLASH_Lock>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS , Local_u32BackupSizeInWord*4);
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	4619      	mov	r1, r3
 8000348:	480a      	ldr	r0, [pc, #40]	; (8000374 <BL_voidCopyImageToActiveRegion+0xc8>)
 800034a:	f000 f883 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE );
 800034e:	f06f 010e 	mvn.w	r1, #14
 8000352:	4809      	ldr	r0, [pc, #36]	; (8000378 <BL_voidCopyImageToActiveRegion+0xcc>)
 8000354:	f000 f87e 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 8000358:	f06f 010c 	mvn.w	r1, #12
 800035c:	4807      	ldr	r0, [pc, #28]	; (800037c <BL_voidCopyImageToActiveRegion+0xd0>)
 800035e:	f000 f879 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
}
 8000362:	bf00      	nop
 8000364:	3728      	adds	r7, #40	; 0x28
 8000366:	46bd      	mov	sp, r7
 8000368:	bdb0      	pop	{r4, r5, r7, pc}
 800036a:	bf00      	nop
 800036c:	0801fc38 	.word	0x0801fc38
 8000370:	08005000 	.word	0x08005000
 8000374:	0801fc18 	.word	0x0801fc18
 8000378:	0801fc14 	.word	0x0801fc14
 800037c:	0801fc34 	.word	0x0801fc34

08000380 <BL_voidCopyImageToBackupRegion>:

void BL_voidCopyImageToBackupRegion(void)
{
 8000380:	b5b0      	push	{r4, r5, r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 8000386:	2300      	movs	r3, #0
 8000388:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32ActiveDataWord 			= BL_INITIALIZE_WITH_ZERO;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
	uint32_t Local_u32ActiveSizeInWord 			= BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 8000392:	482b      	ldr	r0, [pc, #172]	; (8000440 <BL_voidCopyImageToBackupRegion+0xc0>)
 8000394:	f7ff feda 	bl	800014c <BL_u32ReadAddressData>
 8000398:	6178      	str	r0, [r7, #20]
	Local_u32ActiveSizeInWord = Local_u32ActiveSizeInWord / 4;
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	089b      	lsrs	r3, r3, #2
 800039e:	617b      	str	r3, [r7, #20]

	// Erase the Backup region.
	Local_eraseInfo.TypeErase 	= FLASH_TYPEERASE_PAGES;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks 		= FLASH_BANK_1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = BACKUP_IMAGE;
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <BL_voidCopyImageToBackupRegion+0xc4>)
 80003aa:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages 	= FLASH_BANK_NUMOFPAGE;
 80003ac:	2316      	movs	r3, #22
 80003ae:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80003b0:	f001 fa72 	bl	8001898 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80003b4:	463a      	mov	r2, r7
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fb54 	bl	8001a68 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80003c0:	f001 fa90 	bl	80018e4 <HAL_FLASH_Lock>

	//Copy data from active region to backup region
	HAL_FLASH_Unlock();
 80003c4:	f001 fa68 	bl	8001898 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	627b      	str	r3, [r7, #36]	; 0x24
 80003cc:	e01d      	b.n	800040a <BL_voidCopyImageToBackupRegion+0x8a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80003ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80003d4:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	61fb      	str	r3, [r7, #28]
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80003dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003de:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80003e2:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	623b      	str	r3, [r7, #32]
		Local_u32ActiveDataWord    = *((volatile uint32_t*)(Local_u32ActiveDataAddress));
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32BackupDataAddress, Local_u32ActiveDataWord);
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	2200      	movs	r2, #0
 80003f4:	461c      	mov	r4, r3
 80003f6:	4615      	mov	r5, r2
 80003f8:	4622      	mov	r2, r4
 80003fa:	462b      	mov	r3, r5
 80003fc:	6a39      	ldr	r1, [r7, #32]
 80003fe:	2002      	movs	r0, #2
 8000400:	f001 f9da 	bl	80017b8 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 8000404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000406:	3301      	adds	r3, #1
 8000408:	627b      	str	r3, [r7, #36]	; 0x24
 800040a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	429a      	cmp	r2, r3
 8000410:	d3dd      	bcc.n	80003ce <BL_voidCopyImageToBackupRegion+0x4e>
	}
	HAL_FLASH_Lock();
 8000412:	f001 fa67 	bl	80018e4 <HAL_FLASH_Lock>

	// Set
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS , Local_u32ActiveSizeInWord*4 );
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4619      	mov	r1, r3
 800041c:	480a      	ldr	r0, [pc, #40]	; (8000448 <BL_voidCopyImageToBackupRegion+0xc8>)
 800041e:	f000 f819 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8000422:	f06f 010e 	mvn.w	r1, #14
 8000426:	4809      	ldr	r0, [pc, #36]	; (800044c <BL_voidCopyImageToBackupRegion+0xcc>)
 8000428:	f000 f814 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 800042c:	f06f 010c 	mvn.w	r1, #12
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <BL_voidCopyImageToBackupRegion+0xd0>)
 8000432:	f000 f80f 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
}
 8000436:	bf00      	nop
 8000438:	3728      	adds	r7, #40	; 0x28
 800043a:	46bd      	mov	sp, r7
 800043c:	bdb0      	pop	{r4, r5, r7, pc}
 800043e:	bf00      	nop
 8000440:	0801fc18 	.word	0x0801fc18
 8000444:	0800a800 	.word	0x0800a800
 8000448:	0801fc38 	.word	0x0801fc38
 800044c:	0801fc14 	.word	0x0801fc14
 8000450:	0801fc34 	.word	0x0801fc34

08000454 <BL_voidEraseRestoreHeaderPage>:

void BL_voidEraseRestoreHeaderPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 8000454:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000458:	b0b2      	sub	sp, #200	; 0xc8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 8000472:	4b41      	ldr	r3, [pc, #260]	; (8000578 <BL_voidEraseRestoreHeaderPage+0x124>)
 8000474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000478:	e031      	b.n	80004de <BL_voidEraseRestoreHeaderPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 800047a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	bf14      	ite	ne
 8000484:	2301      	movne	r3, #1
 8000486:	2300      	moveq	r3, #0
 8000488:	b2da      	uxtb	r2, r3
 800048a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000494:	bf14      	ite	ne
 8000496:	2301      	movne	r3, #1
 8000498:	2300      	moveq	r3, #0
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4013      	ands	r3, r2
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d017      	beq.n	80004d4 <BL_voidEraseRestoreHeaderPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 80004a4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	33c8      	adds	r3, #200	; 0xc8
 80004ac:	443b      	add	r3, r7
 80004ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80004b2:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 80004b6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80004ba:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80004be:	6812      	ldr	r2, [r2, #0]
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	33c8      	adds	r3, #200	; 0xc8
 80004c4:	443b      	add	r3, r7
 80004c6:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 80004ca:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80004ce:	3301      	adds	r3, #1
 80004d0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 80004d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80004d8:	3304      	adds	r3, #4
 80004da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 80004de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <BL_voidEraseRestoreHeaderPage+0x128>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d9c8      	bls.n	800047a <BL_voidEraseRestoreHeaderPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <BL_voidEraseRestoreHeaderPage+0x124>)
 80004f2:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80004f8:	f001 f9ce 	bl	8001898 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80004fc:	f107 020c 	add.w	r2, r7, #12
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f001 faae 	bl	8001a68 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 800050c:	2300      	movs	r3, #0
 800050e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000512:	e01a      	b.n	800054a <BL_voidEraseRestoreHeaderPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8000514:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	33c8      	adds	r3, #200	; 0xc8
 800051c:	443b      	add	r3, r7
 800051e:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8000522:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	33c8      	adds	r3, #200	; 0xc8
 800052a:	443b      	add	r3, r7
 800052c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8000530:	2200      	movs	r2, #0
 8000532:	4698      	mov	r8, r3
 8000534:	4691      	mov	r9, r2
 8000536:	4642      	mov	r2, r8
 8000538:	464b      	mov	r3, r9
 800053a:	2002      	movs	r0, #2
 800053c:	f001 f93c 	bl	80017b8 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000540:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000544:	3301      	adds	r3, #1
 8000546:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800054a:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800054e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000552:	429a      	cmp	r2, r3
 8000554:	d3de      	bcc.n	8000514 <BL_voidEraseRestoreHeaderPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	2200      	movs	r2, #0
 800055a:	461c      	mov	r4, r3
 800055c:	4615      	mov	r5, r2
 800055e:	4622      	mov	r2, r4
 8000560:	462b      	mov	r3, r5
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	2002      	movs	r0, #2
 8000566:	f001 f927 	bl	80017b8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 800056a:	f001 f9bb 	bl	80018e4 <HAL_FLASH_Lock>
}
 800056e:	bf00      	nop
 8000570:	37c8      	adds	r7, #200	; 0xc8
 8000572:	46bd      	mov	sp, r7
 8000574:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000578:	0801fc00 	.word	0x0801fc00
 800057c:	0801fc4f 	.word	0x0801fc4f

08000580 <BL_voidSetBranchingFlagAndMakeSWR>:

void BL_voidSetBranchingFlagAndMakeSWR(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	// Set Branching Flag To Receive New Code.
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER, BL_SET_BRANCHING_FLAG);
 8000584:	2100      	movs	r1, #0
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <BL_voidSetBranchingFlagAndMakeSWR+0x14>)
 8000588:	f7ff ff64 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	// Make Software Reset.
	BL_voidMakeSoftWareReset();
 800058c:	f000 f944 	bl	8000818 <BL_voidMakeSoftWareReset>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	0801fc00 	.word	0x0801fc00

08000598 <BL_voidUpdateHeaders>:

void BL_voidUpdateHeaders(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
	uint8_t  Local_u8DataArray[8]              = {BL_INITIALIZE_WITH_ZERO};
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32ActiveRegionStatus       = BL_INITIALIZE_WITH_ZERO;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
	uint32_t Local_u32ImageSizeInBytes         = BL_INITIALIZE_WITH_ZERO;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
	uint8_t	 Local_u8HeaderFlag                = BL_INITIALIZE_WITH_ZERO;
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]

	Local_u32ActiveRegionStatus = BL_u32ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80005b2:	481b      	ldr	r0, [pc, #108]	; (8000620 <BL_voidUpdateHeaders+0x88>)
 80005b4:	f7ff fdca 	bl	800014c <BL_u32ReadAddressData>
 80005b8:	6178      	str	r0, [r7, #20]

	//Structure CAN Transmit
	CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACKNOWLEDGE_UPGRADE_REQUEST);
 80005ba:	2150      	movs	r1, #80	; 0x50
 80005bc:	2010      	movs	r0, #16
 80005be:	f000 f94d 	bl	800085c <CAN_IF_Transmit_UDS_Request>

	// Wait until FIFO 0 become pending state
	CAN_IF_Receive_UDS_Respond(&Local_u8HeaderFlag);
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f981 	bl	80008cc <CAN_IF_Receive_UDS_Respond>

	if(Local_u8HeaderFlag == UDS_GWY_PROVIDE_HEADER)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b34      	cmp	r3, #52	; 0x34
 80005ce:	d122      	bne.n	8000616 <BL_voidUpdateHeaders+0x7e>
	{
		CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACCEPT_RECEIVING_HEADER);
 80005d0:	2173      	movs	r1, #115	; 0x73
 80005d2:	2010      	movs	r0, #16
 80005d4:	f000 f942 	bl	800085c <CAN_IF_Transmit_UDS_Request>
		// Wait until FIFO 0 become pending state
		CAN_IF_Receive_Data_Frame(Local_u8DataArray);
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 f997 	bl	8000910 <CAN_IF_Receive_Data_Frame>

		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) | 		\
 80005e2:	7afb      	ldrb	r3, [r7, #11]
 80005e4:	061a      	lsls	r2, r3, #24
 80005e6:	7abb      	ldrb	r3, [r7, #10]
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	431a      	orrs	r2, r3
									(Local_u8DataArray[1] << SHIFT_8_BIT) | (Local_u8DataArray[0] << SHIFT_0_BIT);
 80005ec:	7a7b      	ldrb	r3, [r7, #9]
 80005ee:	021b      	lsls	r3, r3, #8
		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) | 		\
 80005f0:	4313      	orrs	r3, r2
									(Local_u8DataArray[1] << SHIFT_8_BIT) | (Local_u8DataArray[0] << SHIFT_0_BIT);
 80005f2:	7a3a      	ldrb	r2, [r7, #8]
 80005f4:	4313      	orrs	r3, r2
		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) | 		\
 80005f6:	613b      	str	r3, [r7, #16]

		if(Local_u32ActiveRegionStatus == BR_IMAGE_IS_ACTIVE )
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	f113 0f0f 	cmn.w	r3, #15
 80005fe:	d101      	bne.n	8000604 <BL_voidUpdateHeaders+0x6c>
		{
			BL_voidCopyImageToBackupRegion();
 8000600:	f7ff febe 	bl	8000380 <BL_voidCopyImageToBackupRegion>
		}

		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 8000604:	f06f 010b 	mvn.w	r1, #11
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <BL_voidUpdateHeaders+0x88>)
 800060a:	f7ff ff23 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 800060e:	6939      	ldr	r1, [r7, #16]
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <BL_voidUpdateHeaders+0x8c>)
 8000612:	f7ff ff1f 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	}
}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	0801fc14 	.word	0x0801fc14
 8000624:	0801fc18 	.word	0x0801fc18

08000628 <BL_voidReceiveUpdate>:

void BL_voidReceiveUpdate(void)
{
 8000628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800062c:	b08e      	sub	sp, #56	; 0x38
 800062e:	af00      	add	r7, sp, #0
	uint8_t  Local_u8DataArray[8]              					  = {BL_INITIALIZE_WITH_ZERO};
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Local_u32HighByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 8000638:	2300      	movs	r3, #0
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Local_u32LowByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t Local_u32InactiveImageAddressCounter                 = ACTIVE_IMAGE_START_ADDRESS;
 8000640:	4b66      	ldr	r3, [pc, #408]	; (80007dc <BL_voidReceiveUpdate+0x1b4>)
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Local_u32SizeOfCode 								  = BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 8000644:	4866      	ldr	r0, [pc, #408]	; (80007e0 <BL_voidReceiveUpdate+0x1b8>)
 8000646:	f7ff fd81 	bl	800014c <BL_u32ReadAddressData>
 800064a:	6338      	str	r0, [r7, #48]	; 0x30
	uint8_t	 Local_u8HeaderFlag                					  = BL_INITIALIZE_WITH_ZERO;
 800064c:	2300      	movs	r3, #0
 800064e:	77fb      	strb	r3, [r7, #31]

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000654:	2301      	movs	r3, #1
 8000656:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 8000658:	4b60      	ldr	r3, [pc, #384]	; (80007dc <BL_voidReceiveUpdate+0x1b4>)
 800065a:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 800065c:	2316      	movs	r3, #22
 800065e:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000660:	f001 f91a 	bl	8001898 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000664:	f107 0208 	add.w	r2, r7, #8
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f9fa 	bl	8001a68 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000674:	f001 f936 	bl	80018e4 <HAL_FLASH_Lock>

	//Structure CAN Transmit
	CAN_IF_Transmit_UDS_Request(NODE_ID_ONE,UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED);
 8000678:	2174      	movs	r1, #116	; 0x74
 800067a:	2010      	movs	r0, #16
 800067c:	f000 f8ee 	bl	800085c <CAN_IF_Transmit_UDS_Request>
	//Loop to receive code update
	while(Local_u32SizeOfCode)
 8000680:	e098      	b.n	80007b4 <BL_voidReceiveUpdate+0x18c>
	{
		// Wait until FIFO 0 become pending state
		CAN_IF_Receive_UDS_Respond(&Local_u8HeaderFlag);
 8000682:	f107 031f 	add.w	r3, r7, #31
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f920 	bl	80008cc <CAN_IF_Receive_UDS_Respond>
		//Check UDS ID
		if(Local_u8HeaderFlag == UDS_GWY_REQUEST_SENDING_LINE_OF_CODE)
 800068c:	7ffb      	ldrb	r3, [r7, #31]
 800068e:	2b36      	cmp	r3, #54	; 0x36
 8000690:	f040 8090 	bne.w	80007b4 <BL_voidReceiveUpdate+0x18c>
		{
			CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE);
 8000694:	2175      	movs	r1, #117	; 0x75
 8000696:	2010      	movs	r0, #16
 8000698:	f000 f8e0 	bl	800085c <CAN_IF_Transmit_UDS_Request>

			if (Local_u32SizeOfCode > 8){
 800069c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069e:	2b08      	cmp	r3, #8
 80006a0:	d942      	bls.n	8000728 <BL_voidReceiveUpdate+0x100>
				CAN_IF_Receive_Data_Frame(Local_u8DataArray);
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f932 	bl	8000910 <CAN_IF_Receive_Data_Frame>
				Local_u32HighByteDataReceive = (Local_u8DataArray[7] << SHIFT_24_BIT) | (Local_u8DataArray[6] << SHIFT_16_BIT)
 80006ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006b0:	061a      	lsls	r2, r3, #24
 80006b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006b6:	041b      	lsls	r3, r3, #16
 80006b8:	431a      	orrs	r2, r3
											| (Local_u8DataArray[5] << SHIFT_8_BIT) | (Local_u8DataArray[4] << SHIFT_0_BIT) ;
 80006ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	4313      	orrs	r3, r2
 80006c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80006c6:	4313      	orrs	r3, r2
				Local_u32HighByteDataReceive = (Local_u8DataArray[7] << SHIFT_24_BIT) | (Local_u8DataArray[6] << SHIFT_16_BIT)
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
				Local_u32LowByteDataReceive  = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT)
 80006ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006ce:	061a      	lsls	r2, r3, #24
 80006d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80006d4:	041b      	lsls	r3, r3, #16
 80006d6:	431a      	orrs	r2, r3
											| (Local_u8DataArray[1] << SHIFT_8_BIT) | (Local_u8DataArray[0] << SHIFT_0_BIT) ;
 80006d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	4313      	orrs	r3, r2
 80006e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006e4:	4313      	orrs	r3, r2
				Local_u32LowByteDataReceive  = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT)
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 80006e8:	f001 f8d6 	bl	8001898 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 80006ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ee:	2200      	movs	r2, #0
 80006f0:	461c      	mov	r4, r3
 80006f2:	4615      	mov	r5, r2
 80006f4:	4622      	mov	r2, r4
 80006f6:	462b      	mov	r3, r5
 80006f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80006fa:	2002      	movs	r0, #2
 80006fc:	f001 f85c 	bl	80017b8 <HAL_FLASH_Program>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 8000700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000702:	1d19      	adds	r1, r3, #4
 8000704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000706:	2200      	movs	r2, #0
 8000708:	4698      	mov	r8, r3
 800070a:	4691      	mov	r9, r2
 800070c:	4642      	mov	r2, r8
 800070e:	464b      	mov	r3, r9
 8000710:	2002      	movs	r0, #2
 8000712:	f001 f851 	bl	80017b8 <HAL_FLASH_Program>
				HAL_FLASH_Lock();  //Locks again the flash memory
 8000716:	f001 f8e5 	bl	80018e4 <HAL_FLASH_Lock>

				Local_u32InactiveImageAddressCounter += 8;
 800071a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071c:	3308      	adds	r3, #8
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
				Local_u32SizeOfCode -= 8;
 8000720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000722:	3b08      	subs	r3, #8
 8000724:	633b      	str	r3, [r7, #48]	; 0x30
 8000726:	e041      	b.n	80007ac <BL_voidReceiveUpdate+0x184>
			}
			else{
				CAN_IF_Receive_Data_Frame(Local_u8DataArray);
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f8ef 	bl	8000910 <CAN_IF_Receive_Data_Frame>

				Local_u32HighByteDataReceive = (Local_u8DataArray[7] << SHIFT_24_BIT) | (Local_u8DataArray[6] << SHIFT_16_BIT)
 8000732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000736:	061a      	lsls	r2, r3, #24
 8000738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800073c:	041b      	lsls	r3, r3, #16
 800073e:	431a      	orrs	r2, r3
											| (Local_u8DataArray[5] << SHIFT_8_BIT) | (Local_u8DataArray[4] << SHIFT_0_BIT) ;
 8000740:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	4313      	orrs	r3, r2
 8000748:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800074c:	4313      	orrs	r3, r2
				Local_u32HighByteDataReceive = (Local_u8DataArray[7] << SHIFT_24_BIT) | (Local_u8DataArray[6] << SHIFT_16_BIT)
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
				Local_u32LowByteDataReceive  = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT)
 8000750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000754:	061a      	lsls	r2, r3, #24
 8000756:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800075a:	041b      	lsls	r3, r3, #16
 800075c:	431a      	orrs	r2, r3
											| (Local_u8DataArray[1] << SHIFT_8_BIT) | (Local_u8DataArray[0] << SHIFT_0_BIT) ;
 800075e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	4313      	orrs	r3, r2
 8000766:	f897 2020 	ldrb.w	r2, [r7, #32]
 800076a:	4313      	orrs	r3, r2
				Local_u32LowByteDataReceive  = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT)
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 800076e:	f001 f893 	bl	8001898 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 8000772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000774:	2200      	movs	r2, #0
 8000776:	469a      	mov	sl, r3
 8000778:	4693      	mov	fp, r2
 800077a:	4652      	mov	r2, sl
 800077c:	465b      	mov	r3, fp
 800077e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000780:	2002      	movs	r0, #2
 8000782:	f001 f819 	bl	80017b8 <HAL_FLASH_Program>
				if(RxHeader.DLC > 4){
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <BL_voidReceiveUpdate+0x1bc>)
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	2b04      	cmp	r3, #4
 800078c:	d90a      	bls.n	80007a4 <BL_voidReceiveUpdate+0x17c>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 800078e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000790:	1d19      	adds	r1, r3, #4
 8000792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000794:	2200      	movs	r2, #0
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800079e:	2002      	movs	r0, #2
 80007a0:	f001 f80a 	bl	80017b8 <HAL_FLASH_Program>
				}
				HAL_FLASH_Lock();  //Locks again the flash memory
 80007a4:	f001 f89e 	bl	80018e4 <HAL_FLASH_Lock>

				Local_u32SizeOfCode -= Local_u32SizeOfCode ;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
			}
			CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACKNOWLEDGE_LINE_OF_CODE_RECEIVED);
 80007ac:	2176      	movs	r1, #118	; 0x76
 80007ae:	2010      	movs	r0, #16
 80007b0:	f000 f854 	bl	800085c <CAN_IF_Transmit_UDS_Request>
	while(Local_u32SizeOfCode)
 80007b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f47f af63 	bne.w	8000682 <BL_voidReceiveUpdate+0x5a>
		}
	}
	// Wait for finish code of GW
	CAN_IF_Receive_UDS_Respond(&Local_u8HeaderFlag);
 80007bc:	f107 031f 	add.w	r3, r7, #31
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f883 	bl	80008cc <CAN_IF_Receive_UDS_Respond>

	if (Local_u8HeaderFlag == UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE)
 80007c6:	7ffb      	ldrb	r3, [r7, #31]
 80007c8:	2b37      	cmp	r3, #55	; 0x37
 80007ca:	d101      	bne.n	80007d0 <BL_voidReceiveUpdate+0x1a8>
	{
		BL_voidFinishBootLoader();
 80007cc:	f000 f80c 	bl	80007e8 <BL_voidFinishBootLoader>
	}
}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007da:	bf00      	nop
 80007dc:	08005000 	.word	0x08005000
 80007e0:	0801fc18 	.word	0x0801fc18
 80007e4:	200000a0 	.word	0x200000a0

080007e8 <BL_voidFinishBootLoader>:

void BL_voidFinishBootLoader(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	//Structure CAN Transmit
	CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACKNOWLEDGE_FINISHING);
 80007ec:	2177      	movs	r1, #119	; 0x77
 80007ee:	2010      	movs	r0, #16
 80007f0:	f000 f834 	bl	800085c <CAN_IF_Transmit_UDS_Request>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 80007f4:	f06f 010e 	mvn.w	r1, #14
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <BL_voidFinishBootLoader+0x28>)
 80007fa:	f7ff fe2b 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 80007fe:	f04f 31ff 	mov.w	r1, #4294967295
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <BL_voidFinishBootLoader+0x2c>)
 8000804:	f7ff fe26 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidMakeSoftWareReset();
 8000808:	f000 f806 	bl	8000818 <BL_voidMakeSoftWareReset>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	0801fc14 	.word	0x0801fc14
 8000814:	0801fc00 	.word	0x0801fc00

08000818 <BL_voidMakeSoftWareReset>:

void BL_voidMakeSoftWareReset(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
#ifdef Debug
	__HAL_DBGMCU_FREEZE_IWDG();
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <BL_voidMakeSoftWareReset+0x38>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <BL_voidMakeSoftWareReset+0x38>)
 8000822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000826:	6053      	str	r3, [r2, #4]
#endif

	hiwdg.Instance = IWDG;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <BL_voidMakeSoftWareReset+0x3c>)
 800082a:	4a0b      	ldr	r2, [pc, #44]	; (8000858 <BL_voidMakeSoftWareReset+0x40>)
 800082c:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <BL_voidMakeSoftWareReset+0x3c>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 9;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <BL_voidMakeSoftWareReset+0x3c>)
 8000836:	2209      	movs	r2, #9
 8000838:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <BL_voidMakeSoftWareReset+0x3c>)
 800083c:	f001 fb58 	bl	8001ef0 <HAL_IWDG_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <BL_voidMakeSoftWareReset+0x32>
	{
		Error_Handler();
 8000846:	f000 f993 	bl	8000b70 <Error_Handler>
	}
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	e0042000 	.word	0xe0042000
 8000854:	20000054 	.word	0x20000054
 8000858:	40003000 	.word	0x40003000

0800085c <CAN_IF_Transmit_UDS_Request>:
 *  Created on: Mar 6, 2024
 *      Author: CHD9HC
 */
#include <Can_Interface.h>

HAL_StatusTypeDef CAN_IF_Transmit_UDS_Request(uint8_t Node, uint8_t UDS_Req){
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d102      	bne.n	8000878 <CAN_IF_Transmit_UDS_Request+0x1c>
	   Local_u8SendToNode = 0x50;
 8000872:	2350      	movs	r3, #80	; 0x50
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	e007      	b.n	8000888 <CAN_IF_Transmit_UDS_Request+0x2c>
   }
   else if (Node == 0x02) {
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b02      	cmp	r3, #2
 800087c:	d102      	bne.n	8000884 <CAN_IF_Transmit_UDS_Request+0x28>
	   Local_u8SendToNode = 0x60;
 800087e:	2360      	movs	r3, #96	; 0x60
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	e001      	b.n	8000888 <CAN_IF_Transmit_UDS_Request+0x2c>
   }
   else{
	   Local_u8SendToNode = Node;
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <CAN_IF_Transmit_UDS_Request+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <CAN_IF_Transmit_UDS_Request+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <CAN_IF_Transmit_UDS_Request+0x60>)
 8000898:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = 1;  // data length
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <CAN_IF_Transmit_UDS_Request+0x60>)
 800089c:	2201      	movs	r2, #1
 800089e:	611a      	str	r2, [r3, #16]
   TxData[0] = UDS_Req;
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <CAN_IF_Transmit_UDS_Request+0x64>)
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	7013      	strb	r3, [r2, #0]

   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <CAN_IF_Transmit_UDS_Request+0x68>)
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <CAN_IF_Transmit_UDS_Request+0x64>)
 80008aa:	4904      	ldr	r1, [pc, #16]	; (80008bc <CAN_IF_Transmit_UDS_Request+0x60>)
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <CAN_IF_Transmit_UDS_Request+0x6c>)
 80008ae:	f000 fcaf 	bl	8001210 <HAL_CAN_AddTxMessage>
 80008b2:	4603      	mov	r3, r0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000088 	.word	0x20000088
 80008c0:	200000bc 	.word	0x200000bc
 80008c4:	200000cc 	.word	0x200000cc
 80008c8:	2000002c 	.word	0x2000002c

080008cc <CAN_IF_Receive_UDS_Respond>:
   }
   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
}

HAL_StatusTypeDef CAN_IF_Receive_UDS_Respond(uint8_t *UDS_Req){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 80008d4:	bf00      	nop
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <CAN_IF_Receive_UDS_Respond+0x38>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	f003 0303 	and.w	r3, r3, #3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f8      	beq.n	80008d6 <CAN_IF_Receive_UDS_Respond+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <CAN_IF_Receive_UDS_Respond+0x3c>)
 80008e6:	4a09      	ldr	r2, [pc, #36]	; (800090c <CAN_IF_Receive_UDS_Respond+0x40>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <CAN_IF_Receive_UDS_Respond+0x38>)
 80008ec:	f000 fd5f 	bl	80013ae <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	*UDS_Req = RxData[0];
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <CAN_IF_Receive_UDS_Respond+0x3c>)
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000002c 	.word	0x2000002c
 8000908:	200000c4 	.word	0x200000c4
 800090c:	200000a0 	.word	0x200000a0

08000910 <CAN_IF_Receive_Data_Frame>:

HAL_StatusTypeDef CAN_IF_Receive_Data_Frame(uint8_t *DataBuffer){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000918:	bf00      	nop
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <CAN_IF_Receive_Data_Frame+0x54>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0f8      	beq.n	800091a <CAN_IF_Receive_Data_Frame+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <CAN_IF_Receive_Data_Frame+0x58>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <CAN_IF_Receive_Data_Frame+0x5c>)
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <CAN_IF_Receive_Data_Frame+0x54>)
 8000930:	f000 fd3d 	bl	80013ae <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	uint8_t Local_u8DataLength = 8;
 8000934:	2308      	movs	r3, #8
 8000936:	73bb      	strb	r3, [r7, #14]
	for(uint8_t index = 0 ; index < Local_u8DataLength ; index++ ){
 8000938:	2300      	movs	r3, #0
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e009      	b.n	8000952 <CAN_IF_Receive_Data_Frame+0x42>
	   DataBuffer[index] = RxData[index];
 800093e:	7bfa      	ldrb	r2, [r7, #15]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	440b      	add	r3, r1
 8000946:	4908      	ldr	r1, [pc, #32]	; (8000968 <CAN_IF_Receive_Data_Frame+0x58>)
 8000948:	5c8a      	ldrb	r2, [r1, r2]
 800094a:	701a      	strb	r2, [r3, #0]
	for(uint8_t index = 0 ; index < Local_u8DataLength ; index++ ){
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	3301      	adds	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	7bfa      	ldrb	r2, [r7, #15]
 8000954:	7bbb      	ldrb	r3, [r7, #14]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3f1      	bcc.n	800093e <CAN_IF_Receive_Data_Frame+0x2e>
    }
	return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000002c 	.word	0x2000002c
 8000968:	200000c4 	.word	0x200000c4
 800096c:	200000a0 	.word	0x200000a0

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f000 f9c4 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f80c 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 f8ac 	bl	8000ad8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000980:	f000 f850 	bl	8000a24 <MX_CAN_Init>

  HAL_CAN_Start(&hcan);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <main+0x20>)
 8000986:	f000 fbff 	bl	8001188 <HAL_CAN_Start>
  /* USER CODE BEGIN 2 */
  BL_voidBootLoader_Init();
 800098a:	f7ff fbed 	bl	8000168 <BL_voidBootLoader_Init>
  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */
  while (1)
 800098e:	e7fe      	b.n	800098e <main+0x1e>
 8000990:	2000002c 	.word	0x2000002c

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b090      	sub	sp, #64	; 0x40
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	2228      	movs	r2, #40	; 0x28
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fec4 	bl	8002730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009b6:	2309      	movs	r3, #9
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009cc:	2302      	movs	r3, #2
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fac7 	bl	8001f74 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80009ec:	f000 f8c0 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
 80009f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	2302      	movs	r3, #2
 80009f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fd34 	bl	8002478 <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a16:	f000 f8ab 	bl	8000b70 <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3740      	adds	r7, #64	; 0x40
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a2a:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <MX_CAN_Init+0xac>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a30:	2204      	movs	r2, #4
 8000a32:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a46:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a4e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a74:	4815      	ldr	r0, [pc, #84]	; (8000acc <MX_CAN_Init+0xa8>)
 8000a76:	f000 f9c3 	bl	8000e00 <HAL_CAN_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a80:	f000 f876 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	621a      	str	r2, [r3, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a90:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh = 0x000;
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow = 0;
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	61da      	str	r2, [r3, #28]
  canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ac0:	4904      	ldr	r1, [pc, #16]	; (8000ad4 <MX_CAN_Init+0xb0>)
 8000ac2:	4802      	ldr	r0, [pc, #8]	; (8000acc <MX_CAN_Init+0xa8>)
 8000ac4:	f000 fa97 	bl	8000ff6 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000002c 	.word	0x2000002c
 8000ad0:	40006400 	.word	0x40006400
 8000ad4:	20000060 	.word	0x20000060

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a1d      	ldr	r2, [pc, #116]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000b0a:	f043 0320 	orr.w	r3, r3, #32
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0320 	and.w	r3, r3, #32
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_GPIO_Init+0x90>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <MX_GPIO_Init+0x94>)
 8000b3c:	f001 f9c0 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_GPIO_Init+0x94>)
 8000b5a:	f001 f82d 	bl	8001bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40011000 	.word	0x40011000

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_MspInit+0x40>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <HAL_MspInit+0x40>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6193      	str	r3, [r2, #24]
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_MspInit+0x40>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_MspInit+0x40>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_MspInit+0x40>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_MspInit+0x40>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_CAN_MspInit+0x8c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d131      	bne.n	8000c44 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_CAN_MspInit+0x90>)
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <HAL_CAN_MspInit+0x90>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	61d3      	str	r3, [r2, #28]
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_CAN_MspInit+0x90>)
 8000bee:	69db      	ldr	r3, [r3, #28]
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_CAN_MspInit+0x90>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_CAN_MspInit+0x90>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_CAN_MspInit+0x90>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	4619      	mov	r1, r3
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <HAL_CAN_MspInit+0x94>)
 8000c26:	f000 ffc7 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <HAL_CAN_MspInit+0x94>)
 8000c40:	f000 ffba 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40006400 	.word	0x40006400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010800 	.word	0x40010800

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9e:	f000 f893 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
	...

08000cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff fff7 	bl	8000ca6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cba:	490c      	ldr	r1, [pc, #48]	; (8000cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd0:	4c09      	ldr	r4, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f001 fd2f 	bl	8002740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff fe45 	bl	8000970 <main>
  bx lr
 8000ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf0:	080027cc 	.word	0x080027cc
  ldr r2, =_sbss
 8000cf4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cf8:	200000f8 	.word	0x200000f8

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 fd1d 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f826 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff ff2e 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_DeInit+0x2c>)
 8000d32:	f04f 32ff 	mov.w	r2, #4294967295
 8000d36:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <HAL_DeInit+0x2c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_DeInit+0x2c>)
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_DeInit+0x2c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000d4c:	f000 f806 	bl	8000d5c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fd09 	bl	800179e <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 fcdf 	bl	8001766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x1c>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x20>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_IncTick+0x20>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	20000008 	.word	0x20000008
 8000de8:	200000d0 	.word	0x200000d0

08000dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <HAL_GetTick+0x10>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	200000d0 	.word	0x200000d0

08000e00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e0ed      	b.n	8000fee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d102      	bne.n	8000e24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fece 	bl	8000bc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0201 	orr.w	r2, r2, #1
 8000e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e34:	f7ff ffda 	bl	8000dec <HAL_GetTick>
 8000e38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e3a:	e012      	b.n	8000e62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e3c:	f7ff ffd6 	bl	8000dec <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d90b      	bls.n	8000e62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2205      	movs	r2, #5
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e0c5      	b.n	8000fee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0e5      	beq.n	8000e3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0202 	bic.w	r2, r2, #2
 8000e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e80:	f7ff ffb4 	bl	8000dec <HAL_GetTick>
 8000e84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e86:	e012      	b.n	8000eae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e88:	f7ff ffb0 	bl	8000dec <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b0a      	cmp	r3, #10
 8000e94:	d90b      	bls.n	8000eae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2205      	movs	r2, #5
 8000ea6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e09f      	b.n	8000fee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e5      	bne.n	8000e88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7e1b      	ldrb	r3, [r3, #24]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d108      	bne.n	8000ed6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e007      	b.n	8000ee6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7e5b      	ldrb	r3, [r3, #25]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d108      	bne.n	8000f00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e007      	b.n	8000f10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7e9b      	ldrb	r3, [r3, #26]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d108      	bne.n	8000f2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0220 	orr.w	r2, r2, #32
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e007      	b.n	8000f3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0220 	bic.w	r2, r2, #32
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7edb      	ldrb	r3, [r3, #27]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d108      	bne.n	8000f54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0210 	bic.w	r2, r2, #16
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e007      	b.n	8000f64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0210 	orr.w	r2, r2, #16
 8000f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7f1b      	ldrb	r3, [r3, #28]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d108      	bne.n	8000f7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0208 	orr.w	r2, r2, #8
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e007      	b.n	8000f8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0208 	bic.w	r2, r2, #8
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7f5b      	ldrb	r3, [r3, #29]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d108      	bne.n	8000fa8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0204 	orr.w	r2, r2, #4
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e007      	b.n	8000fb8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0204 	bic.w	r2, r2, #4
 8000fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	ea42 0103 	orr.w	r1, r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	1e5a      	subs	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b087      	sub	sp, #28
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800100e:	7cfb      	ldrb	r3, [r7, #19]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d003      	beq.n	800101c <HAL_CAN_ConfigFilter+0x26>
 8001014:	7cfb      	ldrb	r3, [r7, #19]
 8001016:	2b02      	cmp	r3, #2
 8001018:	f040 80aa 	bne.w	8001170 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2201      	movs	r2, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d123      	bne.n	800109e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001078:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3248      	adds	r2, #72	; 0x48
 800107e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001092:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001094:	6979      	ldr	r1, [r7, #20]
 8001096:	3348      	adds	r3, #72	; 0x48
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d122      	bne.n	80010ec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3248      	adds	r2, #72	; 0x48
 80010cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010e2:	6979      	ldr	r1, [r7, #20]
 80010e4:	3348      	adds	r3, #72	; 0x48
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d109      	bne.n	8001108 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001106:	e007      	b.n	8001118 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	431a      	orrs	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001132:	e007      	b.n	8001144 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	431a      	orrs	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d107      	bne.n	800115c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	431a      	orrs	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001162:	f023 0201 	bic.w	r2, r3, #1
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	e006      	b.n	800117e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d12e      	bne.n	80011fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2202      	movs	r2, #2
 80011a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011b4:	f7ff fe1a 	bl	8000dec <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ba:	e012      	b.n	80011e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011bc:	f7ff fe16 	bl	8000dec <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b0a      	cmp	r3, #10
 80011c8:	d90b      	bls.n	80011e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e012      	b.n	8001208 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e5      	bne.n	80011bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e006      	b.n	8001208 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
  }
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001224:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d003      	beq.n	800123c <HAL_CAN_AddTxMessage+0x2c>
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	2b02      	cmp	r3, #2
 8001238:	f040 80ad 	bne.w	8001396 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10a      	bne.n	800125c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8095 	beq.w	8001386 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	0e1b      	lsrs	r3, r3, #24
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001266:	2201      	movs	r2, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10d      	bne.n	8001294 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001282:	68f9      	ldr	r1, [r7, #12]
 8001284:	6809      	ldr	r1, [r1, #0]
 8001286:	431a      	orrs	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3318      	adds	r3, #24
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	440b      	add	r3, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e00f      	b.n	80012b4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800129e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3318      	adds	r3, #24
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	440b      	add	r3, r1
 80012b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3318      	adds	r3, #24
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	440b      	add	r3, r1
 80012c4:	3304      	adds	r3, #4
 80012c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	7d1b      	ldrb	r3, [r3, #20]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d111      	bne.n	80012f4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3318      	adds	r3, #24
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	3304      	adds	r3, #4
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3318      	adds	r3, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	440b      	add	r3, r1
 80012f0:	3304      	adds	r3, #4
 80012f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3307      	adds	r3, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	061a      	lsls	r2, r3, #24
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3306      	adds	r3, #6
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	041b      	lsls	r3, r3, #16
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3305      	adds	r3, #5
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	4313      	orrs	r3, r2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	3204      	adds	r2, #4
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	4610      	mov	r0, r2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	6811      	ldr	r1, [r2, #0]
 800131c:	ea43 0200 	orr.w	r2, r3, r0
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	440b      	add	r3, r1
 8001326:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800132a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3303      	adds	r3, #3
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	061a      	lsls	r2, r3, #24
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3302      	adds	r3, #2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	4313      	orrs	r3, r2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	4610      	mov	r0, r2
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	6811      	ldr	r1, [r2, #0]
 8001352:	ea43 0200 	orr.w	r2, r3, r0
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	440b      	add	r3, r1
 800135c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001360:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3318      	adds	r3, #24
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	6811      	ldr	r1, [r2, #0]
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3318      	adds	r3, #24
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	440b      	add	r3, r1
 8001380:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e00e      	b.n	80013a4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e006      	b.n	80013a4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
  }
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3724      	adds	r7, #36	; 0x24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013ae:	b480      	push	{r7}
 80013b0:	b087      	sub	sp, #28
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d003      	beq.n	80013d2 <HAL_CAN_GetRxMessage+0x24>
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	f040 8103 	bne.w	80015d8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10e      	bne.n	80013f6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0f7      	b.n	80015e6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d107      	bne.n	8001414 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0e8      	b.n	80015e6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	331b      	adds	r3, #27
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	4413      	add	r3, r2
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0204 	and.w	r2, r3, #4
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10c      	bne.n	800144c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	331b      	adds	r3, #27
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0d5b      	lsrs	r3, r3, #21
 8001442:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e00b      	b.n	8001464 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	331b      	adds	r3, #27
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	331b      	adds	r3, #27
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0202 	and.w	r2, r3, #2
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	331b      	adds	r3, #27
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4413      	add	r3, r2
 8001486:	3304      	adds	r3, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2208      	movs	r2, #8
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	e00b      	b.n	80014b2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	331b      	adds	r3, #27
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	4413      	add	r3, r2
 80014a6:	3304      	adds	r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 020f 	and.w	r2, r3, #15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	331b      	adds	r3, #27
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	3304      	adds	r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	331b      	adds	r3, #27
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	4413      	add	r3, r2
 80014d6:	3304      	adds	r3, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0c1b      	lsrs	r3, r3, #16
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4413      	add	r3, r2
 8001502:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0a1a      	lsrs	r2, r3, #8
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	4413      	add	r3, r2
 800151c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	0c1a      	lsrs	r2, r3, #16
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0e1a      	lsrs	r2, r3, #24
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	3303      	adds	r3, #3
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	4413      	add	r3, r2
 8001550:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	3304      	adds	r3, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4413      	add	r3, r2
 8001568:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0a1a      	lsrs	r2, r3, #8
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3305      	adds	r3, #5
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	4413      	add	r3, r2
 8001582:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0c1a      	lsrs	r2, r3, #16
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3306      	adds	r3, #6
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	4413      	add	r3, r2
 800159c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0e1a      	lsrs	r2, r3, #24
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3307      	adds	r3, #7
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d108      	bne.n	80015c4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0220 	orr.w	r2, r2, #32
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	e007      	b.n	80015d4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0220 	orr.w	r2, r2, #32
 80015d2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	e006      	b.n	80015e6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800171c:	d301      	bcc.n	8001722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <SysTick_Config+0x40>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172a:	210f      	movs	r1, #15
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f7ff ff90 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SysTick_Config+0x40>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <SysTick_Config+0x40>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff49 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff5e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff90 	bl	80016a8 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5f 	bl	8001654 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffb0 	bl	800170c <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017d2:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <HAL_FLASH_Program+0xd8>)
 80017d4:	7e1b      	ldrb	r3, [r3, #24]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_FLASH_Program+0x26>
 80017da:	2302      	movs	r3, #2
 80017dc:	e054      	b.n	8001888 <HAL_FLASH_Program+0xd0>
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_FLASH_Program+0xd8>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017e8:	f000 f8a8 	bl	800193c <FLASH_WaitForLastOperation>
 80017ec:	4603      	mov	r3, r0
 80017ee:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d144      	bne.n	8001880 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d102      	bne.n	8001802 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80017fc:	2301      	movs	r3, #1
 80017fe:	757b      	strb	r3, [r7, #21]
 8001800:	e007      	b.n	8001812 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d102      	bne.n	800180e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001808:	2302      	movs	r3, #2
 800180a:	757b      	strb	r3, [r7, #21]
 800180c:	e001      	b.n	8001812 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800180e:	2304      	movs	r3, #4
 8001810:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001812:	2300      	movs	r3, #0
 8001814:	75bb      	strb	r3, [r7, #22]
 8001816:	e02d      	b.n	8001874 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001818:	7dbb      	ldrb	r3, [r7, #22]
 800181a:	005a      	lsls	r2, r3, #1
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	eb02 0c03 	add.w	ip, r2, r3
 8001822:	7dbb      	ldrb	r3, [r7, #22]
 8001824:	0119      	lsls	r1, r3, #4
 8001826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800182a:	f1c1 0620 	rsb	r6, r1, #32
 800182e:	f1a1 0020 	sub.w	r0, r1, #32
 8001832:	fa22 f401 	lsr.w	r4, r2, r1
 8001836:	fa03 f606 	lsl.w	r6, r3, r6
 800183a:	4334      	orrs	r4, r6
 800183c:	fa23 f000 	lsr.w	r0, r3, r0
 8001840:	4304      	orrs	r4, r0
 8001842:	fa23 f501 	lsr.w	r5, r3, r1
 8001846:	b2a3      	uxth	r3, r4
 8001848:	4619      	mov	r1, r3
 800184a:	4660      	mov	r0, ip
 800184c:	f000 f85a 	bl	8001904 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001850:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001854:	f000 f872 	bl	800193c <FLASH_WaitForLastOperation>
 8001858:	4603      	mov	r3, r0
 800185a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_FLASH_Program+0xdc>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_FLASH_Program+0xdc>)
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d107      	bne.n	800187e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800186e:	7dbb      	ldrb	r3, [r7, #22]
 8001870:	3301      	adds	r3, #1
 8001872:	75bb      	strb	r3, [r7, #22]
 8001874:	7dba      	ldrb	r2, [r7, #22]
 8001876:	7d7b      	ldrb	r3, [r7, #21]
 8001878:	429a      	cmp	r2, r3
 800187a:	d3cd      	bcc.n	8001818 <HAL_FLASH_Program+0x60>
 800187c:	e000      	b.n	8001880 <HAL_FLASH_Program+0xc8>
      {
        break;
 800187e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <HAL_FLASH_Program+0xd8>)
 8001882:	2200      	movs	r2, #0
 8001884:	761a      	strb	r2, [r3, #24]

  return status;
 8001886:	7dfb      	ldrb	r3, [r7, #23]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001890:	200000d8 	.word	0x200000d8
 8001894:	40022000 	.word	0x40022000

08001898 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_FLASH_Unlock+0x40>)
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00d      	beq.n	80018ca <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_FLASH_Unlock+0x40>)
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_FLASH_Unlock+0x44>)
 80018b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_FLASH_Unlock+0x40>)
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_FLASH_Unlock+0x48>)
 80018b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_FLASH_Unlock+0x40>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000
 80018dc:	45670123 	.word	0x45670123
 80018e0:	cdef89ab 	.word	0xcdef89ab

080018e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_FLASH_Lock+0x1c>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_FLASH_Lock+0x1c>)
 80018ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40022000 	.word	0x40022000

08001904 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <FLASH_Program_HalfWord+0x30>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <FLASH_Program_HalfWord+0x34>)
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <FLASH_Program_HalfWord+0x34>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	801a      	strh	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200000d8 	.word	0x200000d8
 8001938:	40022000 	.word	0x40022000

0800193c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff fa52 	bl	8000dec <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800194a:	e010      	b.n	800196e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001952:	d00c      	beq.n	800196e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <FLASH_WaitForLastOperation+0x2e>
 800195a:	f7ff fa47 	bl	8000dec <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d201      	bcs.n	800196e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e025      	b.n	80019ba <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <FLASH_WaitForLastOperation+0x88>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e8      	bne.n	800194c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <FLASH_WaitForLastOperation+0x88>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 0320 	and.w	r3, r3, #32
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <FLASH_WaitForLastOperation+0x88>)
 8001988:	2220      	movs	r2, #32
 800198a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <FLASH_WaitForLastOperation+0x88>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10b      	bne.n	80019b0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <FLASH_WaitForLastOperation+0x88>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <FLASH_WaitForLastOperation+0x88>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80019b0:	f000 f80a 	bl	80019c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000

080019c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <FLASH_SetErrorCode+0x98>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <FLASH_SetErrorCode+0x9c>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f043 0302 	orr.w	r3, r3, #2
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <FLASH_SetErrorCode+0x9c>)
 80019e8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <FLASH_SetErrorCode+0x98>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <FLASH_SetErrorCode+0x9c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <FLASH_SetErrorCode+0x9c>)
 8001a08:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <FLASH_SetErrorCode+0x98>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <FLASH_SetErrorCode+0x9c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <FLASH_SetErrorCode+0x9c>)
 8001a28:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <FLASH_SetErrorCode+0x98>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <FLASH_SetErrorCode+0x98>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f240 1201 	movw	r2, #257	; 0x101
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d106      	bne.n	8001a4e <FLASH_SetErrorCode+0x86>
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <FLASH_SetErrorCode+0x98>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <FLASH_SetErrorCode+0x98>)
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	61d3      	str	r3, [r2, #28]
}  
 8001a4c:	e002      	b.n	8001a54 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <FLASH_SetErrorCode+0x98>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	60d3      	str	r3, [r2, #12]
}  
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000
 8001a64:	200000d8 	.word	0x200000d8

08001a68 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_FLASHEx_Erase+0xd0>)
 8001a7c:	7e1b      	ldrb	r3, [r3, #24]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_FLASHEx_Erase+0x1e>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e053      	b.n	8001b2e <HAL_FLASHEx_Erase+0xc6>
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_FLASHEx_Erase+0xd0>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d116      	bne.n	8001ac2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a98:	f7ff ff50 	bl	800193c <FLASH_WaitForLastOperation>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d141      	bne.n	8001b26 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 f84c 	bl	8001b40 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001aa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aac:	f7ff ff46 	bl	800193c <FLASH_WaitForLastOperation>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_FLASHEx_Erase+0xd4>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <HAL_FLASHEx_Erase+0xd4>)
 8001aba:	f023 0304 	bic.w	r3, r3, #4
 8001abe:	6113      	str	r3, [r2, #16]
 8001ac0:	e031      	b.n	8001b26 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001ac2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ac6:	f7ff ff39 	bl	800193c <FLASH_WaitForLastOperation>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d12a      	bne.n	8001b26 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	e019      	b.n	8001b14 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001ae0:	68b8      	ldr	r0, [r7, #8]
 8001ae2:	f000 f849 	bl	8001b78 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ae6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aea:	f7ff ff27 	bl	800193c <FLASH_WaitForLastOperation>
 8001aee:	4603      	mov	r3, r0
 8001af0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_FLASHEx_Erase+0xd4>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <HAL_FLASHEx_Erase+0xd4>)
 8001af8:	f023 0302 	bic.w	r3, r3, #2
 8001afc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	601a      	str	r2, [r3, #0]
            break;
 8001b0a:	e00c      	b.n	8001b26 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b12:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	029a      	lsls	r2, r3, #10
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	4413      	add	r3, r2
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d3dc      	bcc.n	8001ae0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_FLASHEx_Erase+0xd0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	761a      	strb	r2, [r3, #24]

  return status;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200000d8 	.word	0x200000d8
 8001b3c:	40022000 	.word	0x40022000

08001b40 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <FLASH_MassErase+0x30>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <FLASH_MassErase+0x34>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <FLASH_MassErase+0x34>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <FLASH_MassErase+0x34>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <FLASH_MassErase+0x34>)
 8001b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b64:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	200000d8 	.word	0x200000d8
 8001b74:	40022000 	.word	0x40022000

08001b78 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <FLASH_PageErase+0x38>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <FLASH_PageErase+0x3c>)
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <FLASH_PageErase+0x3c>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <FLASH_PageErase+0x3c>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <FLASH_PageErase+0x3c>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <FLASH_PageErase+0x3c>)
 8001b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	200000d8 	.word	0x200000d8
 8001bb4:	40022000 	.word	0x40022000

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b08b      	sub	sp, #44	; 0x2c
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bca:	e169      	b.n	8001ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 8158 	bne.w	8001e9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4a9a      	ldr	r2, [pc, #616]	; (8001e58 <HAL_GPIO_Init+0x2a0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d05e      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001bf4:	4a98      	ldr	r2, [pc, #608]	; (8001e58 <HAL_GPIO_Init+0x2a0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d875      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001bfa:	4a98      	ldr	r2, [pc, #608]	; (8001e5c <HAL_GPIO_Init+0x2a4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d058      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c00:	4a96      	ldr	r2, [pc, #600]	; (8001e5c <HAL_GPIO_Init+0x2a4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d86f      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c06:	4a96      	ldr	r2, [pc, #600]	; (8001e60 <HAL_GPIO_Init+0x2a8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d052      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c0c:	4a94      	ldr	r2, [pc, #592]	; (8001e60 <HAL_GPIO_Init+0x2a8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d869      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c12:	4a94      	ldr	r2, [pc, #592]	; (8001e64 <HAL_GPIO_Init+0x2ac>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d04c      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c18:	4a92      	ldr	r2, [pc, #584]	; (8001e64 <HAL_GPIO_Init+0x2ac>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d863      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c1e:	4a92      	ldr	r2, [pc, #584]	; (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d046      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
 8001c24:	4a90      	ldr	r2, [pc, #576]	; (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d85d      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d82a      	bhi.n	8001c84 <HAL_GPIO_Init+0xcc>
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d859      	bhi.n	8001ce6 <HAL_GPIO_Init+0x12e>
 8001c32:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <HAL_GPIO_Init+0x80>)
 8001c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c38:	08001cb3 	.word	0x08001cb3
 8001c3c:	08001c8d 	.word	0x08001c8d
 8001c40:	08001c9f 	.word	0x08001c9f
 8001c44:	08001ce1 	.word	0x08001ce1
 8001c48:	08001ce7 	.word	0x08001ce7
 8001c4c:	08001ce7 	.word	0x08001ce7
 8001c50:	08001ce7 	.word	0x08001ce7
 8001c54:	08001ce7 	.word	0x08001ce7
 8001c58:	08001ce7 	.word	0x08001ce7
 8001c5c:	08001ce7 	.word	0x08001ce7
 8001c60:	08001ce7 	.word	0x08001ce7
 8001c64:	08001ce7 	.word	0x08001ce7
 8001c68:	08001ce7 	.word	0x08001ce7
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001ce7 	.word	0x08001ce7
 8001c74:	08001ce7 	.word	0x08001ce7
 8001c78:	08001ce7 	.word	0x08001ce7
 8001c7c:	08001c95 	.word	0x08001c95
 8001c80:	08001ca9 	.word	0x08001ca9
 8001c84:	4a79      	ldr	r2, [pc, #484]	; (8001e6c <HAL_GPIO_Init+0x2b4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c8a:	e02c      	b.n	8001ce6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	623b      	str	r3, [r7, #32]
          break;
 8001c92:	e029      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e024      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	623b      	str	r3, [r7, #32]
          break;
 8001ca6:	e01f      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	330c      	adds	r3, #12
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e01a      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	623b      	str	r3, [r7, #32]
          break;
 8001cbe:	e013      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	611a      	str	r2, [r3, #16]
          break;
 8001cd2:	e009      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	615a      	str	r2, [r3, #20]
          break;
 8001cde:	e003      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x130>
          break;
 8001ce6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	; 0xff
 8001cec:	d801      	bhi.n	8001cf2 <HAL_GPIO_Init+0x13a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	e001      	b.n	8001cf6 <HAL_GPIO_Init+0x13e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d802      	bhi.n	8001d04 <HAL_GPIO_Init+0x14c>
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x152>
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	3b08      	subs	r3, #8
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	210f      	movs	r1, #15
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	6a39      	ldr	r1, [r7, #32]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	fa01 f303 	lsl.w	r3, r1, r3
 8001d24:	431a      	orrs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80b1 	beq.w	8001e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d38:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a4c      	ldr	r2, [pc, #304]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d50:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a40      	ldr	r2, [pc, #256]	; (8001e78 <HAL_GPIO_Init+0x2c0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_GPIO_Init+0x1ec>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <HAL_GPIO_Init+0x2c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00d      	beq.n	8001da0 <HAL_GPIO_Init+0x1e8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3e      	ldr	r2, [pc, #248]	; (8001e80 <HAL_GPIO_Init+0x2c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d007      	beq.n	8001d9c <HAL_GPIO_Init+0x1e4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	; (8001e84 <HAL_GPIO_Init+0x2cc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_GPIO_Init+0x1e0>
 8001d94:	2303      	movs	r3, #3
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001d98:	2304      	movs	r3, #4
 8001d9a:	e004      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x1ee>
 8001da4:	2300      	movs	r3, #0
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	f002 0203 	and.w	r2, r2, #3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4093      	lsls	r3, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db6:	492f      	ldr	r1, [pc, #188]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	492c      	ldr	r1, [pc, #176]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4928      	ldr	r1, [pc, #160]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4922      	ldr	r1, [pc, #136]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	491e      	ldr	r1, [pc, #120]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4918      	ldr	r1, [pc, #96]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4914      	ldr	r1, [pc, #80]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d021      	beq.n	8001e8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e021      	b.n	8001e9a <HAL_GPIO_Init+0x2e2>
 8001e56:	bf00      	nop
 8001e58:	10320000 	.word	0x10320000
 8001e5c:	10310000 	.word	0x10310000
 8001e60:	10220000 	.word	0x10220000
 8001e64:	10210000 	.word	0x10210000
 8001e68:	10120000 	.word	0x10120000
 8001e6c:	10110000 	.word	0x10110000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	40010c00 	.word	0x40010c00
 8001e80:	40011000 	.word	0x40011000
 8001e84:	40011400 	.word	0x40011400
 8001e88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4909      	ldr	r1, [pc, #36]	; (8001ebc <HAL_GPIO_Init+0x304>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae8e 	bne.w	8001bcc <HAL_GPIO_Init+0x14>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	372c      	adds	r7, #44	; 0x2c
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001edc:	e003      	b.n	8001ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e034      	b.n	8001f6c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f245 5255 	movw	r2, #21845	; 0x5555
 8001f14:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6852      	ldr	r2, [r2, #4]
 8001f1e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6892      	ldr	r2, [r2, #8]
 8001f28:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001f2a:	f7fe ff5f 	bl	8000dec <HAL_GetTick>
 8001f2e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001f30:	e00f      	b.n	8001f52 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001f32:	f7fe ff5b 	bl	8000dec <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b27      	cmp	r3, #39	; 0x27
 8001f3e:	d908      	bls.n	8001f52 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e00c      	b.n	8001f6c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1e8      	bne.n	8001f32 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001f68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e272      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8087 	beq.w	80020a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f94:	4b92      	ldr	r3, [pc, #584]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d00c      	beq.n	8001fba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
 8001fac:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x12c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d168      	bne.n	80020a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e24c      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x76>
 8001fdc:	4b80      	ldr	r3, [pc, #512]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a7f      	ldr	r2, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e02e      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x98>
 8001ff2:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a77      	ldr	r2, [pc, #476]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xbc>
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a71      	ldr	r2, [pc, #452]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6e      	ldr	r2, [pc, #440]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8002030:	4b6b      	ldr	r3, [pc, #428]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7fe fecc 	bl	8000dec <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7fe fec8 	bl	8000dec <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e200      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xe4>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe feb8 	bl	8000dec <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7fe feb4 	bl	8000dec <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1ec      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x10c>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d063      	beq.n	8002176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ae:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ba:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1c0      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4939      	ldr	r1, [pc, #228]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	e03a      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <HAL_RCC_OscConfig+0x270>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fe6d 	bl	8000dec <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7fe fe69 	bl	8000dec <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1a1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4927      	ldr	r1, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e015      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_RCC_OscConfig+0x270>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fe4c 	bl	8000dec <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002158:	f7fe fe48 	bl	8000dec <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e180      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03a      	beq.n	80021f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d019      	beq.n	80021be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x274>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7fe fe2c 	bl	8000dec <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7fe fe28 	bl	8000dec <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e160      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f000 fa9c 	bl	80026f4 <RCC_Delay>
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_OscConfig+0x274>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7fe fe12 	bl	8000dec <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ca:	e00f      	b.n	80021ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7fe fe0e 	bl	8000dec <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d908      	bls.n	80021ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e146      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	42420000 	.word	0x42420000
 80021e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e9      	bne.n	80021cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a6 	beq.w	8002352 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a87      	ldr	r2, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b85      	ldr	r3, [pc, #532]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b82      	ldr	r3, [pc, #520]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7e      	ldr	r2, [pc, #504]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe fdcf 	bl	8000dec <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe fdcb 	bl	8000dec <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e103      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b75      	ldr	r3, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x312>
 8002278:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e02d      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x334>
 800228e:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a69      	ldr	r2, [pc, #420]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a66      	ldr	r2, [pc, #408]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x356>
 80022b0:	4b61      	ldr	r3, [pc, #388]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a60      	ldr	r2, [pc, #384]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a5d      	ldr	r2, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022ca:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a5a      	ldr	r2, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a57      	ldr	r2, [pc, #348]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fd7f 	bl	8000dec <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fd7b 	bl	8000dec <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0b1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCC_OscConfig+0x37e>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7fe fd69 	bl	8000dec <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fd65 	bl	8000dec <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e09b      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	4b40      	ldr	r3, [pc, #256]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d061      	beq.n	800242c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d146      	bne.n	80023fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7fe fd39 	bl	8000dec <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe fd35 	bl	8000dec <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e06d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4921      	ldr	r1, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a19      	ldr	r1, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	430b      	orrs	r3, r1
 80023ca:	491b      	ldr	r1, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fd09 	bl	8000dec <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fd05 	bl	8000dec <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e03d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x46a>
 80023fc:	e035      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fcf2 	bl	8000dec <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fcee 	bl	8000dec <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e026      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x498>
 800242a:	e01e      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e019      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x500>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d0      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d040      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e073      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4936      	ldr	r1, [pc, #216]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe fc40 	bl	8000dec <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fc3c 	bl	8000dec <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e053      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d210      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f821 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fb9e 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40021000 	.word	0x40021000
 8002640:	080027a0 	.word	0x080027a0
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002666:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b04      	cmp	r3, #4
 8002674:	d002      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x30>
 8002676:	2b08      	cmp	r3, #8
 8002678:	d003      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x36>
 800267a:	e027      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800267e:	613b      	str	r3, [r7, #16]
      break;
 8002680:	e027      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	0c9b      	lsrs	r3, r3, #18
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d010      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	0c5b      	lsrs	r3, r3, #17
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ae:	fb03 f202 	mul.w	r2, r3, r2
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e004      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	613b      	str	r3, [r7, #16]
      break;
 80026ca:	e002      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ce:	613b      	str	r3, [r7, #16]
      break;
 80026d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d2:	693b      	ldr	r3, [r7, #16]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	007a1200 	.word	0x007a1200
 80026e8:	080027b0 	.word	0x080027b0
 80026ec:	080027c0 	.word	0x080027c0
 80026f0:	003d0900 	.word	0x003d0900

080026f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <RCC_Delay+0x34>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <RCC_Delay+0x38>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0a5b      	lsrs	r3, r3, #9
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002710:	bf00      	nop
  }
  while (Delay --);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	60fa      	str	r2, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f9      	bne.n	8002710 <RCC_Delay+0x1c>
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	20000000 	.word	0x20000000
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <memset>:
 8002730:	4603      	mov	r3, r0
 8002732:	4402      	add	r2, r0
 8002734:	4293      	cmp	r3, r2
 8002736:	d100      	bne.n	800273a <memset+0xa>
 8002738:	4770      	bx	lr
 800273a:	f803 1b01 	strb.w	r1, [r3], #1
 800273e:	e7f9      	b.n	8002734 <memset+0x4>

08002740 <__libc_init_array>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	2600      	movs	r6, #0
 8002744:	4d0c      	ldr	r5, [pc, #48]	; (8002778 <__libc_init_array+0x38>)
 8002746:	4c0d      	ldr	r4, [pc, #52]	; (800277c <__libc_init_array+0x3c>)
 8002748:	1b64      	subs	r4, r4, r5
 800274a:	10a4      	asrs	r4, r4, #2
 800274c:	42a6      	cmp	r6, r4
 800274e:	d109      	bne.n	8002764 <__libc_init_array+0x24>
 8002750:	f000 f81a 	bl	8002788 <_init>
 8002754:	2600      	movs	r6, #0
 8002756:	4d0a      	ldr	r5, [pc, #40]	; (8002780 <__libc_init_array+0x40>)
 8002758:	4c0a      	ldr	r4, [pc, #40]	; (8002784 <__libc_init_array+0x44>)
 800275a:	1b64      	subs	r4, r4, r5
 800275c:	10a4      	asrs	r4, r4, #2
 800275e:	42a6      	cmp	r6, r4
 8002760:	d105      	bne.n	800276e <__libc_init_array+0x2e>
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	f855 3b04 	ldr.w	r3, [r5], #4
 8002768:	4798      	blx	r3
 800276a:	3601      	adds	r6, #1
 800276c:	e7ee      	b.n	800274c <__libc_init_array+0xc>
 800276e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002772:	4798      	blx	r3
 8002774:	3601      	adds	r6, #1
 8002776:	e7f2      	b.n	800275e <__libc_init_array+0x1e>
 8002778:	080027c4 	.word	0x080027c4
 800277c:	080027c4 	.word	0x080027c4
 8002780:	080027c4 	.word	0x080027c4
 8002784:	080027c8 	.word	0x080027c8

08002788 <_init>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	bf00      	nop
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr

08002794 <_fini>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	bf00      	nop
 8002798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279a:	bc08      	pop	{r3}
 800279c:	469e      	mov	lr, r3
 800279e:	4770      	bx	lr
