
BootLoader_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d50  08003d50  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d50  08003d50  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d50  08003d50  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000030  08003d84  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003d84  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073d0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000202d  00000000  00000000  00027468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00029498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000611  00000000  00000000  00029ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177b7  00000000  00000000  0002a2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a710  00000000  00000000  00041aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000839d1  00000000  00000000  0004c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f58  00000000  00000000  000cfb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d1ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b08 	.word	0x08003b08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08003b08 	.word	0x08003b08

0800014c <BL_u32ReadAddressData>:
#include "aes.h"

uint8_t AES_CBC_128_Key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
uint8_t AES_CBC_128_IV[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
//**************************Include***************************//
static uint32_t BL_u32ReadAddressData(uint32_t address){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 800015a:	68fb      	ldr	r3, [r7, #12]
}
 800015c:	4618      	mov	r0, r3
 800015e:	3714      	adds	r7, #20
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
	...

08000168 <BL_voidBootLoader_Init>:
//**************************Function Define***************************//
void BL_voidBootLoader_Init(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
	// Read Branching Request Update Flag.
	uint32_t Local_u32Flag = BL_u32ReadAddressData(FLAG_STATUS_BOOTLOADER);
 800016e:	480a      	ldr	r0, [pc, #40]	; (8000198 <BL_voidBootLoader_Init+0x30>)
 8000170:	f7ff ffec 	bl	800014c <BL_u32ReadAddressData>
 8000174:	6078      	str	r0, [r7, #4]

	if(Local_u32Flag == BL_BRANCHING_FLAG_RESET)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800017c:	d102      	bne.n	8000184 <BL_voidBootLoader_Init+0x1c>
	{
		// Check images existence, status (and CRC).
		BL_voidCheckActiveRegion();
 800017e:	f000 f80d 	bl	800019c <BL_voidCheckActiveRegion>
	}
	else
	{
		// Do nothing
	}
}
 8000182:	e004      	b.n	800018e <BL_voidBootLoader_Init+0x26>
	else if(Local_u32Flag == BL_BRANCHING_FLAG_SET)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d101      	bne.n	800018e <BL_voidBootLoader_Init+0x26>
	    BL_voidJumpToBootloader();
 800018a:	f000 f8c7 	bl	800031c <BL_voidJumpToBootloader>
}
 800018e:	bf00      	nop
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	0801fc00 	.word	0x0801fc00

0800019c <BL_voidCheckActiveRegion>:

void BL_voidCheckActiveRegion(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0
    // Read Images Status To Determine Which Image Will Be Excuted.
	uint32_t Local_u32ActiveImageStatus = BL_u32ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80001a2:	4827      	ldr	r0, [pc, #156]	; (8000240 <BL_voidCheckActiveRegion+0xa4>)
 80001a4:	f7ff ffd2 	bl	800014c <BL_u32ReadAddressData>
 80001a8:	6178      	str	r0, [r7, #20]
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 80001aa:	f06f 030c 	mvn.w	r3, #12
 80001ae:	613b      	str	r3, [r7, #16]
	uint32_t* Local_u32ActiveImagePointer = (uint32_t*)ACTIVE_IMAGE;
 80001b0:	4b24      	ldr	r3, [pc, #144]	; (8000244 <BL_voidCheckActiveRegion+0xa8>)
 80001b2:	60fb      	str	r3, [r7, #12]
	uint32_t Local_u32SizeCode = BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 80001b4:	4824      	ldr	r0, [pc, #144]	; (8000248 <BL_voidCheckActiveRegion+0xac>)
 80001b6:	f7ff ffc9 	bl	800014c <BL_u32ReadAddressData>
 80001ba:	60b8      	str	r0, [r7, #8]
	uint32_t Local_u32CRC =  BL_u32ReadAddressData(FLAG_STATUS_CRC_ACTIVE_REGION_ADDRESS);
 80001bc:	4823      	ldr	r0, [pc, #140]	; (800024c <BL_voidCheckActiveRegion+0xb0>)
 80001be:	f7ff ffc5 	bl	800014c <BL_u32ReadAddressData>
 80001c2:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32CRC_check = HAL_CRC_Calculate(&hcrc, Local_u32ActiveImagePointer, Local_u32SizeCode/4);
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	089b      	lsrs	r3, r3, #2
 80001c8:	461a      	mov	r2, r3
 80001ca:	68f9      	ldr	r1, [r7, #12]
 80001cc:	4820      	ldr	r0, [pc, #128]	; (8000250 <BL_voidCheckActiveRegion+0xb4>)
 80001ce:	f002 fc72 	bl	8002ab6 <HAL_CRC_Calculate>
 80001d2:	6038      	str	r0, [r7, #0]
    // Check Active region Image Status.
    if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE)
 80001d4:	697b      	ldr	r3, [r7, #20]
 80001d6:	f113 0f0f 	cmn.w	r3, #15
 80001da:	d10e      	bne.n	80001fa <BL_voidCheckActiveRegion+0x5e>
	{
    	// Active Case. Check CRC
    	if(Local_u32CRC_check == Local_u32CRC){
 80001dc:	683a      	ldr	r2, [r7, #0]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d102      	bne.n	80001ea <BL_voidCheckActiveRegion+0x4e>
    		// CRC is correct.
    		BL_voidJumpToActiveRegion();
 80001e4:	f000 f870 	bl	80002c8 <BL_voidJumpToActiveRegion>
	}
    else
    {
        // Do nothing
    }
}
 80001e8:	e025      	b.n	8000236 <BL_voidCheckActiveRegion+0x9a>
    		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS, BR_SET_IMAGE_CORRUPTED);
 80001ea:	f06f 010b 	mvn.w	r1, #11
 80001ee:	4814      	ldr	r0, [pc, #80]	; (8000240 <BL_voidCheckActiveRegion+0xa4>)
 80001f0:	f000 f994 	bl	800051c <BL_voidEraseRestoreHeaderPage>
    		BL_voidMakeSoftWareReset();
 80001f4:	f000 fe86 	bl	8000f04 <BL_voidMakeSoftWareReset>
}
 80001f8:	e01d      	b.n	8000236 <BL_voidCheckActiveRegion+0x9a>
    else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	f113 0f0c 	cmn.w	r3, #12
 8000200:	d003      	beq.n	800020a <BL_voidCheckActiveRegion+0x6e>
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000208:	d115      	bne.n	8000236 <BL_voidCheckActiveRegion+0x9a>
    	Local_u32BackupStatus    = BL_32CheckBackupRegion();
 800020a:	f000 f823 	bl	8000254 <BL_32CheckBackupRegion>
 800020e:	6138      	str	r0, [r7, #16]
		if(Local_u32BackupStatus == BR_IMAGE_IS_CORRECT)
 8000210:	693b      	ldr	r3, [r7, #16]
 8000212:	f113 0f0e 	cmn.w	r3, #14
 8000216:	d104      	bne.n	8000222 <BL_voidCheckActiveRegion+0x86>
			BL_voidCopyImageToActiveRegion();
 8000218:	f000 f888 	bl	800032c <BL_voidCopyImageToActiveRegion>
			BL_voidJumpToActiveRegion();
 800021c:	f000 f854 	bl	80002c8 <BL_voidJumpToActiveRegion>
}
 8000220:	e009      	b.n	8000236 <BL_voidCheckActiveRegion+0x9a>
		else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	f113 0f0c 	cmn.w	r3, #12
 8000228:	d003      	beq.n	8000232 <BL_voidCheckActiveRegion+0x96>
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000230:	d101      	bne.n	8000236 <BL_voidCheckActiveRegion+0x9a>
			BL_voidSetBranchingFlagAndMakeSWR();
 8000232:	f000 fa09 	bl	8000648 <BL_voidSetBranchingFlagAndMakeSWR>
}
 8000236:	bf00      	nop
 8000238:	3718      	adds	r7, #24
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	0801fc14 	.word	0x0801fc14
 8000244:	08005000 	.word	0x08005000
 8000248:	0801fc18 	.word	0x0801fc18
 800024c:	0801fc1c 	.word	0x0801fc1c
 8000250:	20000074 	.word	0x20000074

08000254 <BL_32CheckBackupRegion>:

uint32_t BL_32CheckBackupRegion(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
	uint32_t Local_u32BackupStatus =BL_u32ReadAddressData(FLAG_STATUS_BACKUP_REGION_ADDRESS);
 800025a:	4816      	ldr	r0, [pc, #88]	; (80002b4 <BL_32CheckBackupRegion+0x60>)
 800025c:	f7ff ff76 	bl	800014c <BL_u32ReadAddressData>
 8000260:	6178      	str	r0, [r7, #20]
	uint32_t* Local_u32BackupImagePointer = (uint32_t*)BACKUP_IMAGE;
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <BL_32CheckBackupRegion+0x64>)
 8000264:	613b      	str	r3, [r7, #16]
	uint32_t Local_u32SizeCode = BL_u32ReadAddressData(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS);
 8000266:	4815      	ldr	r0, [pc, #84]	; (80002bc <BL_32CheckBackupRegion+0x68>)
 8000268:	f7ff ff70 	bl	800014c <BL_u32ReadAddressData>
 800026c:	60f8      	str	r0, [r7, #12]
	uint32_t Local_u32CRC_Backup =  BL_u32ReadAddressData(FLAG_STATUS_CRC_BACKUP_REGION_ADDRESS);
 800026e:	4814      	ldr	r0, [pc, #80]	; (80002c0 <BL_32CheckBackupRegion+0x6c>)
 8000270:	f7ff ff6c 	bl	800014c <BL_u32ReadAddressData>
 8000274:	60b8      	str	r0, [r7, #8]
	uint32_t Local_u32CRC_Check_Backup = HAL_CRC_Calculate(&hcrc, Local_u32BackupImagePointer, Local_u32SizeCode/4);
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	089b      	lsrs	r3, r3, #2
 800027a:	461a      	mov	r2, r3
 800027c:	6939      	ldr	r1, [r7, #16]
 800027e:	4811      	ldr	r0, [pc, #68]	; (80002c4 <BL_32CheckBackupRegion+0x70>)
 8000280:	f002 fc19 	bl	8002ab6 <HAL_CRC_Calculate>
 8000284:	6078      	str	r0, [r7, #4]
	// if exist Backup image
	if(Local_u32BackupStatus == BR_IMAGE_IS_BACKUP)
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	f113 0f0d 	cmn.w	r3, #13
 800028c:	d10e      	bne.n	80002ac <BL_32CheckBackupRegion+0x58>
	{
		if (Local_u32CRC_Check_Backup == Local_u32CRC_Backup){
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	429a      	cmp	r2, r3
 8000294:	d102      	bne.n	800029c <BL_32CheckBackupRegion+0x48>
			return BR_IMAGE_IS_CORRECT;
 8000296:	f06f 030d 	mvn.w	r3, #13
 800029a:	e007      	b.n	80002ac <BL_32CheckBackupRegion+0x58>
		}
		else{
			// Handle error
			// Make Image in the backup region Corrupted As it's CRC is Wrong.
			BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS, BR_SET_IMAGE_CORRUPTED);
 800029c:	f06f 010b 	mvn.w	r1, #11
 80002a0:	4804      	ldr	r0, [pc, #16]	; (80002b4 <BL_32CheckBackupRegion+0x60>)
 80002a2:	f000 f93b 	bl	800051c <BL_voidEraseRestoreHeaderPage>
			// Make Software Reset to return to branch code.
			return BR_IMAGE_IS_CORRUPTED;
 80002a6:	f06f 030b 	mvn.w	r3, #11
 80002aa:	e7ff      	b.n	80002ac <BL_32CheckBackupRegion+0x58>
		}
	}
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	0801fc34 	.word	0x0801fc34
 80002b8:	0800a800 	.word	0x0800a800
 80002bc:	0801fc38 	.word	0x0801fc38
 80002c0:	0801fc3c 	.word	0x0801fc3c
 80002c4:	20000074 	.word	0x20000074

080002c8 <BL_voidJumpToActiveRegion>:

void BL_voidJumpToActiveRegion(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
	//MX_GPIO_Deinit();
	SysTick->CTRL = 0x0; //Disables SysTick timer and its related interrupt
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <BL_voidJumpToActiveRegion+0x40>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
	HAL_DeInit();
 80002d4:	f001 fe8e 	bl	8001ff4 <HAL_DeInit>
	RCC->CIR = 0x00000000; //Disable all interrupts related to clock
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <BL_voidJumpToActiveRegion+0x44>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]

	Application_t AddressToCall = 0 ;
 80002de:	2300      	movs	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
	AddressToCall = *(Application_t*)(ACTIVE_IMAGE + 4); // Point to Reset Handler
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <BL_voidJumpToActiveRegion+0x48>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	607b      	str	r3, [r7, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80002e8:	f3bf 8f5f 	dmb	sy
}
 80002ec:	bf00      	nop

	__DMB(); //ARM says to use a DMB instruction before relocating VTOR *
	SCB->VTOR = ACTIVE_IMAGE; //We relocate vector table to the sector 1
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <BL_voidJumpToActiveRegion+0x4c>)
 80002f0:	4a09      	ldr	r2, [pc, #36]	; (8000318 <BL_voidJumpToActiveRegion+0x50>)
 80002f2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80002f4:	f3bf 8f4f 	dsb	sy
}
 80002f8:	bf00      	nop
	__DSB(); //ARM says to use a DSB instruction just after relocating VTOR */

	AddressToCall();
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4798      	blx	r3
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	e000e010 	.word	0xe000e010
 800030c:	40021000 	.word	0x40021000
 8000310:	08005004 	.word	0x08005004
 8000314:	e000ed00 	.word	0xe000ed00
 8000318:	08005000 	.word	0x08005000

0800031c <BL_voidJumpToBootloader>:

void BL_voidJumpToBootloader(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//@TODO: In develop
	BL_voidUpdateHeaders();
 8000320:	f000 f99e 	bl	8000660 <BL_voidUpdateHeaders>
	BL_voidReceiveUpdate();
 8000324:	f000 f9fc 	bl	8000720 <BL_voidReceiveUpdate>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}

0800032c <BL_voidCopyImageToActiveRegion>:

void BL_voidCopyImageToActiveRegion(void)
{
 800032c:	b5b0      	push	{r4, r5, r7, lr}
 800032e:	b08c      	sub	sp, #48	; 0x30
 8000330:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress = BL_INITIALIZE_WITH_ZERO;
 8000332:	2300      	movs	r3, #0
 8000334:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t Local_u32ActiveDataAddress = BL_INITIALIZE_WITH_ZERO;
 8000336:	2300      	movs	r3, #0
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Local_u32BackUpDataWord 	= BL_INITIALIZE_WITH_ZERO;
 800033a:	2300      	movs	r3, #0
 800033c:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32BackupSizeInWord 	= BL_u32ReadAddressData(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS);
 800033e:	4831      	ldr	r0, [pc, #196]	; (8000404 <BL_voidCopyImageToActiveRegion+0xd8>)
 8000340:	f7ff ff04 	bl	800014c <BL_u32ReadAddressData>
 8000344:	61f8      	str	r0, [r7, #28]
	uint32_t* Local_u32BackupImagePointer = (uint32_t*)BACKUP_IMAGE;
 8000346:	4b30      	ldr	r3, [pc, #192]	; (8000408 <BL_voidCopyImageToActiveRegion+0xdc>)
 8000348:	61bb      	str	r3, [r7, #24]
	Local_u32BackupSizeInWord = Local_u32BackupSizeInWord / 4;
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	089b      	lsrs	r3, r3, #2
 800034e:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32CRC = HAL_CRC_Calculate(&hcrc, Local_u32BackupImagePointer, Local_u32BackupSizeInWord);
 8000350:	69fa      	ldr	r2, [r7, #28]
 8000352:	69b9      	ldr	r1, [r7, #24]
 8000354:	482d      	ldr	r0, [pc, #180]	; (800040c <BL_voidCopyImageToActiveRegion+0xe0>)
 8000356:	f002 fbae 	bl	8002ab6 <HAL_CRC_Calculate>
 800035a:	6178      	str	r0, [r7, #20]

	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 800035c:	2300      	movs	r3, #0
 800035e:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 8000360:	2301      	movs	r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 8000364:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <BL_voidCopyImageToActiveRegion+0xe4>)
 8000366:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 8000368:	2316      	movs	r3, #22
 800036a:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 800036c:	f002 fc46 	bl	8002bfc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000370:	463a      	mov	r2, r7
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	4611      	mov	r1, r2
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fd28 	bl	8002dcc <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 800037c:	f002 fc64 	bl	8002c48 <HAL_FLASH_Lock>

	//Copy data from backup to active region.
	HAL_FLASH_Unlock();
 8000380:	f002 fc3c 	bl	8002bfc <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 8000384:	2300      	movs	r3, #0
 8000386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000388:	e01d      	b.n	80003c6 <BL_voidCopyImageToActiveRegion+0x9a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 800038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800038c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000390:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	627b      	str	r3, [r7, #36]	; 0x24
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 8000398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800039a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800039e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	62bb      	str	r3, [r7, #40]	; 0x28
		Local_u32BackUpDataWord    = *((volatile uint32_t*)(Local_u32BackupDataAddress));
 80003a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	623b      	str	r3, [r7, #32]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32ActiveDataAddress, Local_u32BackUpDataWord);
 80003ac:	6a3b      	ldr	r3, [r7, #32]
 80003ae:	2200      	movs	r2, #0
 80003b0:	461c      	mov	r4, r3
 80003b2:	4615      	mov	r5, r2
 80003b4:	4622      	mov	r2, r4
 80003b6:	462b      	mov	r3, r5
 80003b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80003ba:	2002      	movs	r0, #2
 80003bc:	f002 fbae 	bl	8002b1c <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 80003c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003c2:	3301      	adds	r3, #1
 80003c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d3dd      	bcc.n	800038a <BL_voidCopyImageToActiveRegion+0x5e>
	}
	HAL_FLASH_Lock();
 80003ce:	f002 fc3b 	bl	8002c48 <HAL_FLASH_Lock>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS , Local_u32BackupSizeInWord*4);
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4619      	mov	r1, r3
 80003d8:	480e      	ldr	r0, [pc, #56]	; (8000414 <BL_voidCopyImageToActiveRegion+0xe8>)
 80003da:	f000 f89f 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_CRC_ACTIVE_REGION_ADDRESS , Local_u32CRC);
 80003de:	6979      	ldr	r1, [r7, #20]
 80003e0:	480d      	ldr	r0, [pc, #52]	; (8000418 <BL_voidCopyImageToActiveRegion+0xec>)
 80003e2:	f000 f89b 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE );
 80003e6:	f06f 010e 	mvn.w	r1, #14
 80003ea:	480c      	ldr	r0, [pc, #48]	; (800041c <BL_voidCopyImageToActiveRegion+0xf0>)
 80003ec:	f000 f896 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 80003f0:	f06f 010c 	mvn.w	r1, #12
 80003f4:	480a      	ldr	r0, [pc, #40]	; (8000420 <BL_voidCopyImageToActiveRegion+0xf4>)
 80003f6:	f000 f891 	bl	800051c <BL_voidEraseRestoreHeaderPage>
}
 80003fa:	bf00      	nop
 80003fc:	3730      	adds	r7, #48	; 0x30
 80003fe:	46bd      	mov	sp, r7
 8000400:	bdb0      	pop	{r4, r5, r7, pc}
 8000402:	bf00      	nop
 8000404:	0801fc38 	.word	0x0801fc38
 8000408:	0800a800 	.word	0x0800a800
 800040c:	20000074 	.word	0x20000074
 8000410:	08005000 	.word	0x08005000
 8000414:	0801fc18 	.word	0x0801fc18
 8000418:	0801fc1c 	.word	0x0801fc1c
 800041c:	0801fc14 	.word	0x0801fc14
 8000420:	0801fc34 	.word	0x0801fc34

08000424 <BL_voidCopyImageToBackupRegion>:

void BL_voidCopyImageToBackupRegion(void)
{
 8000424:	b5b0      	push	{r4, r5, r7, lr}
 8000426:	b08c      	sub	sp, #48	; 0x30
 8000428:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 800042a:	2300      	movs	r3, #0
 800042c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t Local_u32ActiveDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 800042e:	2300      	movs	r3, #0
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Local_u32ActiveDataWord 			= BL_INITIALIZE_WITH_ZERO;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveSizeInWord 			= BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 8000436:	4831      	ldr	r0, [pc, #196]	; (80004fc <BL_voidCopyImageToBackupRegion+0xd8>)
 8000438:	f7ff fe88 	bl	800014c <BL_u32ReadAddressData>
 800043c:	61f8      	str	r0, [r7, #28]
	uint32_t* Local_u32ActiveImagePointer = (uint32_t*)ACTIVE_IMAGE;
 800043e:	4b30      	ldr	r3, [pc, #192]	; (8000500 <BL_voidCopyImageToBackupRegion+0xdc>)
 8000440:	61bb      	str	r3, [r7, #24]
	Local_u32ActiveSizeInWord = Local_u32ActiveSizeInWord / 4;
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	089b      	lsrs	r3, r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32CRC = HAL_CRC_Calculate(&hcrc, Local_u32ActiveImagePointer, Local_u32ActiveSizeInWord);
 8000448:	69fa      	ldr	r2, [r7, #28]
 800044a:	69b9      	ldr	r1, [r7, #24]
 800044c:	482d      	ldr	r0, [pc, #180]	; (8000504 <BL_voidCopyImageToBackupRegion+0xe0>)
 800044e:	f002 fb32 	bl	8002ab6 <HAL_CRC_Calculate>
 8000452:	6178      	str	r0, [r7, #20]

	// Erase the Backup region.
	Local_eraseInfo.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8000454:	2300      	movs	r3, #0
 8000456:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks 		= FLASH_BANK_1;
 8000458:	2301      	movs	r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = BACKUP_IMAGE;
 800045c:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <BL_voidCopyImageToBackupRegion+0xe4>)
 800045e:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages 	= FLASH_BANK_NUMOFPAGE;
 8000460:	2316      	movs	r3, #22
 8000462:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000464:	f002 fbca 	bl	8002bfc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000468:	463a      	mov	r2, r7
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4611      	mov	r1, r2
 800046e:	4618      	mov	r0, r3
 8000470:	f002 fcac 	bl	8002dcc <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000474:	f002 fbe8 	bl	8002c48 <HAL_FLASH_Lock>

	//Copy data from active region to backup region
	HAL_FLASH_Unlock();
 8000478:	f002 fbc0 	bl	8002bfc <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 800047c:	2300      	movs	r3, #0
 800047e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000480:	e01d      	b.n	80004be <BL_voidCopyImageToBackupRegion+0x9a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 8000482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000484:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000488:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 8000490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000492:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000496:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	62bb      	str	r3, [r7, #40]	; 0x28
		Local_u32ActiveDataWord    = *((volatile uint32_t*)(Local_u32ActiveDataAddress));
 800049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	623b      	str	r3, [r7, #32]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32BackupDataAddress, Local_u32ActiveDataWord);
 80004a4:	6a3b      	ldr	r3, [r7, #32]
 80004a6:	2200      	movs	r2, #0
 80004a8:	461c      	mov	r4, r3
 80004aa:	4615      	mov	r5, r2
 80004ac:	4622      	mov	r2, r4
 80004ae:	462b      	mov	r3, r5
 80004b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80004b2:	2002      	movs	r0, #2
 80004b4:	f002 fb32 	bl	8002b1c <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 80004b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ba:	3301      	adds	r3, #1
 80004bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d3dd      	bcc.n	8000482 <BL_voidCopyImageToBackupRegion+0x5e>
	}
	HAL_FLASH_Lock();
 80004c6:	f002 fbbf 	bl	8002c48 <HAL_FLASH_Lock>

	// Set
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS , Local_u32ActiveSizeInWord*4 );
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4619      	mov	r1, r3
 80004d0:	480e      	ldr	r0, [pc, #56]	; (800050c <BL_voidCopyImageToBackupRegion+0xe8>)
 80004d2:	f000 f823 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_CRC_BACKUP_REGION_ADDRESS , Local_u32CRC);
 80004d6:	6979      	ldr	r1, [r7, #20]
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <BL_voidCopyImageToBackupRegion+0xec>)
 80004da:	f000 f81f 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 80004de:	f06f 010e 	mvn.w	r1, #14
 80004e2:	480c      	ldr	r0, [pc, #48]	; (8000514 <BL_voidCopyImageToBackupRegion+0xf0>)
 80004e4:	f000 f81a 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 80004e8:	f06f 010c 	mvn.w	r1, #12
 80004ec:	480a      	ldr	r0, [pc, #40]	; (8000518 <BL_voidCopyImageToBackupRegion+0xf4>)
 80004ee:	f000 f815 	bl	800051c <BL_voidEraseRestoreHeaderPage>
}
 80004f2:	bf00      	nop
 80004f4:	3730      	adds	r7, #48	; 0x30
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bdb0      	pop	{r4, r5, r7, pc}
 80004fa:	bf00      	nop
 80004fc:	0801fc18 	.word	0x0801fc18
 8000500:	08005000 	.word	0x08005000
 8000504:	20000074 	.word	0x20000074
 8000508:	0800a800 	.word	0x0800a800
 800050c:	0801fc38 	.word	0x0801fc38
 8000510:	0801fc3c 	.word	0x0801fc3c
 8000514:	0801fc14 	.word	0x0801fc14
 8000518:	0801fc34 	.word	0x0801fc34

0800051c <BL_voidEraseRestoreHeaderPage>:

void BL_voidEraseRestoreHeaderPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 800051c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000520:	b0b2      	sub	sp, #200	; 0xc8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 800053a:	4b41      	ldr	r3, [pc, #260]	; (8000640 <BL_voidEraseRestoreHeaderPage+0x124>)
 800053c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000540:	e031      	b.n	80005a6 <BL_voidEraseRestoreHeaderPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 8000542:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	bf14      	ite	ne
 800054c:	2301      	movne	r3, #1
 800054e:	2300      	moveq	r3, #0
 8000550:	b2da      	uxtb	r2, r3
 8000552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4013      	ands	r3, r2
 8000566:	b2db      	uxtb	r3, r3
 8000568:	2b00      	cmp	r3, #0
 800056a:	d017      	beq.n	800059c <BL_voidEraseRestoreHeaderPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 800056c:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	33c8      	adds	r3, #200	; 0xc8
 8000574:	443b      	add	r3, r7
 8000576:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800057a:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 800057e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000582:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000586:	6812      	ldr	r2, [r2, #0]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	33c8      	adds	r3, #200	; 0xc8
 800058c:	443b      	add	r3, r7
 800058e:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++;
 8000592:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000596:	3301      	adds	r3, #1
 8000598:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 800059c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80005a0:	3304      	adds	r3, #4
 80005a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 80005a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80005aa:	4a26      	ldr	r2, [pc, #152]	; (8000644 <BL_voidEraseRestoreHeaderPage+0x128>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d9c8      	bls.n	8000542 <BL_voidEraseRestoreHeaderPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <BL_voidEraseRestoreHeaderPage+0x124>)
 80005ba:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80005c0:	f002 fb1c 	bl	8002bfc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80005c4:	f107 020c 	add.w	r2, r7, #12
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fbfc 	bl	8002dcc <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80005da:	e01a      	b.n	8000612 <BL_voidEraseRestoreHeaderPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 80005dc:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	33c8      	adds	r3, #200	; 0xc8
 80005e4:	443b      	add	r3, r7
 80005e6:	f853 1c58 	ldr.w	r1, [r3, #-88]
 80005ea:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	33c8      	adds	r3, #200	; 0xc8
 80005f2:	443b      	add	r3, r7
 80005f4:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4698      	mov	r8, r3
 80005fc:	4691      	mov	r9, r2
 80005fe:	4642      	mov	r2, r8
 8000600:	464b      	mov	r3, r9
 8000602:	2002      	movs	r0, #2
 8000604:	f002 fa8a 	bl	8002b1c <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000608:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800060c:	3301      	adds	r3, #1
 800060e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000612:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 8000616:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 800061a:	429a      	cmp	r2, r3
 800061c:	d3de      	bcc.n	80005dc <BL_voidEraseRestoreHeaderPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	461c      	mov	r4, r3
 8000624:	4615      	mov	r5, r2
 8000626:	4622      	mov	r2, r4
 8000628:	462b      	mov	r3, r5
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	2002      	movs	r0, #2
 800062e:	f002 fa75 	bl	8002b1c <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 8000632:	f002 fb09 	bl	8002c48 <HAL_FLASH_Lock>
}
 8000636:	bf00      	nop
 8000638:	37c8      	adds	r7, #200	; 0xc8
 800063a:	46bd      	mov	sp, r7
 800063c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000640:	0801fc00 	.word	0x0801fc00
 8000644:	0801fc4f 	.word	0x0801fc4f

08000648 <BL_voidSetBranchingFlagAndMakeSWR>:

void BL_voidSetBranchingFlagAndMakeSWR(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	// Set Branching Flag To Receive New Code.
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER, BL_SET_BRANCHING_FLAG);
 800064c:	2100      	movs	r1, #0
 800064e:	4803      	ldr	r0, [pc, #12]	; (800065c <BL_voidSetBranchingFlagAndMakeSWR+0x14>)
 8000650:	f7ff ff64 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	// Make Software Reset.
	BL_voidMakeSoftWareReset();
 8000654:	f000 fc56 	bl	8000f04 <BL_voidMakeSoftWareReset>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	0801fc00 	.word	0x0801fc00

08000660 <BL_voidUpdateHeaders>:

void BL_voidUpdateHeaders(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
	uint8_t  Local_u8DataArray[8]              = {BL_INITIALIZE_WITH_ZERO};
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
	uint32_t Local_u32ActiveRegionStatus       = BL_INITIALIZE_WITH_ZERO;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
	uint32_t Local_u32ImageSizeInBytes         = BL_INITIALIZE_WITH_ZERO;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
	uint32_t Local_u32CRC_Value			       = BL_INITIALIZE_WITH_ZERO;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
	uint8_t	 Local_u8HeaderFlag                = BL_INITIALIZE_WITH_ZERO;
 800067a:	2300      	movs	r3, #0
 800067c:	70fb      	strb	r3, [r7, #3]

	Local_u32ActiveRegionStatus = BL_u32ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 800067e:	4824      	ldr	r0, [pc, #144]	; (8000710 <BL_voidUpdateHeaders+0xb0>)
 8000680:	f7ff fd64 	bl	800014c <BL_u32ReadAddressData>
 8000684:	6178      	str	r0, [r7, #20]

	//Structure CAN Transmit
	CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACKNOWLEDGE_UPGRADE_REQUEST);
 8000686:	2150      	movs	r1, #80	; 0x50
 8000688:	2010      	movs	r0, #16
 800068a:	f000 fc55 	bl	8000f38 <CAN_IF_Transmit_UDS_Request>

	// Wait until FIFO 0 become pending state
	CAN_IF_Receive_UDS_Respond(&Local_u8HeaderFlag);
 800068e:	1cfb      	adds	r3, r7, #3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fc89 	bl	8000fa8 <CAN_IF_Receive_UDS_Respond>

	if(Local_u8HeaderFlag == UDS_GWY_PROVIDE_HEADER)
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	2b34      	cmp	r3, #52	; 0x34
 800069a:	d135      	bne.n	8000708 <BL_voidUpdateHeaders+0xa8>
	{
		CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACCEPT_RECEIVING_HEADER);
 800069c:	2173      	movs	r1, #115	; 0x73
 800069e:	2010      	movs	r0, #16
 80006a0:	f000 fc4a 	bl	8000f38 <CAN_IF_Transmit_UDS_Request>
		// Wait until FIFO 0 become pending state
		CAN_IF_Receive_Data_Frame(Local_u8DataArray);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fca0 	bl	8000fec <CAN_IF_Receive_Data_Frame>

		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) | 		\
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	061a      	lsls	r2, r3, #24
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	041b      	lsls	r3, r3, #16
 80006b4:	431a      	orrs	r2, r3
									(Local_u8DataArray[1] << SHIFT_8_BIT) | (Local_u8DataArray[0] << SHIFT_0_BIT);
 80006b6:	797b      	ldrb	r3, [r7, #5]
 80006b8:	021b      	lsls	r3, r3, #8
		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) | 		\
 80006ba:	4313      	orrs	r3, r2
									(Local_u8DataArray[1] << SHIFT_8_BIT) | (Local_u8DataArray[0] << SHIFT_0_BIT);
 80006bc:	793a      	ldrb	r2, [r7, #4]
 80006be:	4313      	orrs	r3, r2
		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) | 		\
 80006c0:	613b      	str	r3, [r7, #16]
		Local_u32CRC_Value		  = (Local_u8DataArray[7] << SHIFT_24_BIT) | (Local_u8DataArray[6] << SHIFT_16_BIT) | 		\
 80006c2:	7afb      	ldrb	r3, [r7, #11]
 80006c4:	061a      	lsls	r2, r3, #24
 80006c6:	7abb      	ldrb	r3, [r7, #10]
 80006c8:	041b      	lsls	r3, r3, #16
 80006ca:	431a      	orrs	r2, r3
									(Local_u8DataArray[5] << SHIFT_8_BIT) | (Local_u8DataArray[4] << SHIFT_0_BIT);
 80006cc:	7a7b      	ldrb	r3, [r7, #9]
 80006ce:	021b      	lsls	r3, r3, #8
		Local_u32CRC_Value		  = (Local_u8DataArray[7] << SHIFT_24_BIT) | (Local_u8DataArray[6] << SHIFT_16_BIT) | 		\
 80006d0:	4313      	orrs	r3, r2
									(Local_u8DataArray[5] << SHIFT_8_BIT) | (Local_u8DataArray[4] << SHIFT_0_BIT);
 80006d2:	7a3a      	ldrb	r2, [r7, #8]
 80006d4:	4313      	orrs	r3, r2
		Local_u32CRC_Value		  = (Local_u8DataArray[7] << SHIFT_24_BIT) | (Local_u8DataArray[6] << SHIFT_16_BIT) | 		\
 80006d6:	60fb      	str	r3, [r7, #12]

		if(Local_u32ActiveRegionStatus == BR_IMAGE_IS_ACTIVE )
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	f113 0f0f 	cmn.w	r3, #15
 80006de:	d101      	bne.n	80006e4 <BL_voidUpdateHeaders+0x84>
		{
			BL_voidCopyImageToBackupRegion();
 80006e0:	f7ff fea0 	bl	8000424 <BL_voidCopyImageToBackupRegion>
		}

		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 80006e4:	f06f 010b 	mvn.w	r1, #11
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <BL_voidUpdateHeaders+0xb0>)
 80006ea:	f7ff ff17 	bl	800051c <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 80006ee:	6939      	ldr	r1, [r7, #16]
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <BL_voidUpdateHeaders+0xb4>)
 80006f2:	f7ff ff13 	bl	800051c <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_CRC_ACTIVE_REGION_ADDRESS,Local_u32CRC_Value);
 80006f6:	68f9      	ldr	r1, [r7, #12]
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <BL_voidUpdateHeaders+0xb8>)
 80006fa:	f7ff ff0f 	bl	800051c <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER,BL_RESET_BRANCHING_FLAG);
 80006fe:	f04f 31ff 	mov.w	r1, #4294967295
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <BL_voidUpdateHeaders+0xbc>)
 8000704:	f7ff ff0a 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	}
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	0801fc14 	.word	0x0801fc14
 8000714:	0801fc18 	.word	0x0801fc18
 8000718:	0801fc1c 	.word	0x0801fc1c
 800071c:	0801fc00 	.word	0x0801fc00

08000720 <BL_voidReceiveUpdate>:

void BL_voidReceiveUpdate(void)
{
 8000720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000724:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 8000728:	af00      	add	r7, sp, #0
	uint8_t  Local_u8DataArray[16]              				  = {BL_INITIALIZE_WITH_ZERO};
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8000730:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000734:	2300      	movs	r3, #0
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	6053      	str	r3, [r2, #4]
 800073a:	6093      	str	r3, [r2, #8]
	uint64_t Local_u64HighByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 800073c:	f04f 0200 	mov.w	r2, #0
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
	uint64_t Local_u64LowByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 8000748:	f04f 0200 	mov.w	r2, #0
 800074c:	f04f 0300 	mov.w	r3, #0
 8000750:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
	uint32_t Local_u32InactiveImageAddressCounter                 = ACTIVE_IMAGE_START_ADDRESS;
 8000754:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <BL_voidReceiveUpdate+0x94>)
 8000756:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	uint32_t Local_u32SizeOfCode 								  = BL_u32ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 800075a:	4817      	ldr	r0, [pc, #92]	; (80007b8 <BL_voidReceiveUpdate+0x98>)
 800075c:	f7ff fcf6 	bl	800014c <BL_u32ReadAddressData>
 8000760:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	uint8_t	 Local_u8HeaderFlag                					  = BL_INITIALIZE_WITH_ZERO;
 8000764:	2300      	movs	r3, #0
 8000766:	f887 32bf 	strb.w	r3, [r7, #703]	; 0x2bf
	struct AES_ctx ctx;
	AES_init_ctx_iv(&ctx, AES_CBC_128_Key, AES_CBC_128_IV);
 800076a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <BL_voidReceiveUpdate+0x9c>)
 8000770:	4913      	ldr	r1, [pc, #76]	; (80007c0 <BL_voidReceiveUpdate+0xa0>)
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fd7e 	bl	8001274 <AES_init_ctx_iv>

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	Local_eraseInfo.Banks = FLASH_BANK_1;
 800077e:	2301      	movs	r3, #1
 8000780:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <BL_voidReceiveUpdate+0x94>)
 8000786:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 800078a:	2316      	movs	r3, #22
 800078c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000790:	f002 fa34 	bl	8002bfc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 8000794:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8000798:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 fb14 	bl	8002dcc <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80007a4:	f002 fa50 	bl	8002c48 <HAL_FLASH_Lock>

	//Structure CAN Transmit
	CAN_IF_Transmit_UDS_Request(NODE_ID_ONE,UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED);
 80007a8:	2174      	movs	r1, #116	; 0x74
 80007aa:	2010      	movs	r0, #16
 80007ac:	f000 fbc4 	bl	8000f38 <CAN_IF_Transmit_UDS_Request>
	//Loop to receive code update
	while(Local_u32SizeOfCode)
 80007b0:	e37a      	b.n	8000ea8 <BL_voidReceiveUpdate+0x788>
 80007b2:	bf00      	nop
 80007b4:	08005000 	.word	0x08005000
 80007b8:	0801fc18 	.word	0x0801fc18
 80007bc:	20000010 	.word	0x20000010
 80007c0:	20000000 	.word	0x20000000
	{
		// Wait until FIFO 0 become pending state
		CAN_IF_Receive_UDS_Respond(&Local_u8HeaderFlag);
 80007c4:	f207 23bf 	addw	r3, r7, #703	; 0x2bf
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fbed 	bl	8000fa8 <CAN_IF_Receive_UDS_Respond>
		//Check UDS ID
		if(Local_u8HeaderFlag == UDS_GWY_REQUEST_SENDING_LINE_OF_CODE)
 80007ce:	f897 32bf 	ldrb.w	r3, [r7, #703]	; 0x2bf
 80007d2:	2b36      	cmp	r3, #54	; 0x36
 80007d4:	f040 8368 	bne.w	8000ea8 <BL_voidReceiveUpdate+0x788>
		{
			CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE);
 80007d8:	2175      	movs	r1, #117	; 0x75
 80007da:	2010      	movs	r0, #16
 80007dc:	f000 fbac 	bl	8000f38 <CAN_IF_Transmit_UDS_Request>

			if (Local_u32SizeOfCode > SIZEOF_PACKAGE_FIRMWARE){
 80007e0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	f240 81c3 	bls.w	8000b70 <BL_voidReceiveUpdate+0x450>
				CAN_IF_Receive_Data_Buffer(Local_u8DataArray, SIZEOF_PACKAGE_FIRMWARE);
 80007ea:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80007ee:	2110      	movs	r1, #16
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fc2b 	bl	800104c <CAN_IF_Receive_Data_Buffer>
				/*access piont to Encrypt SWC*/
				AES_CBC_decrypt_buffer(&ctx, Local_u8DataArray, 16);
 80007f6:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80007fa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80007fe:	2210      	movs	r2, #16
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f9ad 	bl	8001b60 <AES_CBC_decrypt_buffer>

				Local_u64HighByteDataReceive= ((uint64_t)Local_u8DataArray[7] << SHIFT_56_BIT) | ((uint64_t)Local_u8DataArray[6] << SHIFT_48_BIT)
 8000806:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2200      	movs	r2, #0
 800080e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000812:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8000816:	f04f 0000 	mov.w	r0, #0
 800081a:	f04f 0100 	mov.w	r1, #0
 800081e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000822:	0619      	lsls	r1, r3, #24
 8000824:	2000      	movs	r0, #0
 8000826:	f897 32c6 	ldrb.w	r3, [r7, #710]	; 0x2c6
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2200      	movs	r2, #0
 800082e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8000832:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	f8d7 6198 	ldr.w	r6, [r7, #408]	; 0x198
 8000842:	0433      	lsls	r3, r6, #16
 8000844:	2200      	movs	r2, #0
 8000846:	ea40 0602 	orr.w	r6, r0, r2
 800084a:	f8c7 6190 	str.w	r6, [r7, #400]	; 0x190
 800084e:	430b      	orrs	r3, r1
 8000850:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
											| ((uint64_t)Local_u8DataArray[5] << SHIFT_40_BIT) | ((uint64_t)Local_u8DataArray[4] << SHIFT_32_BIT)
 8000854:	f897 32c5 	ldrb.w	r3, [r7, #709]	; 0x2c5
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2200      	movs	r2, #0
 800085c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000860:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8000870:	020b      	lsls	r3, r1, #8
 8000872:	2200      	movs	r2, #0
 8000874:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8000878:	4606      	mov	r6, r0
 800087a:	4316      	orrs	r6, r2
 800087c:	f8c7 6180 	str.w	r6, [r7, #384]	; 0x180
 8000880:	430b      	orrs	r3, r1
 8000882:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000886:	f897 32c4 	ldrb.w	r3, [r7, #708]	; 0x2c4
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2200      	movs	r2, #0
 800088e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000892:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000896:	f04f 0200 	mov.w	r2, #0
 800089a:	f04f 0300 	mov.w	r3, #0
 800089e:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80008a2:	000b      	movs	r3, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80008aa:	4606      	mov	r6, r0
 80008ac:	4316      	orrs	r6, r2
 80008ae:	f8c7 6170 	str.w	r6, [r7, #368]	; 0x170
 80008b2:	430b      	orrs	r3, r1
 80008b4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
											| ((uint64_t)Local_u8DataArray[3] << SHIFT_24_BIT) | ((uint64_t)Local_u8DataArray[2] << SHIFT_16_BIT)
 80008b8:	f897 32c3 	ldrb.w	r3, [r7, #707]	; 0x2c3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2200      	movs	r2, #0
 80008c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80008c4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80008c8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80008cc:	460b      	mov	r3, r1
 80008ce:	0a1b      	lsrs	r3, r3, #8
 80008d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80008d4:	460b      	mov	r3, r1
 80008d6:	061b      	lsls	r3, r3, #24
 80008d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80008dc:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80008e0:	4606      	mov	r6, r0
 80008e2:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80008e6:	4694      	mov	ip, r2
 80008e8:	ea46 060c 	orr.w	r6, r6, ip
 80008ec:	f8c7 6158 	str.w	r6, [r7, #344]	; 0x158
 80008f0:	430b      	orrs	r3, r1
 80008f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80008f6:	f897 32c2 	ldrb.w	r3, [r7, #706]	; 0x2c2
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000902:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	f8d7 11e4 	ldr.w	r1, [r7, #484]	; 0x1e4
 8000912:	040b      	lsls	r3, r1, #16
 8000914:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8000918:	4606      	mov	r6, r0
 800091a:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 800091e:	4601      	mov	r1, r0
 8000920:	040a      	lsls	r2, r1, #16
 8000922:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8000926:	4606      	mov	r6, r0
 8000928:	4316      	orrs	r6, r2
 800092a:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 800092e:	430b      	orrs	r3, r1
 8000930:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
											| ((uint64_t)Local_u8DataArray[1] << SHIFT_8_BIT)  | ((uint64_t)Local_u8DataArray[0] << SHIFT_0_BIT);
 8000934:	f897 32c1 	ldrb.w	r3, [r7, #705]	; 0x2c1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2200      	movs	r2, #0
 800093c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8000940:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8000950:	020b      	lsls	r3, r1, #8
 8000952:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8000956:	4606      	mov	r6, r0
 8000958:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 800095c:	4601      	mov	r1, r0
 800095e:	020a      	lsls	r2, r1, #8
 8000960:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8000964:	4606      	mov	r6, r0
 8000966:	4316      	orrs	r6, r2
 8000968:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 800096c:	430b      	orrs	r3, r1
 800096e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000972:	f897 32c0 	ldrb.w	r3, [r7, #704]	; 0x2c0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2200      	movs	r2, #0
 800097a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800097e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
				Local_u64HighByteDataReceive= ((uint64_t)Local_u8DataArray[7] << SHIFT_56_BIT) | ((uint64_t)Local_u8DataArray[6] << SHIFT_48_BIT)
 8000982:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8000986:	4606      	mov	r6, r0
 8000988:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800098c:	4694      	mov	ip, r2
 800098e:	ea46 060c 	orr.w	r6, r6, ip
 8000992:	61be      	str	r6, [r7, #24]
 8000994:	430b      	orrs	r3, r1
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800099c:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8

				Local_u64LowByteDataReceive = ((uint64_t)Local_u8DataArray[15] << SHIFT_56_BIT) | ((uint64_t)Local_u8DataArray[14] << SHIFT_48_BIT)
 80009a0:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2200      	movs	r2, #0
 80009a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80009ac:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	f04f 0100 	mov.w	r1, #0
 80009b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80009bc:	0619      	lsls	r1, r3, #24
 80009be:	2000      	movs	r0, #0
 80009c0:	f897 32ce 	ldrb.w	r3, [r7, #718]	; 0x2ce
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2200      	movs	r2, #0
 80009c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80009cc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	f8d7 6130 	ldr.w	r6, [r7, #304]	; 0x130
 80009dc:	0433      	lsls	r3, r6, #16
 80009de:	2200      	movs	r2, #0
 80009e0:	ea40 0602 	orr.w	r6, r0, r2
 80009e4:	f8c7 6128 	str.w	r6, [r7, #296]	; 0x128
 80009e8:	430b      	orrs	r3, r1
 80009ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
											| ((uint64_t)Local_u8DataArray[13] << SHIFT_40_BIT)  | ((uint64_t)Local_u8DataArray[12] << SHIFT_32_BIT)
 80009ee:	f897 32cd 	ldrb.w	r3, [r7, #717]	; 0x2cd
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80009fa:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000a0a:	020b      	lsls	r3, r1, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8000a12:	4606      	mov	r6, r0
 8000a14:	4316      	orrs	r6, r2
 8000a16:	f8c7 6118 	str.w	r6, [r7, #280]	; 0x118
 8000a1a:	430b      	orrs	r3, r1
 8000a1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000a20:	f897 32cc 	ldrb.w	r3, [r7, #716]	; 0x2cc
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2200      	movs	r2, #0
 8000a28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000a2c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	f04f 0300 	mov.w	r3, #0
 8000a38:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000a3c:	000b      	movs	r3, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8000a44:	4606      	mov	r6, r0
 8000a46:	4316      	orrs	r6, r2
 8000a48:	f8c7 6108 	str.w	r6, [r7, #264]	; 0x108
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
											| ((uint64_t)Local_u8DataArray[11] << SHIFT_24_BIT) | ((uint64_t)Local_u8DataArray[10] << SHIFT_16_BIT)
 8000a52:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000a5e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8000a62:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8000a66:	460b      	mov	r3, r1
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000a6e:	460b      	mov	r3, r1
 8000a70:	061b      	lsls	r3, r3, #24
 8000a72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000a76:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8000a7a:	4606      	mov	r6, r0
 8000a7c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8000a80:	4694      	mov	ip, r2
 8000a82:	ea46 060c 	orr.w	r6, r6, ip
 8000a86:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000a90:	f897 32ca 	ldrb.w	r3, [r7, #714]	; 0x2ca
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2200      	movs	r2, #0
 8000a98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8000a9c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8000aac:	040b      	lsls	r3, r1, #16
 8000aae:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8000ab2:	4606      	mov	r6, r0
 8000ab4:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8000ab8:	4601      	mov	r1, r0
 8000aba:	040a      	lsls	r2, r1, #16
 8000abc:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8000ac0:	4606      	mov	r6, r0
 8000ac2:	4316      	orrs	r6, r2
 8000ac4:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
											| ((uint64_t)Local_u8DataArray[9] << SHIFT_8_BIT)  | ((uint64_t)Local_u8DataArray[8] << SHIFT_0_BIT);
 8000ace:	f897 32c9 	ldrb.w	r3, [r7, #713]	; 0x2c9
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ada:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f04f 0300 	mov.w	r3, #0
 8000ae6:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8000aea:	020b      	lsls	r3, r1, #8
 8000aec:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8000af0:	4606      	mov	r6, r0
 8000af2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8000af6:	4601      	mov	r1, r0
 8000af8:	020a      	lsls	r2, r1, #8
 8000afa:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8000afe:	4606      	mov	r6, r0
 8000b00:	ea46 0802 	orr.w	r8, r6, r2
 8000b04:	ea41 0903 	orr.w	r9, r1, r3
 8000b08:	f897 32c8 	ldrb.w	r3, [r7, #712]	; 0x2c8
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000b14:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
				Local_u64LowByteDataReceive = ((uint64_t)Local_u8DataArray[15] << SHIFT_56_BIT) | ((uint64_t)Local_u8DataArray[14] << SHIFT_48_BIT)
 8000b18:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	ea48 0101 	orr.w	r1, r8, r1
 8000b22:	6139      	str	r1, [r7, #16]
 8000b24:	ea49 0303 	orr.w	r3, r9, r3
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b2e:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000b32:	f002 f863 	bl	8002bfc <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Local_u32InactiveImageAddressCounter, Local_u64HighByteDataReceive);
 8000b36:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8000b3a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f001 ffec 	bl	8002b1c <HAL_FLASH_Program>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Local_u32InactiveImageAddressCounter + 8, Local_u64LowByteDataReceive);
 8000b44:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8000b48:	f103 0108 	add.w	r1, r3, #8
 8000b4c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8000b50:	2003      	movs	r0, #3
 8000b52:	f001 ffe3 	bl	8002b1c <HAL_FLASH_Program>
				HAL_FLASH_Lock();  //Locks again the flash memory
 8000b56:	f002 f877 	bl	8002c48 <HAL_FLASH_Lock>

				Local_u32InactiveImageAddressCounter += 16;
 8000b5a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8000b5e:	3310      	adds	r3, #16
 8000b60:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
				Local_u32SizeOfCode -= SIZEOF_PACKAGE_FIRMWARE;
 8000b64:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8000b68:	3b10      	subs	r3, #16
 8000b6a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8000b6e:	e197      	b.n	8000ea0 <BL_voidReceiveUpdate+0x780>
			}
			else{
				CAN_IF_Receive_Data_Buffer(Local_u8DataArray, SIZEOF_PACKAGE_FIRMWARE);
 8000b70:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8000b74:	2110      	movs	r1, #16
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fa68 	bl	800104c <CAN_IF_Receive_Data_Buffer>
				/*access piont to Encrypt SWC*/
				AES_CBC_decrypt_buffer(&ctx, Local_u8DataArray, 16);
 8000b7c:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8000b80:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000b84:	2210      	movs	r2, #16
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 ffea 	bl	8001b60 <AES_CBC_decrypt_buffer>

				Local_u64HighByteDataReceive= ((uint64_t)Local_u8DataArray[7] << SHIFT_56_BIT) | ((uint64_t)Local_u8DataArray[6] << SHIFT_48_BIT)
 8000b8c:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2200      	movs	r2, #0
 8000b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000b98:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	f04f 0100 	mov.w	r1, #0
 8000ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000ba8:	0619      	lsls	r1, r3, #24
 8000baa:	2000      	movs	r0, #0
 8000bac:	f897 32c6 	ldrb.w	r3, [r7, #710]	; 0x2c6
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000bbc:	f04f 0200 	mov.w	r2, #0
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 8000bc8:	0433      	lsls	r3, r6, #16
 8000bca:	2200      	movs	r2, #0
 8000bcc:	ea40 0602 	orr.w	r6, r0, r2
 8000bd0:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 8000bd4:	430b      	orrs	r3, r1
 8000bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
											| ((uint64_t)Local_u8DataArray[5] << SHIFT_40_BIT) | ((uint64_t)Local_u8DataArray[4] << SHIFT_32_BIT)
 8000bda:	f897 32c5 	ldrb.w	r3, [r7, #709]	; 0x2c5
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2200      	movs	r2, #0
 8000be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000be6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000bf6:	020b      	lsls	r3, r1, #8
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000bfe:	4606      	mov	r6, r0
 8000c00:	4316      	orrs	r6, r2
 8000c02:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 8000c06:	430b      	orrs	r3, r1
 8000c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000c0c:	f897 32c4 	ldrb.w	r3, [r7, #708]	; 0x2c4
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2200      	movs	r2, #0
 8000c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000c18:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000c28:	000b      	movs	r3, r1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000c30:	4606      	mov	r6, r0
 8000c32:	4316      	orrs	r6, r2
 8000c34:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
											| ((uint64_t)Local_u8DataArray[3] << SHIFT_24_BIT) | ((uint64_t)Local_u8DataArray[2] << SHIFT_16_BIT)
 8000c3e:	f897 32c3 	ldrb.w	r3, [r7, #707]	; 0x2c3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000c4e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8000c52:	460b      	mov	r3, r1
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	061b      	lsls	r3, r3, #24
 8000c5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c62:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8000c66:	4606      	mov	r6, r0
 8000c68:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8000c6c:	4694      	mov	ip, r2
 8000c6e:	ea46 060c 	orr.w	r6, r6, ip
 8000c72:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 8000c76:	430b      	orrs	r3, r1
 8000c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c7c:	f897 32c2 	ldrb.w	r3, [r7, #706]	; 0x2c2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2200      	movs	r2, #0
 8000c84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c88:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8000c98:	040b      	lsls	r3, r1, #16
 8000c9a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	; 0x1c0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	040a      	lsls	r2, r1, #16
 8000ca8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8000cac:	4606      	mov	r6, r0
 8000cae:	4316      	orrs	r6, r2
 8000cb0:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
											| ((uint64_t)Local_u8DataArray[1] << SHIFT_8_BIT)  | ((uint64_t)Local_u8DataArray[0] << SHIFT_0_BIT);
 8000cba:	f897 32c1 	ldrb.w	r3, [r7, #705]	; 0x2c1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8000cc6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	f04f 0300 	mov.w	r3, #0
 8000cd2:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8000cd6:	020b      	lsls	r3, r1, #8
 8000cd8:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8000cdc:	4606      	mov	r6, r0
 8000cde:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	020a      	lsls	r2, r1, #8
 8000ce6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8000cea:	4606      	mov	r6, r0
 8000cec:	4316      	orrs	r6, r2
 8000cee:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80
 8000cf2:	430b      	orrs	r3, r1
 8000cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000cf8:	f897 32c0 	ldrb.w	r3, [r7, #704]	; 0x2c0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d02:	67fa      	str	r2, [r7, #124]	; 0x7c
				Local_u64HighByteDataReceive= ((uint64_t)Local_u8DataArray[7] << SHIFT_56_BIT) | ((uint64_t)Local_u8DataArray[6] << SHIFT_48_BIT)
 8000d04:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000d08:	4606      	mov	r6, r0
 8000d0a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8000d0e:	4694      	mov	ip, r2
 8000d10:	ea46 060c 	orr.w	r6, r6, ip
 8000d14:	60be      	str	r6, [r7, #8]
 8000d16:	430b      	orrs	r3, r1
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d1e:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8

				Local_u64LowByteDataReceive = ((uint64_t)Local_u8DataArray[15] << SHIFT_56_BIT) | ((uint64_t)Local_u8DataArray[14] << SHIFT_48_BIT)
 8000d22:	f897 32cf 	ldrb.w	r3, [r7, #719]	; 0x2cf
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8000d2c:	677a      	str	r2, [r7, #116]	; 0x74
 8000d2e:	f04f 0000 	mov.w	r0, #0
 8000d32:	f04f 0100 	mov.w	r1, #0
 8000d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d38:	0619      	lsls	r1, r3, #24
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f897 32ce 	ldrb.w	r3, [r7, #718]	; 0x2ce
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8000d52:	0433      	lsls	r3, r6, #16
 8000d54:	2200      	movs	r2, #0
 8000d56:	ea40 0602 	orr.w	r6, r0, r2
 8000d5a:	663e      	str	r6, [r7, #96]	; 0x60
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	667b      	str	r3, [r7, #100]	; 0x64
											| ((uint64_t)Local_u8DataArray[13] << SHIFT_40_BIT) | ((uint64_t)Local_u8DataArray[12] << SHIFT_32_BIT)
 8000d60:	f897 32cd 	ldrb.w	r3, [r7, #717]	; 0x2cd
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d6a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d76:	020b      	lsls	r3, r1, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000d7e:	4606      	mov	r6, r0
 8000d80:	4316      	orrs	r6, r2
 8000d82:	653e      	str	r6, [r7, #80]	; 0x50
 8000d84:	430b      	orrs	r3, r1
 8000d86:	657b      	str	r3, [r7, #84]	; 0x54
 8000d88:	f897 32cc 	ldrb.w	r3, [r7, #716]	; 0x2cc
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d92:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000d9e:	000b      	movs	r3, r1
 8000da0:	2200      	movs	r2, #0
 8000da2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000da6:	4606      	mov	r6, r0
 8000da8:	4316      	orrs	r6, r2
 8000daa:	643e      	str	r6, [r7, #64]	; 0x40
 8000dac:	430b      	orrs	r3, r1
 8000dae:	647b      	str	r3, [r7, #68]	; 0x44
											| ((uint64_t)Local_u8DataArray[11] << SHIFT_24_BIT) | ((uint64_t)Local_u8DataArray[10] << SHIFT_16_BIT)
 8000db0:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2200      	movs	r2, #0
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dba:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000dbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	0a1b      	lsrs	r3, r3, #8
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	061b      	lsls	r3, r3, #24
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
 8000dcc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000dd0:	4606      	mov	r6, r0
 8000dd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	ea46 060c 	orr.w	r6, r6, ip
 8000ddc:	62be      	str	r6, [r7, #40]	; 0x28
 8000dde:	430b      	orrs	r3, r1
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000de2:	f897 32ca 	ldrb.w	r3, [r7, #714]	; 0x2ca
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8000dee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8000dfe:	040b      	lsls	r3, r1, #16
 8000e00:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8000e04:	4606      	mov	r6, r0
 8000e06:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 8000e0a:	4601      	mov	r1, r0
 8000e0c:	040a      	lsls	r2, r1, #16
 8000e0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e12:	4606      	mov	r6, r0
 8000e14:	ea46 0a02 	orr.w	sl, r6, r2
 8000e18:	ea41 0b03 	orr.w	fp, r1, r3
											| ((uint64_t)Local_u8DataArray[9] << SHIFT_8_BIT)   | ((uint64_t)Local_u8DataArray[8] << SHIFT_0_BIT);
 8000e1c:	f897 32c9 	ldrb.w	r3, [r7, #713]	; 0x2c9
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2200      	movs	r2, #0
 8000e24:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e28:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8000e38:	020b      	lsls	r3, r1, #8
 8000e3a:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8000e3e:	4606      	mov	r6, r0
 8000e40:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8000e44:	4601      	mov	r1, r0
 8000e46:	020a      	lsls	r2, r1, #8
 8000e48:	ea4a 0402 	orr.w	r4, sl, r2
 8000e4c:	ea4b 0503 	orr.w	r5, fp, r3
 8000e50:	f897 32c8 	ldrb.w	r3, [r7, #712]	; 0x2c8
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2200      	movs	r2, #0
 8000e58:	623b      	str	r3, [r7, #32]
 8000e5a:	627a      	str	r2, [r7, #36]	; 0x24
				Local_u64LowByteDataReceive = ((uint64_t)Local_u8DataArray[15] << SHIFT_56_BIT) | ((uint64_t)Local_u8DataArray[14] << SHIFT_48_BIT)
 8000e5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e60:	4611      	mov	r1, r2
 8000e62:	4321      	orrs	r1, r4
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	432b      	orrs	r3, r5
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e6e:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 8000e72:	f001 fec3 	bl	8002bfc <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Local_u32InactiveImageAddressCounter, Local_u64HighByteDataReceive);
 8000e76:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8000e7a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f001 fe4c 	bl	8002b1c <HAL_FLASH_Program>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Local_u32InactiveImageAddressCounter + 8, Local_u64LowByteDataReceive);
 8000e84:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8000e88:	f103 0108 	add.w	r1, r3, #8
 8000e8c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8000e90:	2003      	movs	r0, #3
 8000e92:	f001 fe43 	bl	8002b1c <HAL_FLASH_Program>
				HAL_FLASH_Lock();  //Locks again the flash memory
 8000e96:	f001 fed7 	bl	8002c48 <HAL_FLASH_Lock>

				Local_u32SizeOfCode -= Local_u32SizeOfCode ;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
			}
			CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACKNOWLEDGE_LINE_OF_CODE_RECEIVED);
 8000ea0:	2176      	movs	r1, #118	; 0x76
 8000ea2:	2010      	movs	r0, #16
 8000ea4:	f000 f848 	bl	8000f38 <CAN_IF_Transmit_UDS_Request>
	while(Local_u32SizeOfCode)
 8000ea8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f47f ac89 	bne.w	80007c4 <BL_voidReceiveUpdate+0xa4>
		}
	}
	// Wait for finish code of GW
	CAN_IF_Receive_UDS_Respond(&Local_u8HeaderFlag);
 8000eb2:	f207 23bf 	addw	r3, r7, #703	; 0x2bf
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f876 	bl	8000fa8 <CAN_IF_Receive_UDS_Respond>

	if (Local_u8HeaderFlag == UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE)
 8000ebc:	f897 32bf 	ldrb.w	r3, [r7, #703]	; 0x2bf
 8000ec0:	2b37      	cmp	r3, #55	; 0x37
 8000ec2:	d101      	bne.n	8000ec8 <BL_voidReceiveUpdate+0x7a8>
	{
		BL_voidFinishBootLoader();
 8000ec4:	f000 f806 	bl	8000ed4 <BL_voidFinishBootLoader>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	f507 773b 	add.w	r7, r7, #748	; 0x2ec
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ed4 <BL_voidFinishBootLoader>:

void BL_voidFinishBootLoader(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	//Structure CAN Transmit
	CAN_IF_Transmit_UDS_Request(NODE_ID_ONE, UDS_MCU_ACKNOWLEDGE_FINISHING);
 8000ed8:	2177      	movs	r1, #119	; 0x77
 8000eda:	2010      	movs	r0, #16
 8000edc:	f000 f82c 	bl	8000f38 <CAN_IF_Transmit_UDS_Request>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8000ee0:	f06f 010e 	mvn.w	r1, #14
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <BL_voidFinishBootLoader+0x28>)
 8000ee6:	f7ff fb19 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 8000eea:	f04f 31ff 	mov.w	r1, #4294967295
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <BL_voidFinishBootLoader+0x2c>)
 8000ef0:	f7ff fb14 	bl	800051c <BL_voidEraseRestoreHeaderPage>
	BL_voidMakeSoftWareReset();
 8000ef4:	f000 f806 	bl	8000f04 <BL_voidMakeSoftWareReset>
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	0801fc14 	.word	0x0801fc14
 8000f00:	0801fc00 	.word	0x0801fc00

08000f04 <BL_voidMakeSoftWareReset>:

void BL_voidMakeSoftWareReset(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
#ifdef Debug
	__HAL_DBGMCU_FREEZE_IWDG();
#endif

	hiwdg.Instance = IWDG;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <BL_voidMakeSoftWareReset+0x2c>)
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <BL_voidMakeSoftWareReset+0x30>)
 8000f0c:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <BL_voidMakeSoftWareReset+0x2c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 9;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <BL_voidMakeSoftWareReset+0x2c>)
 8000f16:	2209      	movs	r2, #9
 8000f18:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <BL_voidMakeSoftWareReset+0x2c>)
 8000f1c:	f002 f99a 	bl	8003254 <HAL_IWDG_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <BL_voidMakeSoftWareReset+0x26>
	{
		Error_Handler();
 8000f26:	f000 ff69 	bl	8001dfc <Error_Handler>
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000007c 	.word	0x2000007c
 8000f34:	40003000 	.word	0x40003000

08000f38 <CAN_IF_Transmit_UDS_Request>:
 *      Author: CHD9HC
 */
#include <Can_Interface.h>

/*==============================Transmit=========================================*/
HAL_StatusTypeDef CAN_IF_Transmit_UDS_Request(uint8_t Node, uint8_t UDS_Req){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
   //Modify CAN frame
   uint8_t Local_u8SendToNode;
   if(Node == 0x01){
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <CAN_IF_Transmit_UDS_Request+0x1c>
	   Local_u8SendToNode = 0x50;	// Lighting System
 8000f4e:	2350      	movs	r3, #80	; 0x50
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e007      	b.n	8000f64 <CAN_IF_Transmit_UDS_Request+0x2c>
   }
   else if (Node == 0x02) {
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d102      	bne.n	8000f60 <CAN_IF_Transmit_UDS_Request+0x28>
	   Local_u8SendToNode = 0x60;	//	Colision System
 8000f5a:	2360      	movs	r3, #96	; 0x60
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e001      	b.n	8000f64 <CAN_IF_Transmit_UDS_Request+0x2c>
   }
   else{
	   Local_u8SendToNode = Node;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	73fb      	strb	r3, [r7, #15]
   }
   TxHeader.IDE = CAN_ID_STD;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <CAN_IF_Transmit_UDS_Request+0x60>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <CAN_IF_Transmit_UDS_Request+0x60>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = Local_u8SendToNode;  // ID
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <CAN_IF_Transmit_UDS_Request+0x60>)
 8000f74:	6013      	str	r3, [r2, #0]
   TxHeader.DLC = 1;  // data length
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <CAN_IF_Transmit_UDS_Request+0x60>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	611a      	str	r2, [r3, #16]
   TxData[0] = UDS_Req;
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <CAN_IF_Transmit_UDS_Request+0x64>)
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	7013      	strb	r3, [r2, #0]

   // Request Program control.
   return HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <CAN_IF_Transmit_UDS_Request+0x68>)
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <CAN_IF_Transmit_UDS_Request+0x64>)
 8000f86:	4904      	ldr	r1, [pc, #16]	; (8000f98 <CAN_IF_Transmit_UDS_Request+0x60>)
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <CAN_IF_Transmit_UDS_Request+0x6c>)
 8000f8a:	f001 faa5 	bl	80024d8 <HAL_CAN_AddTxMessage>
 8000f8e:	4603      	mov	r3, r0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000b0 	.word	0x200000b0
 8000f9c:	200000e4 	.word	0x200000e4
 8000fa0:	200000f4 	.word	0x200000f4
 8000fa4:	2000004c 	.word	0x2000004c

08000fa8 <CAN_IF_Receive_UDS_Respond>:
   return HAL_Return;
}

/*==============================Receive=========================================*/

HAL_StatusTypeDef CAN_IF_Receive_UDS_Respond(uint8_t *UDS_Req){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000fb0:	bf00      	nop
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f8      	beq.n	8000fb2 <CAN_IF_Receive_UDS_Respond+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <CAN_IF_Receive_UDS_Respond+0x3c>)
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <CAN_IF_Receive_UDS_Respond+0x40>)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <CAN_IF_Receive_UDS_Respond+0x38>)
 8000fc8:	f001 fb55 	bl	8002676 <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	*UDS_Req = RxData[0];
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <CAN_IF_Receive_UDS_Respond+0x3c>)
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000004c 	.word	0x2000004c
 8000fe4:	200000ec 	.word	0x200000ec
 8000fe8:	200000c8 	.word	0x200000c8

08000fec <CAN_IF_Receive_Data_Frame>:

HAL_StatusTypeDef CAN_IF_Receive_Data_Frame(uint8_t *DataBuffer){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	// Block until get respond from Bootloader
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000ff4:	bf00      	nop
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <CAN_IF_Receive_Data_Frame+0x54>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0f8      	beq.n	8000ff6 <CAN_IF_Receive_Data_Frame+0xa>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <CAN_IF_Receive_Data_Frame+0x58>)
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <CAN_IF_Receive_Data_Frame+0x5c>)
 8001008:	2100      	movs	r1, #0
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <CAN_IF_Receive_Data_Frame+0x54>)
 800100c:	f001 fb33 	bl	8002676 <HAL_CAN_GetRxMessage>
	// Get respond from Bootloader
	uint8_t Local_u8DataLength = 8;
 8001010:	2308      	movs	r3, #8
 8001012:	73bb      	strb	r3, [r7, #14]
	for(uint8_t index = 0 ; index < Local_u8DataLength ; index++ ){
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e009      	b.n	800102e <CAN_IF_Receive_Data_Frame+0x42>
	   DataBuffer[index] = RxData[index];
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	440b      	add	r3, r1
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <CAN_IF_Receive_Data_Frame+0x58>)
 8001024:	5c8a      	ldrb	r2, [r1, r2]
 8001026:	701a      	strb	r2, [r3, #0]
	for(uint8_t index = 0 ; index < Local_u8DataLength ; index++ ){
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3301      	adds	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	7bbb      	ldrb	r3, [r7, #14]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3f1      	bcc.n	800101a <CAN_IF_Receive_Data_Frame+0x2e>
    }
	return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000004c 	.word	0x2000004c
 8001044:	200000ec 	.word	0x200000ec
 8001048:	200000c8 	.word	0x200000c8

0800104c <CAN_IF_Receive_Data_Buffer>:

HAL_StatusTypeDef CAN_IF_Receive_Data_Buffer(uint8_t *DataBuffer , uint32_t Copy_DataLength){
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	//Check Databuffer
	uint16_t Local_uint8FramsNumber = (uint16_t)(Copy_DataLength / 8 ) ;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	81bb      	strh	r3, [r7, #12]
	if(DataBuffer == NULL){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <CAN_IF_Receive_Data_Buffer+0x1a>
		return HAL_ERROR ;
 8001062:	2301      	movs	r3, #1
 8001064:	e02c      	b.n	80010c0 <CAN_IF_Receive_Data_Buffer+0x74>
	}

	for (uint8_t Round_Counter = 0; Round_Counter < Local_uint8FramsNumber ; Round_Counter++) // send 8 byte in each round
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e023      	b.n	80010b4 <CAN_IF_Receive_Data_Buffer+0x68>
	{
		// Block until get respond from Bootloader
		while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 800106c:	bf00      	nop
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <CAN_IF_Receive_Data_Buffer+0x7c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f8      	beq.n	800106e <CAN_IF_Receive_Data_Buffer+0x22>
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <CAN_IF_Receive_Data_Buffer+0x80>)
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <CAN_IF_Receive_Data_Buffer+0x84>)
 8001080:	2100      	movs	r1, #0
 8001082:	4811      	ldr	r0, [pc, #68]	; (80010c8 <CAN_IF_Receive_Data_Buffer+0x7c>)
 8001084:	f001 faf7 	bl	8002676 <HAL_CAN_GetRxMessage>
		// Get respond from Bootloader
		for(uint8_t index = 0 ; index < 8 ; index++ ){
 8001088:	2300      	movs	r3, #0
 800108a:	73bb      	strb	r3, [r7, #14]
 800108c:	e009      	b.n	80010a2 <CAN_IF_Receive_Data_Buffer+0x56>
		   DataBuffer[index] = RxData[index];
 800108e:	7bba      	ldrb	r2, [r7, #14]
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	440b      	add	r3, r1
 8001096:	490d      	ldr	r1, [pc, #52]	; (80010cc <CAN_IF_Receive_Data_Buffer+0x80>)
 8001098:	5c8a      	ldrb	r2, [r1, r2]
 800109a:	701a      	strb	r2, [r3, #0]
		for(uint8_t index = 0 ; index < 8 ; index++ ){
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	3301      	adds	r3, #1
 80010a0:	73bb      	strb	r3, [r7, #14]
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	d9f2      	bls.n	800108e <CAN_IF_Receive_Data_Buffer+0x42>
		}
		DataBuffer += 8;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3308      	adds	r3, #8
 80010ac:	607b      	str	r3, [r7, #4]
	for (uint8_t Round_Counter = 0; Round_Counter < Local_uint8FramsNumber ; Round_Counter++) // send 8 byte in each round
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	3301      	adds	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	89ba      	ldrh	r2, [r7, #12]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d8d6      	bhi.n	800106c <CAN_IF_Receive_Data_Buffer+0x20>
	}

	return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000004c 	.word	0x2000004c
 80010cc:	200000ec 	.word	0x200000ec
 80010d0:	200000c8 	.word	0x200000c8

080010d4 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e030      	b.n	8001146 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	441a      	add	r2, r3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	440b      	add	r3, r1
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	3301      	adds	r3, #1
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	441a      	add	r2, r3
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	3301      	adds	r3, #1
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	440b      	add	r3, r1
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	441a      	add	r2, r3
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	440b      	add	r3, r1
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	3303      	adds	r3, #3
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	441a      	add	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	3303      	adds	r3, #3
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	440b      	add	r3, r1
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	3301      	adds	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d9cb      	bls.n	80010e4 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 800114c:	2304      	movs	r3, #4
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	e081      	b.n	8001256 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b01      	subs	r3, #1
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	3301      	adds	r3, #1
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3302      	adds	r3, #2
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	3303      	adds	r3, #3
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d125      	bne.n	80011de <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8001192:	7b3b      	ldrb	r3, [r7, #12]
 8001194:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <KeyExpansion+0x198>)
 80011ac:	5c9b      	ldrb	r3, [r3, r2]
 80011ae:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 80011b0:	7b7b      	ldrb	r3, [r7, #13]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <KeyExpansion+0x198>)
 80011b6:	5c9b      	ldrb	r3, [r3, r2]
 80011b8:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <KeyExpansion+0x198>)
 80011c0:	5c9b      	ldrb	r3, [r3, r2]
 80011c2:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <KeyExpansion+0x198>)
 80011ca:	5c9b      	ldrb	r3, [r3, r2]
 80011cc:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80011ce:	7b3a      	ldrb	r2, [r7, #12]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	4926      	ldr	r1, [pc, #152]	; (8001270 <KeyExpansion+0x19c>)
 80011d6:	5ccb      	ldrb	r3, [r1, r3]
 80011d8:	4053      	eors	r3, r2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3b04      	subs	r3, #4
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4413      	add	r3, r2
 80011f2:	7819      	ldrb	r1, [r3, #0]
 80011f4:	7b3a      	ldrb	r2, [r7, #12]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4403      	add	r3, r0
 80011fc:	404a      	eors	r2, r1
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	3301      	adds	r3, #1
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	7819      	ldrb	r1, [r3, #0]
 800120c:	7b7a      	ldrb	r2, [r7, #13]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4403      	add	r3, r0
 8001216:	404a      	eors	r2, r1
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	3302      	adds	r3, #2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	7819      	ldrb	r1, [r3, #0]
 8001226:	7bba      	ldrb	r2, [r7, #14]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	3302      	adds	r3, #2
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	4403      	add	r3, r0
 8001230:	404a      	eors	r2, r1
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	3303      	adds	r3, #3
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	7819      	ldrb	r1, [r3, #0]
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	3303      	adds	r3, #3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	4403      	add	r3, r0
 800124a:	404a      	eors	r2, r1
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	3301      	adds	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	2b2b      	cmp	r3, #43	; 0x2b
 800125a:	f67f af7a 	bls.w	8001152 <KeyExpansion+0x7e>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3724      	adds	r7, #36	; 0x24
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	08003b20 	.word	0x08003b20
 8001270:	08003d20 	.word	0x08003d20

08001274 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff25 	bl	80010d4 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	33b0      	adds	r3, #176	; 0xb0
 800128e:	2210      	movs	r2, #16
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fc2a 	bl	8003aec <memcpy>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	e027      	b.n	8001304 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 80012b4:	2300      	movs	r3, #0
 80012b6:	75bb      	strb	r3, [r7, #22]
 80012b8:	e01e      	b.n	80012f8 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80012ba:	7dfa      	ldrb	r2, [r7, #23]
 80012bc:	7dbb      	ldrb	r3, [r7, #22]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	440a      	add	r2, r1
 80012c4:	4413      	add	r3, r2
 80012c6:	7818      	ldrb	r0, [r3, #0]
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	009a      	lsls	r2, r3, #2
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	4413      	add	r3, r2
 80012d0:	009a      	lsls	r2, r3, #2
 80012d2:	7dbb      	ldrb	r3, [r7, #22]
 80012d4:	4413      	add	r3, r2
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	7819      	ldrb	r1, [r3, #0]
 80012de:	7dfa      	ldrb	r2, [r7, #23]
 80012e0:	7dbb      	ldrb	r3, [r7, #22]
 80012e2:	4041      	eors	r1, r0
 80012e4:	b2c8      	uxtb	r0, r1
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	440a      	add	r2, r1
 80012ec:	4413      	add	r3, r2
 80012ee:	4602      	mov	r2, r0
 80012f0:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80012f2:	7dbb      	ldrb	r3, [r7, #22]
 80012f4:	3301      	adds	r3, #1
 80012f6:	75bb      	strb	r3, [r7, #22]
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d9dd      	bls.n	80012ba <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	3301      	adds	r3, #1
 8001302:	75fb      	strb	r3, [r7, #23]
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9d4      	bls.n	80012b4 <AddRoundKey+0x14>
    }
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <xtime>:
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	b25a      	sxtb	r2, r3
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	09db      	lsrs	r3, r3, #7
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4619      	mov	r1, r3
 800132e:	0049      	lsls	r1, r1, #1
 8001330:	440b      	add	r3, r1
 8001332:	4619      	mov	r1, r3
 8001334:	00c8      	lsls	r0, r1, #3
 8001336:	4619      	mov	r1, r3
 8001338:	4603      	mov	r3, r0
 800133a:	440b      	add	r3, r1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	b25b      	sxtb	r3, r3
 8001340:	4053      	eors	r3, r2
 8001342:	b25b      	sxtb	r3, r3
 8001344:	b2db      	uxtb	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e33b      	b.n	80019d6 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001366:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	78db      	ldrb	r3, [r3, #3]
 800138a:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ffc1 	bl	8001316 <xtime>
 8001394:	4603      	mov	r3, r0
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ffbd 	bl	8001316 <xtime>
 800139c:	4603      	mov	r3, r0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffb9 	bl	8001316 <xtime>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ffb5 	bl	8001316 <xtime>
 80013ac:	7abb      	ldrb	r3, [r7, #10]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffb1 	bl	8001316 <xtime>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ffad 	bl	8001316 <xtime>
 80013bc:	7abb      	ldrb	r3, [r7, #10]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ffa9 	bl	8001316 <xtime>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ffa5 	bl	8001316 <xtime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ffa1 	bl	8001316 <xtime>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff9d 	bl	8001316 <xtime>
 80013dc:	7a7b      	ldrb	r3, [r7, #9]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff99 	bl	8001316 <xtime>
 80013e4:	7a7b      	ldrb	r3, [r7, #9]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff95 	bl	8001316 <xtime>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff91 	bl	8001316 <xtime>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff8d 	bl	8001316 <xtime>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff89 	bl	8001316 <xtime>
 8001404:	7a3b      	ldrb	r3, [r7, #8]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff85 	bl	8001316 <xtime>
 800140c:	7a3b      	ldrb	r3, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff81 	bl	8001316 <xtime>
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff7d 	bl	8001316 <xtime>
 800141c:	7a3b      	ldrb	r3, [r7, #8]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff79 	bl	8001316 <xtime>
 8001424:	4603      	mov	r3, r0
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff75 	bl	8001316 <xtime>
 800142c:	4603      	mov	r3, r0
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff71 	bl	8001316 <xtime>
 8001434:	4603      	mov	r3, r0
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff6d 	bl	8001316 <xtime>
 800143c:	7afb      	ldrb	r3, [r7, #11]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff69 	bl	8001316 <xtime>
 8001444:	4603      	mov	r3, r0
 8001446:	461c      	mov	r4, r3
 8001448:	7afb      	ldrb	r3, [r7, #11]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff63 	bl	8001316 <xtime>
 8001450:	4603      	mov	r3, r0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff5f 	bl	8001316 <xtime>
 8001458:	4603      	mov	r3, r0
 800145a:	4063      	eors	r3, r4
 800145c:	b2dc      	uxtb	r4, r3
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff58 	bl	8001316 <xtime>
 8001466:	4603      	mov	r3, r0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff54 	bl	8001316 <xtime>
 800146e:	4603      	mov	r3, r0
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff50 	bl	8001316 <xtime>
 8001476:	4603      	mov	r3, r0
 8001478:	4063      	eors	r3, r4
 800147a:	b2dc      	uxtb	r4, r3
 800147c:	7abb      	ldrb	r3, [r7, #10]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff49 	bl	8001316 <xtime>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	7abb      	ldrb	r3, [r7, #10]
 800148a:	4053      	eors	r3, r2
 800148c:	b2dd      	uxtb	r5, r3
 800148e:	7abb      	ldrb	r3, [r7, #10]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff40 	bl	8001316 <xtime>
 8001496:	4603      	mov	r3, r0
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff3c 	bl	8001316 <xtime>
 800149e:	4603      	mov	r3, r0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff38 	bl	8001316 <xtime>
 80014a6:	4603      	mov	r3, r0
 80014a8:	406b      	eors	r3, r5
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4063      	eors	r3, r4
 80014ae:	b2dc      	uxtb	r4, r3
 80014b0:	7a7b      	ldrb	r3, [r7, #9]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff2f 	bl	8001316 <xtime>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff2b 	bl	8001316 <xtime>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	7a7b      	ldrb	r3, [r7, #9]
 80014c6:	4053      	eors	r3, r2
 80014c8:	b2dd      	uxtb	r5, r3
 80014ca:	7a7b      	ldrb	r3, [r7, #9]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff22 	bl	8001316 <xtime>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff1e 	bl	8001316 <xtime>
 80014da:	4603      	mov	r3, r0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff1a 	bl	8001316 <xtime>
 80014e2:	4603      	mov	r3, r0
 80014e4:	406b      	eors	r3, r5
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4063      	eors	r3, r4
 80014ea:	b2dc      	uxtb	r4, r3
 80014ec:	7a3b      	ldrb	r3, [r7, #8]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff11 	bl	8001316 <xtime>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff0d 	bl	8001316 <xtime>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff09 	bl	8001316 <xtime>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	4053      	eors	r3, r2
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4063      	eors	r3, r4
 8001510:	b2d9      	uxtb	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800151a:	7afb      	ldrb	r3, [r7, #11]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fefa 	bl	8001316 <xtime>
 8001522:	7afb      	ldrb	r3, [r7, #11]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fef6 	bl	8001316 <xtime>
 800152a:	4603      	mov	r3, r0
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fef2 	bl	8001316 <xtime>
 8001532:	7afb      	ldrb	r3, [r7, #11]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff feee 	bl	8001316 <xtime>
 800153a:	4603      	mov	r3, r0
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff feea 	bl	8001316 <xtime>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fee6 	bl	8001316 <xtime>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fee2 	bl	8001316 <xtime>
 8001552:	7abb      	ldrb	r3, [r7, #10]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fede 	bl	8001316 <xtime>
 800155a:	4603      	mov	r3, r0
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff feda 	bl	8001316 <xtime>
 8001562:	4603      	mov	r3, r0
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fed6 	bl	8001316 <xtime>
 800156a:	4603      	mov	r3, r0
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fed2 	bl	8001316 <xtime>
 8001572:	7a7b      	ldrb	r3, [r7, #9]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fece 	bl	8001316 <xtime>
 800157a:	4603      	mov	r3, r0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff feca 	bl	8001316 <xtime>
 8001582:	7a7b      	ldrb	r3, [r7, #9]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fec6 	bl	8001316 <xtime>
 800158a:	4603      	mov	r3, r0
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fec2 	bl	8001316 <xtime>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff febe 	bl	8001316 <xtime>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff feba 	bl	8001316 <xtime>
 80015a2:	7a3b      	ldrb	r3, [r7, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff feb6 	bl	8001316 <xtime>
 80015aa:	7a3b      	ldrb	r3, [r7, #8]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff feb2 	bl	8001316 <xtime>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff feae 	bl	8001316 <xtime>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff feaa 	bl	8001316 <xtime>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fea6 	bl	8001316 <xtime>
 80015ca:	7afb      	ldrb	r3, [r7, #11]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fea2 	bl	8001316 <xtime>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe9e 	bl	8001316 <xtime>
 80015da:	4603      	mov	r3, r0
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fe9a 	bl	8001316 <xtime>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	4053      	eors	r3, r2
 80015ea:	b2dc      	uxtb	r4, r3
 80015ec:	7abb      	ldrb	r3, [r7, #10]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fe91 	bl	8001316 <xtime>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461d      	mov	r5, r3
 80015f8:	7abb      	ldrb	r3, [r7, #10]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe8b 	bl	8001316 <xtime>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe87 	bl	8001316 <xtime>
 8001608:	4603      	mov	r3, r0
 800160a:	406b      	eors	r3, r5
 800160c:	b2dd      	uxtb	r5, r3
 800160e:	7abb      	ldrb	r3, [r7, #10]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe80 	bl	8001316 <xtime>
 8001616:	4603      	mov	r3, r0
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fe7c 	bl	8001316 <xtime>
 800161e:	4603      	mov	r3, r0
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fe78 	bl	8001316 <xtime>
 8001626:	4603      	mov	r3, r0
 8001628:	406b      	eors	r3, r5
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4063      	eors	r3, r4
 800162e:	b2dc      	uxtb	r4, r3
 8001630:	7a7b      	ldrb	r3, [r7, #9]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fe6f 	bl	8001316 <xtime>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	7a7b      	ldrb	r3, [r7, #9]
 800163e:	4053      	eors	r3, r2
 8001640:	b2dd      	uxtb	r5, r3
 8001642:	7a7b      	ldrb	r3, [r7, #9]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fe66 	bl	8001316 <xtime>
 800164a:	4603      	mov	r3, r0
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe62 	bl	8001316 <xtime>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fe5e 	bl	8001316 <xtime>
 800165a:	4603      	mov	r3, r0
 800165c:	406b      	eors	r3, r5
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4063      	eors	r3, r4
 8001662:	b2dc      	uxtb	r4, r3
 8001664:	7a3b      	ldrb	r3, [r7, #8]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fe55 	bl	8001316 <xtime>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fe51 	bl	8001316 <xtime>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	7a3b      	ldrb	r3, [r7, #8]
 800167a:	4053      	eors	r3, r2
 800167c:	b2dd      	uxtb	r5, r3
 800167e:	7a3b      	ldrb	r3, [r7, #8]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fe48 	bl	8001316 <xtime>
 8001686:	4603      	mov	r3, r0
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe44 	bl	8001316 <xtime>
 800168e:	4603      	mov	r3, r0
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe40 	bl	8001316 <xtime>
 8001696:	4603      	mov	r3, r0
 8001698:	406b      	eors	r3, r5
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4063      	eors	r3, r4
 800169e:	b2d9      	uxtb	r1, r3
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	460a      	mov	r2, r1
 80016aa:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fe31 	bl	8001316 <xtime>
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe2d 	bl	8001316 <xtime>
 80016bc:	4603      	mov	r3, r0
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fe29 	bl	8001316 <xtime>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe25 	bl	8001316 <xtime>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fe21 	bl	8001316 <xtime>
 80016d4:	7abb      	ldrb	r3, [r7, #10]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fe1d 	bl	8001316 <xtime>
 80016dc:	7abb      	ldrb	r3, [r7, #10]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fe19 	bl	8001316 <xtime>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fe15 	bl	8001316 <xtime>
 80016ec:	7abb      	ldrb	r3, [r7, #10]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fe11 	bl	8001316 <xtime>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe0d 	bl	8001316 <xtime>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fe09 	bl	8001316 <xtime>
 8001704:	4603      	mov	r3, r0
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fe05 	bl	8001316 <xtime>
 800170c:	7a7b      	ldrb	r3, [r7, #9]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe01 	bl	8001316 <xtime>
 8001714:	4603      	mov	r3, r0
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fdfd 	bl	8001316 <xtime>
 800171c:	4603      	mov	r3, r0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fdf9 	bl	8001316 <xtime>
 8001724:	4603      	mov	r3, r0
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fdf5 	bl	8001316 <xtime>
 800172c:	7a3b      	ldrb	r3, [r7, #8]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fdf1 	bl	8001316 <xtime>
 8001734:	4603      	mov	r3, r0
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fded 	bl	8001316 <xtime>
 800173c:	7a3b      	ldrb	r3, [r7, #8]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fde9 	bl	8001316 <xtime>
 8001744:	4603      	mov	r3, r0
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fde5 	bl	8001316 <xtime>
 800174c:	4603      	mov	r3, r0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fde1 	bl	8001316 <xtime>
 8001754:	4603      	mov	r3, r0
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fddd 	bl	8001316 <xtime>
 800175c:	7afb      	ldrb	r3, [r7, #11]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fdd9 	bl	8001316 <xtime>
 8001764:	4603      	mov	r3, r0
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fdd5 	bl	8001316 <xtime>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	4053      	eors	r3, r2
 8001774:	b2dc      	uxtb	r4, r3
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fdcc 	bl	8001316 <xtime>
 800177e:	4603      	mov	r3, r0
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fdc8 	bl	8001316 <xtime>
 8001786:	4603      	mov	r3, r0
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fdc4 	bl	8001316 <xtime>
 800178e:	4603      	mov	r3, r0
 8001790:	4063      	eors	r3, r4
 8001792:	b2dc      	uxtb	r4, r3
 8001794:	7abb      	ldrb	r3, [r7, #10]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fdbd 	bl	8001316 <xtime>
 800179c:	4603      	mov	r3, r0
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fdb9 	bl	8001316 <xtime>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fdb5 	bl	8001316 <xtime>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	7abb      	ldrb	r3, [r7, #10]
 80017b2:	4053      	eors	r3, r2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	4063      	eors	r3, r4
 80017b8:	b2dc      	uxtb	r4, r3
 80017ba:	7a7b      	ldrb	r3, [r7, #9]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fdaa 	bl	8001316 <xtime>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461d      	mov	r5, r3
 80017c6:	7a7b      	ldrb	r3, [r7, #9]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fda4 	bl	8001316 <xtime>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fda0 	bl	8001316 <xtime>
 80017d6:	4603      	mov	r3, r0
 80017d8:	406b      	eors	r3, r5
 80017da:	b2dd      	uxtb	r5, r3
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fd99 	bl	8001316 <xtime>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fd95 	bl	8001316 <xtime>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fd91 	bl	8001316 <xtime>
 80017f4:	4603      	mov	r3, r0
 80017f6:	406b      	eors	r3, r5
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4063      	eors	r3, r4
 80017fc:	b2dc      	uxtb	r4, r3
 80017fe:	7a3b      	ldrb	r3, [r7, #8]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fd88 	bl	8001316 <xtime>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	7a3b      	ldrb	r3, [r7, #8]
 800180c:	4053      	eors	r3, r2
 800180e:	b2dd      	uxtb	r5, r3
 8001810:	7a3b      	ldrb	r3, [r7, #8]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fd7f 	bl	8001316 <xtime>
 8001818:	4603      	mov	r3, r0
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fd7b 	bl	8001316 <xtime>
 8001820:	4603      	mov	r3, r0
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fd77 	bl	8001316 <xtime>
 8001828:	4603      	mov	r3, r0
 800182a:	406b      	eors	r3, r5
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4063      	eors	r3, r4
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 800183e:	7afb      	ldrb	r3, [r7, #11]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fd68 	bl	8001316 <xtime>
 8001846:	4603      	mov	r3, r0
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fd64 	bl	8001316 <xtime>
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fd60 	bl	8001316 <xtime>
 8001856:	4603      	mov	r3, r0
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fd5c 	bl	8001316 <xtime>
 800185e:	4603      	mov	r3, r0
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fd58 	bl	8001316 <xtime>
 8001866:	4603      	mov	r3, r0
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fd54 	bl	8001316 <xtime>
 800186e:	7abb      	ldrb	r3, [r7, #10]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fd50 	bl	8001316 <xtime>
 8001876:	7abb      	ldrb	r3, [r7, #10]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fd4c 	bl	8001316 <xtime>
 800187e:	4603      	mov	r3, r0
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fd48 	bl	8001316 <xtime>
 8001886:	4603      	mov	r3, r0
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fd44 	bl	8001316 <xtime>
 800188e:	4603      	mov	r3, r0
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fd40 	bl	8001316 <xtime>
 8001896:	7a7b      	ldrb	r3, [r7, #9]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fd3c 	bl	8001316 <xtime>
 800189e:	7a7b      	ldrb	r3, [r7, #9]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fd38 	bl	8001316 <xtime>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd34 	bl	8001316 <xtime>
 80018ae:	7a7b      	ldrb	r3, [r7, #9]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fd30 	bl	8001316 <xtime>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fd2c 	bl	8001316 <xtime>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fd28 	bl	8001316 <xtime>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fd24 	bl	8001316 <xtime>
 80018ce:	7a3b      	ldrb	r3, [r7, #8]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fd20 	bl	8001316 <xtime>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd1c 	bl	8001316 <xtime>
 80018de:	4603      	mov	r3, r0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fd18 	bl	8001316 <xtime>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fd14 	bl	8001316 <xtime>
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fd10 	bl	8001316 <xtime>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	4053      	eors	r3, r2
 80018fe:	b2dc      	uxtb	r4, r3
 8001900:	7afb      	ldrb	r3, [r7, #11]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fd07 	bl	8001316 <xtime>
 8001908:	4603      	mov	r3, r0
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fd03 	bl	8001316 <xtime>
 8001910:	4603      	mov	r3, r0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fcff 	bl	8001316 <xtime>
 8001918:	4603      	mov	r3, r0
 800191a:	4063      	eors	r3, r4
 800191c:	b2dc      	uxtb	r4, r3
 800191e:	7abb      	ldrb	r3, [r7, #10]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fcf8 	bl	8001316 <xtime>
 8001926:	4603      	mov	r3, r0
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fcf4 	bl	8001316 <xtime>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	7abb      	ldrb	r3, [r7, #10]
 8001934:	4053      	eors	r3, r2
 8001936:	b2dd      	uxtb	r5, r3
 8001938:	7abb      	ldrb	r3, [r7, #10]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fceb 	bl	8001316 <xtime>
 8001940:	4603      	mov	r3, r0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fce7 	bl	8001316 <xtime>
 8001948:	4603      	mov	r3, r0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fce3 	bl	8001316 <xtime>
 8001950:	4603      	mov	r3, r0
 8001952:	406b      	eors	r3, r5
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4063      	eors	r3, r4
 8001958:	b2dc      	uxtb	r4, r3
 800195a:	7a7b      	ldrb	r3, [r7, #9]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fcda 	bl	8001316 <xtime>
 8001962:	4603      	mov	r3, r0
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fcd6 	bl	8001316 <xtime>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fcd2 	bl	8001316 <xtime>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	7a7b      	ldrb	r3, [r7, #9]
 8001978:	4053      	eors	r3, r2
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4063      	eors	r3, r4
 800197e:	b2dc      	uxtb	r4, r3
 8001980:	7a3b      	ldrb	r3, [r7, #8]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fcc7 	bl	8001316 <xtime>
 8001988:	4603      	mov	r3, r0
 800198a:	461d      	mov	r5, r3
 800198c:	7a3b      	ldrb	r3, [r7, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fcc1 	bl	8001316 <xtime>
 8001994:	4603      	mov	r3, r0
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fcbd 	bl	8001316 <xtime>
 800199c:	4603      	mov	r3, r0
 800199e:	406b      	eors	r3, r5
 80019a0:	b2dd      	uxtb	r5, r3
 80019a2:	7a3b      	ldrb	r3, [r7, #8]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fcb6 	bl	8001316 <xtime>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fcb2 	bl	8001316 <xtime>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fcae 	bl	8001316 <xtime>
 80019ba:	4603      	mov	r3, r0
 80019bc:	406b      	eors	r3, r5
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4063      	eors	r3, r4
 80019c2:	b2d9      	uxtb	r1, r3
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	460a      	mov	r2, r1
 80019ce:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	f77f acc0 	ble.w	800135e <InvMixColumns+0xe>
  }
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}

080019e8 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e01d      	b.n	8001a32 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 80019f6:	2300      	movs	r3, #0
 80019f8:	73bb      	strb	r3, [r7, #14]
 80019fa:	e014      	b.n	8001a26 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 80019fc:	7bba      	ldrb	r2, [r7, #14]
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	440a      	add	r2, r1
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	7bba      	ldrb	r2, [r7, #14]
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <InvSubBytes+0x5c>)
 8001a12:	5c08      	ldrb	r0, [r1, r0]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	440a      	add	r2, r1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8001a20:	7bbb      	ldrb	r3, [r7, #14]
 8001a22:	3301      	adds	r3, #1
 8001a24:	73bb      	strb	r3, [r7, #14]
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d9e7      	bls.n	80019fc <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d9de      	bls.n	80019f6 <InvSubBytes+0xe>
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	08003c20 	.word	0x08003c20

08001a48 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7b5b      	ldrb	r3, [r3, #13]
 8001a54:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7a5a      	ldrb	r2, [r3, #9]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	795a      	ldrb	r2, [r3, #5]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	785a      	ldrb	r2, [r3, #1]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	789b      	ldrb	r3, [r3, #2]
 8001a78:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7a9a      	ldrb	r2, [r3, #10]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	799b      	ldrb	r3, [r3, #6]
 8001a8c:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7b9a      	ldrb	r2, [r3, #14]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	78db      	ldrb	r3, [r3, #3]
 8001aa0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	79da      	ldrb	r2, [r3, #7]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7ada      	ldrb	r2, [r3, #11]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7bda      	ldrb	r2, [r3, #15]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	73da      	strb	r2, [r3, #15]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <InvCipher>:
  AddRoundKey(Nr, state, RoundKey);
}

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	200a      	movs	r0, #10
 8001ade:	f7ff fbdf 	bl	80012a0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8001ae2:	2309      	movs	r3, #9
 8001ae4:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffae 	bl	8001a48 <InvShiftRows>
    InvSubBytes(state);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff7b 	bl	80019e8 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fbd1 	bl	80012a0 <AddRoundKey>
    if (round == 0) {
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fc23 	bl	8001350 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8001b10:	e7e9      	b.n	8001ae6 <InvCipher+0x1c>
      break;
 8001b12:	bf00      	nop
  }

}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	e010      	b.n	8001b4e <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	7819      	ldrb	r1, [r3, #0]
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	4403      	add	r3, r0
 8001b42:	404a      	eors	r2, r1
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b0f      	cmp	r3, #15
 8001b52:	d9eb      	bls.n	8001b2c <XorWithIv+0x10>
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <AES_CBC_decrypt_buffer>:
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
}

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b70:	e022      	b.n	8001bb8 <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f107 0414 	add.w	r4, r7, #20
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4619      	mov	r1, r3
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f7ff ff9f 	bl	8001aca <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	33b0      	adds	r3, #176	; 0xb0
 8001b90:	4619      	mov	r1, r3
 8001b92:	68b8      	ldr	r0, [r7, #8]
 8001b94:	f7ff ffc2 	bl	8001b1c <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	33b0      	adds	r3, #176	; 0xb0
 8001b9c:	461d      	mov	r5, r3
 8001b9e:	f107 0414 	add.w	r4, r7, #20
 8001ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba4:	6028      	str	r0, [r5, #0]
 8001ba6:	6069      	str	r1, [r5, #4]
 8001ba8:	60aa      	str	r2, [r5, #8]
 8001baa:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3310      	adds	r3, #16
 8001bb0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3d8      	bcc.n	8001b72 <AES_CBC_decrypt_buffer+0x12>
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	; 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd0:	f000 f9fa 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd4:	f000 f80e 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd8:	f000 f8c4 	bl	8001d64 <MX_GPIO_Init>
  MX_CAN_Init();
 8001bdc:	f000 f852 	bl	8001c84 <MX_CAN_Init>
  MX_CRC_Init();
 8001be0:	f000 f8ac 	bl	8001d3c <MX_CRC_Init>

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <main+0x24>)
 8001be6:	f000 fc33 	bl	8002450 <HAL_CAN_Start>

  BL_voidBootLoader_Init();
 8001bea:	f7fe fabd 	bl	8000168 <BL_voidBootLoader_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <main+0x22>
 8001bf0:	2000004c 	.word	0x2000004c

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b090      	sub	sp, #64	; 0x40
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	2228      	movs	r2, #40	; 0x28
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 ff46 	bl	8003a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c16:	2309      	movs	r3, #9
 8001c18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3c:	f107 0318 	add.w	r3, r7, #24
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 fb49 	bl	80032d8 <HAL_RCC_OscConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001c4c:	f000 f8d6 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c50:	230f      	movs	r3, #15
 8001c52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c54:	2302      	movs	r3, #2
 8001c56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fdb6 	bl	80037dc <HAL_RCC_ClockConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001c76:	f000 f8c1 	bl	8001dfc <Error_Handler>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	3740      	adds	r7, #64	; 0x40
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001c88:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <MX_CAN_Init+0xac>)
 8001c8a:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <MX_CAN_Init+0xb0>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <MX_CAN_Init+0xac>)
 8001c90:	2204      	movs	r2, #4
 8001c92:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <MX_CAN_Init+0xac>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <MX_CAN_Init+0xac>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <MX_CAN_Init+0xac>)
 8001ca2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ca6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_CAN_Init+0xac>)
 8001caa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cae:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_CAN_Init+0xac>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <MX_CAN_Init+0xac>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_CAN_Init+0xac>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <MX_CAN_Init+0xac>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_CAN_Init+0xac>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MX_CAN_Init+0xac>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <MX_CAN_Init+0xac>)
 8001cd6:	f000 f9f7 	bl	80020c8 <HAL_CAN_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001ce0:	f000 f88c 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	621a      	str	r2, [r3, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh = 0x050<<5;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001cf8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001cfc:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow = 0;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh = 0x050<<5;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001d06:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001d0a:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	61da      	str	r2, [r3, #28]
  canfilterconfig.SlaveStartFilterBank = 10;  // how many filters to assign to the CAN1 (master can)
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001d20:	220a      	movs	r2, #10
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <MX_CAN_Init+0xb4>)
 8001d26:	4802      	ldr	r0, [pc, #8]	; (8001d30 <MX_CAN_Init+0xac>)
 8001d28:	f000 fac9 	bl	80022be <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2000004c 	.word	0x2000004c
 8001d34:	40006400 	.word	0x40006400
 8001d38:	20000088 	.word	0x20000088

08001d3c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_CRC_Init+0x20>)
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <MX_CRC_Init+0x24>)
 8001d44:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_CRC_Init+0x20>)
 8001d48:	f000 fe99 	bl	8002a7e <HAL_CRC_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001d52:	f000 f853 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000074 	.word	0x20000074
 8001d60:	40023000 	.word	0x40023000

08001d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001d96:	f043 0320 	orr.w	r3, r3, #32
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_GPIO_Init+0x90>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <MX_GPIO_Init+0x94>)
 8001dc8:	f001 fa2c 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4619      	mov	r1, r3
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_GPIO_Init+0x94>)
 8001de6:	f001 f899 	bl	8002f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40011000 	.word	0x40011000

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <Error_Handler+0x8>
	...

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_MspInit+0x40>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_MspInit+0x40>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_MspInit+0x40>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_MspInit+0x40>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_MspInit+0x40>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	61d3      	str	r3, [r2, #28]
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_MspInit+0x40>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_CAN_MspInit+0x8c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d131      	bne.n	8001ed0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_CAN_MspInit+0x90>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	4a1a      	ldr	r2, [pc, #104]	; (8001edc <HAL_CAN_MspInit+0x90>)
 8001e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e76:	61d3      	str	r3, [r2, #28]
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_CAN_MspInit+0x90>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_CAN_MspInit+0x90>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_CAN_MspInit+0x90>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_CAN_MspInit+0x90>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <HAL_CAN_MspInit+0x94>)
 8001eb2:	f001 f833 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_CAN_MspInit+0x94>)
 8001ecc:	f001 f826 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40006400 	.word	0x40006400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_CRC_MspInit+0x34>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d10b      	bne.n	8001f0e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_CRC_MspInit+0x38>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_CRC_MspInit+0x38>)
 8001efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f00:	6153      	str	r3, [r2, #20]
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_CRC_MspInit+0x38>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	40023000 	.word	0x40023000
 8001f1c:	40021000 	.word	0x40021000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <NMI_Handler+0x4>

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f66:	f000 f893 	bl	8002090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
	...

08001f7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f7c:	f7ff fff7 	bl	8001f6e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f82:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f84:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f98:	4c09      	ldr	r4, [pc, #36]	; (8001fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f001 fd7d 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001faa:	f7ff fe0f 	bl	8001bcc <main>
  bx lr
 8001fae:	4770      	bx	lr
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001fb8:	08003d58 	.word	0x08003d58
  ldr r2, =_sbss
 8001fbc:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001fc0:	20000120 	.word	0x20000120

08001fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC1_2_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_Init+0x28>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_Init+0x28>)
 8001fd2:	f043 0310 	orr.w	r3, r3, #16
 8001fd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 fd1d 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fde:	200f      	movs	r0, #15
 8001fe0:	f000 f826 	bl	8002030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe4:	f7ff ff10 	bl	8001e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_DeInit+0x2c>)
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffe:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_DeInit+0x2c>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_DeInit+0x2c>)
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_DeInit+0x2c>)
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002014:	f000 f806 	bl	8002024 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x54>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x58>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002046:	fbb3 f3f1 	udiv	r3, r3, r1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd09 	bl	8002a66 <HAL_SYSTICK_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e00e      	b.n	800207c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0f      	cmp	r3, #15
 8002062:	d80a      	bhi.n	800207a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002064:	2200      	movs	r2, #0
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f000 fcdf 	bl	8002a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <HAL_InitTick+0x5c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000020 	.word	0x20000020
 8002088:	20000028 	.word	0x20000028
 800208c:	20000024 	.word	0x20000024

08002090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_IncTick+0x1c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_IncTick+0x20>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <HAL_IncTick+0x20>)
 80020a2:	6013      	str	r3, [r2, #0]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000028 	.word	0x20000028
 80020b0:	200000f8 	.word	0x200000f8

080020b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b02      	ldr	r3, [pc, #8]	; (80020c4 <HAL_GetTick+0x10>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	200000f8 	.word	0x200000f8

080020c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0ed      	b.n	80022b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff feb0 	bl	8001e4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fc:	f7ff ffda 	bl	80020b4 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002102:	e012      	b.n	800212a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002104:	f7ff ffd6 	bl	80020b4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d90b      	bls.n	800212a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0c5      	b.n	80022b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0e5      	beq.n	8002104 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0202 	bic.w	r2, r2, #2
 8002146:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002148:	f7ff ffb4 	bl	80020b4 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800214e:	e012      	b.n	8002176 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002150:	f7ff ffb0 	bl	80020b4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b0a      	cmp	r3, #10
 800215c:	d90b      	bls.n	8002176 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2205      	movs	r2, #5
 800216e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e09f      	b.n	80022b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e5      	bne.n	8002150 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7e1b      	ldrb	r3, [r3, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e007      	b.n	80021ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7e5b      	ldrb	r3, [r3, #25]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e007      	b.n	80021d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7e9b      	ldrb	r3, [r3, #26]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d108      	bne.n	80021f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0220 	orr.w	r2, r2, #32
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e007      	b.n	8002202 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0220 	bic.w	r2, r2, #32
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7edb      	ldrb	r3, [r3, #27]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0210 	bic.w	r2, r2, #16
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e007      	b.n	800222c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0210 	orr.w	r2, r2, #16
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7f1b      	ldrb	r3, [r3, #28]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d108      	bne.n	8002246 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0208 	orr.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e007      	b.n	8002256 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0208 	bic.w	r2, r2, #8
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7f5b      	ldrb	r3, [r3, #29]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d108      	bne.n	8002270 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0204 	orr.w	r2, r2, #4
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e007      	b.n	8002280 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0204 	bic.w	r2, r2, #4
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	ea42 0103 	orr.w	r1, r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80022be:	b480      	push	{r7}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d003      	beq.n	80022e4 <HAL_CAN_ConfigFilter+0x26>
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f040 80aa 	bne.w	8002438 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2201      	movs	r2, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d123      	bne.n	8002366 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	401a      	ands	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002340:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3248      	adds	r2, #72	; 0x48
 8002346:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800235c:	6979      	ldr	r1, [r7, #20]
 800235e:	3348      	adds	r3, #72	; 0x48
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d122      	bne.n	80023b4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	431a      	orrs	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800238e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3248      	adds	r2, #72	; 0x48
 8002394:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023aa:	6979      	ldr	r1, [r7, #20]
 80023ac:	3348      	adds	r3, #72	; 0x48
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023ce:	e007      	b.n	80023e0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	431a      	orrs	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023fa:	e007      	b.n	800240c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	431a      	orrs	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800242a:	f023 0201 	bic.w	r2, r3, #1
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e006      	b.n	8002446 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d12e      	bne.n	80024c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800247c:	f7ff fe1a 	bl	80020b4 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002482:	e012      	b.n	80024aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002484:	f7ff fe16 	bl	80020b4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b0a      	cmp	r3, #10
 8002490:	d90b      	bls.n	80024aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2205      	movs	r2, #5
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e012      	b.n	80024d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e5      	bne.n	8002484 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e006      	b.n	80024d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024f6:	7ffb      	ldrb	r3, [r7, #31]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d003      	beq.n	8002504 <HAL_CAN_AddTxMessage+0x2c>
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	f040 80ad 	bne.w	800265e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8095 	beq.w	800264e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	0e1b      	lsrs	r3, r3, #24
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800252e:	2201      	movs	r2, #1
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	6809      	ldr	r1, [r1, #0]
 800254e:	431a      	orrs	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3318      	adds	r3, #24
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	440b      	add	r3, r1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e00f      	b.n	800257c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002566:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800256c:	68f9      	ldr	r1, [r7, #12]
 800256e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002570:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3318      	adds	r3, #24
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	440b      	add	r3, r1
 800257a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3318      	adds	r3, #24
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	440b      	add	r3, r1
 800258c:	3304      	adds	r3, #4
 800258e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	7d1b      	ldrb	r3, [r3, #20]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d111      	bne.n	80025bc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3318      	adds	r3, #24
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	6811      	ldr	r1, [r2, #0]
 80025ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3318      	adds	r3, #24
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	440b      	add	r3, r1
 80025b8:	3304      	adds	r3, #4
 80025ba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3307      	adds	r3, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	061a      	lsls	r2, r3, #24
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3306      	adds	r3, #6
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	041b      	lsls	r3, r3, #16
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3305      	adds	r3, #5
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	4313      	orrs	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	3204      	adds	r2, #4
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	4610      	mov	r0, r2
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	6811      	ldr	r1, [r2, #0]
 80025e4:	ea43 0200 	orr.w	r2, r3, r0
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3303      	adds	r3, #3
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	061a      	lsls	r2, r3, #24
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3302      	adds	r3, #2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3301      	adds	r3, #1
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	4313      	orrs	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	4610      	mov	r0, r2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6811      	ldr	r1, [r2, #0]
 800261a:	ea43 0200 	orr.w	r2, r3, r0
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	440b      	add	r3, r1
 8002624:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002628:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3318      	adds	r3, #24
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	6811      	ldr	r1, [r2, #0]
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3318      	adds	r3, #24
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	440b      	add	r3, r1
 8002648:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e00e      	b.n	800266c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e006      	b.n	800266c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3724      	adds	r7, #36	; 0x24
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002676:	b480      	push	{r7}
 8002678:	b087      	sub	sp, #28
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3020 	ldrb.w	r3, [r3, #32]
 800268a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d003      	beq.n	800269a <HAL_CAN_GetRxMessage+0x24>
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	2b02      	cmp	r3, #2
 8002696:	f040 8103 	bne.w	80028a0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10e      	bne.n	80026be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d116      	bne.n	80026dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0f7      	b.n	80028ae <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d107      	bne.n	80026dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0e8      	b.n	80028ae <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	331b      	adds	r3, #27
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	4413      	add	r3, r2
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0204 	and.w	r2, r3, #4
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	331b      	adds	r3, #27
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	4413      	add	r3, r2
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0d5b      	lsrs	r3, r3, #21
 800270a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e00b      	b.n	800272c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	331b      	adds	r3, #27
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	4413      	add	r3, r2
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	08db      	lsrs	r3, r3, #3
 8002724:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	331b      	adds	r3, #27
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	4413      	add	r3, r2
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0202 	and.w	r2, r3, #2
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	331b      	adds	r3, #27
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	4413      	add	r3, r2
 800274e:	3304      	adds	r3, #4
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2208      	movs	r2, #8
 800275e:	611a      	str	r2, [r3, #16]
 8002760:	e00b      	b.n	800277a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	331b      	adds	r3, #27
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	331b      	adds	r3, #27
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	4413      	add	r3, r2
 8002786:	3304      	adds	r3, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	b2da      	uxtb	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	331b      	adds	r3, #27
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	4413      	add	r3, r2
 800279e:	3304      	adds	r3, #4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0a1a      	lsrs	r2, r3, #8
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0c1a      	lsrs	r2, r3, #16
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	3302      	adds	r3, #2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e1a      	lsrs	r2, r3, #24
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3303      	adds	r3, #3
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	3304      	adds	r3, #4
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0a1a      	lsrs	r2, r3, #8
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	3305      	adds	r3, #5
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	4413      	add	r3, r2
 800284a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0c1a      	lsrs	r2, r3, #16
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	3306      	adds	r3, #6
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4413      	add	r3, r2
 8002864:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	0e1a      	lsrs	r2, r3, #24
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	3307      	adds	r3, #7
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d108      	bne.n	800288c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0220 	orr.w	r2, r2, #32
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	e007      	b.n	800289c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0220 	orr.w	r2, r2, #32
 800289a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	e006      	b.n	80028ae <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	db0a      	blt.n	8002946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <__NVIC_SetPriority+0x4c>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	0112      	lsls	r2, r2, #4
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	440b      	add	r3, r1
 8002940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002944:	e00a      	b.n	800295c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <__NVIC_SetPriority+0x50>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3b04      	subs	r3, #4
 8002954:	0112      	lsls	r2, r2, #4
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	440b      	add	r3, r1
 800295a:	761a      	strb	r2, [r3, #24]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000e100 	.word	0xe000e100
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f1c3 0307 	rsb	r3, r3, #7
 800298a:	2b04      	cmp	r3, #4
 800298c:	bf28      	it	cs
 800298e:	2304      	movcs	r3, #4
 8002990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3304      	adds	r3, #4
 8002996:	2b06      	cmp	r3, #6
 8002998:	d902      	bls.n	80029a0 <NVIC_EncodePriority+0x30>
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3b03      	subs	r3, #3
 800299e:	e000      	b.n	80029a2 <NVIC_EncodePriority+0x32>
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	f04f 32ff 	mov.w	r2, #4294967295
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	401a      	ands	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	43d9      	mvns	r1, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	4313      	orrs	r3, r2
         );
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3724      	adds	r7, #36	; 0x24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff90 	bl	800291c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff49 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff5e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff90 	bl	8002970 <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5f 	bl	800291c <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff ffb0 	bl	80029d4 <SysTick_Config>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e00e      	b.n	8002aae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	795b      	ldrb	r3, [r3, #5]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fa1f 	bl	8001ee4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e00a      	b.n	8002af8 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	441a      	add	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3f0      	bcc.n	8002ae2 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002b0e:	693b      	ldr	r3, [r7, #16]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b36:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_FLASH_Program+0xd8>)
 8002b38:	7e1b      	ldrb	r3, [r3, #24]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_FLASH_Program+0x26>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e054      	b.n	8002bec <HAL_FLASH_Program+0xd0>
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_FLASH_Program+0xd8>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b4c:	f000 f8a8 	bl	8002ca0 <FLASH_WaitForLastOperation>
 8002b50:	4603      	mov	r3, r0
 8002b52:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d144      	bne.n	8002be4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002b60:	2301      	movs	r3, #1
 8002b62:	757b      	strb	r3, [r7, #21]
 8002b64:	e007      	b.n	8002b76 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d102      	bne.n	8002b72 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	757b      	strb	r3, [r7, #21]
 8002b70:	e001      	b.n	8002b76 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002b72:	2304      	movs	r3, #4
 8002b74:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	75bb      	strb	r3, [r7, #22]
 8002b7a:	e02d      	b.n	8002bd8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002b7c:	7dbb      	ldrb	r3, [r7, #22]
 8002b7e:	005a      	lsls	r2, r3, #1
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	eb02 0c03 	add.w	ip, r2, r3
 8002b86:	7dbb      	ldrb	r3, [r7, #22]
 8002b88:	0119      	lsls	r1, r3, #4
 8002b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b8e:	f1c1 0620 	rsb	r6, r1, #32
 8002b92:	f1a1 0020 	sub.w	r0, r1, #32
 8002b96:	fa22 f401 	lsr.w	r4, r2, r1
 8002b9a:	fa03 f606 	lsl.w	r6, r3, r6
 8002b9e:	4334      	orrs	r4, r6
 8002ba0:	fa23 f000 	lsr.w	r0, r3, r0
 8002ba4:	4304      	orrs	r4, r0
 8002ba6:	fa23 f501 	lsr.w	r5, r3, r1
 8002baa:	b2a3      	uxth	r3, r4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4660      	mov	r0, ip
 8002bb0:	f000 f85a 	bl	8002c68 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002bb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bb8:	f000 f872 	bl	8002ca0 <FLASH_WaitForLastOperation>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_FLASH_Program+0xdc>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	; (8002bf8 <HAL_FLASH_Program+0xdc>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d107      	bne.n	8002be2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002bd2:	7dbb      	ldrb	r3, [r7, #22]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	75bb      	strb	r3, [r7, #22]
 8002bd8:	7dba      	ldrb	r2, [r7, #22]
 8002bda:	7d7b      	ldrb	r3, [r7, #21]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d3cd      	bcc.n	8002b7c <HAL_FLASH_Program+0x60>
 8002be0:	e000      	b.n	8002be4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002be2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <HAL_FLASH_Program+0xd8>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	761a      	strb	r2, [r3, #24]

  return status;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf4:	20000100 	.word	0x20000100
 8002bf8:	40022000 	.word	0x40022000

08002bfc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_FLASH_Unlock+0x40>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_FLASH_Unlock+0x40>)
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_FLASH_Unlock+0x44>)
 8002c16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_FLASH_Unlock+0x40>)
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <HAL_FLASH_Unlock+0x48>)
 8002c1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <HAL_FLASH_Unlock+0x40>)
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	45670123 	.word	0x45670123
 8002c44:	cdef89ab 	.word	0xcdef89ab

08002c48 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_FLASH_Lock+0x1c>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_FLASH_Lock+0x1c>)
 8002c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c56:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000

08002c68 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <FLASH_Program_HalfWord+0x30>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <FLASH_Program_HalfWord+0x34>)
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <FLASH_Program_HalfWord+0x34>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	887a      	ldrh	r2, [r7, #2]
 8002c8a:	801a      	strh	r2, [r3, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000100 	.word	0x20000100
 8002c9c:	40022000 	.word	0x40022000

08002ca0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff fa04 	bl	80020b4 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cae:	e010      	b.n	8002cd2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d00c      	beq.n	8002cd2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <FLASH_WaitForLastOperation+0x2e>
 8002cbe:	f7ff f9f9 	bl	80020b4 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d201      	bcs.n	8002cd2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e025      	b.n	8002d1e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <FLASH_WaitForLastOperation+0x88>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e8      	bne.n	8002cb0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <FLASH_WaitForLastOperation+0x88>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <FLASH_WaitForLastOperation+0x88>)
 8002cec:	2220      	movs	r2, #32
 8002cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <FLASH_WaitForLastOperation+0x88>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <FLASH_WaitForLastOperation+0x88>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <FLASH_WaitForLastOperation+0x88>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d14:	f000 f80a 	bl	8002d2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40022000 	.word	0x40022000

08002d2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <FLASH_SetErrorCode+0x98>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <FLASH_SetErrorCode+0x9c>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <FLASH_SetErrorCode+0x9c>)
 8002d4c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f043 0310 	orr.w	r3, r3, #16
 8002d54:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <FLASH_SetErrorCode+0x98>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <FLASH_SetErrorCode+0x9c>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <FLASH_SetErrorCode+0x9c>)
 8002d6c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <FLASH_SetErrorCode+0x98>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <FLASH_SetErrorCode+0x9c>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <FLASH_SetErrorCode+0x9c>)
 8002d8c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <FLASH_SetErrorCode+0x98>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <FLASH_SetErrorCode+0x98>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f240 1201 	movw	r2, #257	; 0x101
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d106      	bne.n	8002db2 <FLASH_SetErrorCode+0x86>
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <FLASH_SetErrorCode+0x98>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <FLASH_SetErrorCode+0x98>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	61d3      	str	r3, [r2, #28]
}  
 8002db0:	e002      	b.n	8002db8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002db2:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <FLASH_SetErrorCode+0x98>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60d3      	str	r3, [r2, #12]
}  
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	20000100 	.word	0x20000100

08002dcc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_FLASHEx_Erase+0xd0>)
 8002de0:	7e1b      	ldrb	r3, [r3, #24]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_FLASHEx_Erase+0x1e>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e053      	b.n	8002e92 <HAL_FLASHEx_Erase+0xc6>
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_FLASHEx_Erase+0xd0>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d116      	bne.n	8002e26 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002df8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002dfc:	f7ff ff50 	bl	8002ca0 <FLASH_WaitForLastOperation>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d141      	bne.n	8002e8a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f000 f84c 	bl	8002ea4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e10:	f7ff ff46 	bl	8002ca0 <FLASH_WaitForLastOperation>
 8002e14:	4603      	mov	r3, r0
 8002e16:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_FLASHEx_Erase+0xd4>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <HAL_FLASHEx_Erase+0xd4>)
 8002e1e:	f023 0304 	bic.w	r3, r3, #4
 8002e22:	6113      	str	r3, [r2, #16]
 8002e24:	e031      	b.n	8002e8a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002e26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e2a:	f7ff ff39 	bl	8002ca0 <FLASH_WaitForLastOperation>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d12a      	bne.n	8002e8a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	e019      	b.n	8002e78 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002e44:	68b8      	ldr	r0, [r7, #8]
 8002e46:	f000 f849 	bl	8002edc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e4e:	f7ff ff27 	bl	8002ca0 <FLASH_WaitForLastOperation>
 8002e52:	4603      	mov	r3, r0
 8002e54:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_FLASHEx_Erase+0xd4>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <HAL_FLASHEx_Erase+0xd4>)
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	601a      	str	r2, [r3, #0]
            break;
 8002e6e:	e00c      	b.n	8002e8a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e76:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	029a      	lsls	r2, r3, #10
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4413      	add	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3dc      	bcc.n	8002e44 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_FLASHEx_Erase+0xd0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	761a      	strb	r2, [r3, #24]

  return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000100 	.word	0x20000100
 8002ea0:	40022000 	.word	0x40022000

08002ea4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <FLASH_MassErase+0x30>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <FLASH_MassErase+0x34>)
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <FLASH_MassErase+0x34>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <FLASH_MassErase+0x34>)
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <FLASH_MassErase+0x34>)
 8002ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	20000100 	.word	0x20000100
 8002ed8:	40022000 	.word	0x40022000

08002edc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <FLASH_PageErase+0x38>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <FLASH_PageErase+0x3c>)
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <FLASH_PageErase+0x3c>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <FLASH_PageErase+0x3c>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <FLASH_PageErase+0x3c>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <FLASH_PageErase+0x3c>)
 8002f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f06:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000100 	.word	0x20000100
 8002f18:	40022000 	.word	0x40022000

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b08b      	sub	sp, #44	; 0x2c
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f2e:	e169      	b.n	8003204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f30:	2201      	movs	r2, #1
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f040 8158 	bne.w	80031fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a9a      	ldr	r2, [pc, #616]	; (80031bc <HAL_GPIO_Init+0x2a0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d05e      	beq.n	8003016 <HAL_GPIO_Init+0xfa>
 8002f58:	4a98      	ldr	r2, [pc, #608]	; (80031bc <HAL_GPIO_Init+0x2a0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d875      	bhi.n	800304a <HAL_GPIO_Init+0x12e>
 8002f5e:	4a98      	ldr	r2, [pc, #608]	; (80031c0 <HAL_GPIO_Init+0x2a4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d058      	beq.n	8003016 <HAL_GPIO_Init+0xfa>
 8002f64:	4a96      	ldr	r2, [pc, #600]	; (80031c0 <HAL_GPIO_Init+0x2a4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d86f      	bhi.n	800304a <HAL_GPIO_Init+0x12e>
 8002f6a:	4a96      	ldr	r2, [pc, #600]	; (80031c4 <HAL_GPIO_Init+0x2a8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d052      	beq.n	8003016 <HAL_GPIO_Init+0xfa>
 8002f70:	4a94      	ldr	r2, [pc, #592]	; (80031c4 <HAL_GPIO_Init+0x2a8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d869      	bhi.n	800304a <HAL_GPIO_Init+0x12e>
 8002f76:	4a94      	ldr	r2, [pc, #592]	; (80031c8 <HAL_GPIO_Init+0x2ac>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d04c      	beq.n	8003016 <HAL_GPIO_Init+0xfa>
 8002f7c:	4a92      	ldr	r2, [pc, #584]	; (80031c8 <HAL_GPIO_Init+0x2ac>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d863      	bhi.n	800304a <HAL_GPIO_Init+0x12e>
 8002f82:	4a92      	ldr	r2, [pc, #584]	; (80031cc <HAL_GPIO_Init+0x2b0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d046      	beq.n	8003016 <HAL_GPIO_Init+0xfa>
 8002f88:	4a90      	ldr	r2, [pc, #576]	; (80031cc <HAL_GPIO_Init+0x2b0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d85d      	bhi.n	800304a <HAL_GPIO_Init+0x12e>
 8002f8e:	2b12      	cmp	r3, #18
 8002f90:	d82a      	bhi.n	8002fe8 <HAL_GPIO_Init+0xcc>
 8002f92:	2b12      	cmp	r3, #18
 8002f94:	d859      	bhi.n	800304a <HAL_GPIO_Init+0x12e>
 8002f96:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <HAL_GPIO_Init+0x80>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08003017 	.word	0x08003017
 8002fa0:	08002ff1 	.word	0x08002ff1
 8002fa4:	08003003 	.word	0x08003003
 8002fa8:	08003045 	.word	0x08003045
 8002fac:	0800304b 	.word	0x0800304b
 8002fb0:	0800304b 	.word	0x0800304b
 8002fb4:	0800304b 	.word	0x0800304b
 8002fb8:	0800304b 	.word	0x0800304b
 8002fbc:	0800304b 	.word	0x0800304b
 8002fc0:	0800304b 	.word	0x0800304b
 8002fc4:	0800304b 	.word	0x0800304b
 8002fc8:	0800304b 	.word	0x0800304b
 8002fcc:	0800304b 	.word	0x0800304b
 8002fd0:	0800304b 	.word	0x0800304b
 8002fd4:	0800304b 	.word	0x0800304b
 8002fd8:	0800304b 	.word	0x0800304b
 8002fdc:	0800304b 	.word	0x0800304b
 8002fe0:	08002ff9 	.word	0x08002ff9
 8002fe4:	0800300d 	.word	0x0800300d
 8002fe8:	4a79      	ldr	r2, [pc, #484]	; (80031d0 <HAL_GPIO_Init+0x2b4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fee:	e02c      	b.n	800304a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	623b      	str	r3, [r7, #32]
          break;
 8002ff6:	e029      	b.n	800304c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	623b      	str	r3, [r7, #32]
          break;
 8003000:	e024      	b.n	800304c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	3308      	adds	r3, #8
 8003008:	623b      	str	r3, [r7, #32]
          break;
 800300a:	e01f      	b.n	800304c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	330c      	adds	r3, #12
 8003012:	623b      	str	r3, [r7, #32]
          break;
 8003014:	e01a      	b.n	800304c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800301e:	2304      	movs	r3, #4
 8003020:	623b      	str	r3, [r7, #32]
          break;
 8003022:	e013      	b.n	800304c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800302c:	2308      	movs	r3, #8
 800302e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	611a      	str	r2, [r3, #16]
          break;
 8003036:	e009      	b.n	800304c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003038:	2308      	movs	r3, #8
 800303a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	615a      	str	r2, [r3, #20]
          break;
 8003042:	e003      	b.n	800304c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003044:	2300      	movs	r3, #0
 8003046:	623b      	str	r3, [r7, #32]
          break;
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x130>
          break;
 800304a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2bff      	cmp	r3, #255	; 0xff
 8003050:	d801      	bhi.n	8003056 <HAL_GPIO_Init+0x13a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	e001      	b.n	800305a <HAL_GPIO_Init+0x13e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2bff      	cmp	r3, #255	; 0xff
 8003060:	d802      	bhi.n	8003068 <HAL_GPIO_Init+0x14c>
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	e002      	b.n	800306e <HAL_GPIO_Init+0x152>
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	3b08      	subs	r3, #8
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	210f      	movs	r1, #15
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	401a      	ands	r2, r3
 8003080:	6a39      	ldr	r1, [r7, #32]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	431a      	orrs	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80b1 	beq.w	80031fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800309c:	4b4d      	ldr	r3, [pc, #308]	; (80031d4 <HAL_GPIO_Init+0x2b8>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	4a4c      	ldr	r2, [pc, #304]	; (80031d4 <HAL_GPIO_Init+0x2b8>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6193      	str	r3, [r2, #24]
 80030a8:	4b4a      	ldr	r3, [pc, #296]	; (80031d4 <HAL_GPIO_Init+0x2b8>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030b4:	4a48      	ldr	r2, [pc, #288]	; (80031d8 <HAL_GPIO_Init+0x2bc>)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4013      	ands	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a40      	ldr	r2, [pc, #256]	; (80031dc <HAL_GPIO_Init+0x2c0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d013      	beq.n	8003108 <HAL_GPIO_Init+0x1ec>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a3f      	ldr	r2, [pc, #252]	; (80031e0 <HAL_GPIO_Init+0x2c4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00d      	beq.n	8003104 <HAL_GPIO_Init+0x1e8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3e      	ldr	r2, [pc, #248]	; (80031e4 <HAL_GPIO_Init+0x2c8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <HAL_GPIO_Init+0x1e4>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3d      	ldr	r2, [pc, #244]	; (80031e8 <HAL_GPIO_Init+0x2cc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_GPIO_Init+0x1e0>
 80030f8:	2303      	movs	r3, #3
 80030fa:	e006      	b.n	800310a <HAL_GPIO_Init+0x1ee>
 80030fc:	2304      	movs	r3, #4
 80030fe:	e004      	b.n	800310a <HAL_GPIO_Init+0x1ee>
 8003100:	2302      	movs	r3, #2
 8003102:	e002      	b.n	800310a <HAL_GPIO_Init+0x1ee>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_GPIO_Init+0x1ee>
 8003108:	2300      	movs	r3, #0
 800310a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310c:	f002 0203 	and.w	r2, r2, #3
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	4093      	lsls	r3, r2
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800311a:	492f      	ldr	r1, [pc, #188]	; (80031d8 <HAL_GPIO_Init+0x2bc>)
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	492c      	ldr	r1, [pc, #176]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	608b      	str	r3, [r1, #8]
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	43db      	mvns	r3, r3
 800314a:	4928      	ldr	r1, [pc, #160]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 800314c:	4013      	ands	r3, r2
 800314e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d006      	beq.n	800316a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800315c:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	4922      	ldr	r1, [pc, #136]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	60cb      	str	r3, [r1, #12]
 8003168:	e006      	b.n	8003178 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	43db      	mvns	r3, r3
 8003172:	491e      	ldr	r1, [pc, #120]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 8003174:	4013      	ands	r3, r2
 8003176:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4918      	ldr	r1, [pc, #96]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	e006      	b.n	80031a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	43db      	mvns	r3, r3
 800319a:	4914      	ldr	r1, [pc, #80]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 800319c:	4013      	ands	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d021      	beq.n	80031f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	490e      	ldr	r1, [pc, #56]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e021      	b.n	80031fe <HAL_GPIO_Init+0x2e2>
 80031ba:	bf00      	nop
 80031bc:	10320000 	.word	0x10320000
 80031c0:	10310000 	.word	0x10310000
 80031c4:	10220000 	.word	0x10220000
 80031c8:	10210000 	.word	0x10210000
 80031cc:	10120000 	.word	0x10120000
 80031d0:	10110000 	.word	0x10110000
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40010800 	.word	0x40010800
 80031e0:	40010c00 	.word	0x40010c00
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40011400 	.word	0x40011400
 80031ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_GPIO_Init+0x304>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	4909      	ldr	r1, [pc, #36]	; (8003220 <HAL_GPIO_Init+0x304>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	3301      	adds	r3, #1
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	f47f ae8e 	bne.w	8002f30 <HAL_GPIO_Init+0x14>
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	372c      	adds	r7, #44	; 0x2c
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40010400 	.word	0x40010400

08003224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
 8003230:	4613      	mov	r3, r2
 8003232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003234:	787b      	ldrb	r3, [r7, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003240:	e003      	b.n	800324a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	041a      	lsls	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	611a      	str	r2, [r3, #16]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e034      	b.n	80032d0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800326e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f245 5255 	movw	r2, #21845	; 0x5555
 8003278:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6852      	ldr	r2, [r2, #4]
 8003282:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6892      	ldr	r2, [r2, #8]
 800328c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800328e:	f7fe ff11 	bl	80020b4 <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003294:	e00f      	b.n	80032b6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003296:	f7fe ff0d 	bl	80020b4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b27      	cmp	r3, #39	; 0x27
 80032a2:	d908      	bls.n	80032b6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e00c      	b.n	80032d0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e8      	bne.n	8003296 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80032cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e272      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8087 	beq.w	8003406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f8:	4b92      	ldr	r3, [pc, #584]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b04      	cmp	r3, #4
 8003302:	d00c      	beq.n	800331e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003304:	4b8f      	ldr	r3, [pc, #572]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d112      	bne.n	8003336 <HAL_RCC_OscConfig+0x5e>
 8003310:	4b8c      	ldr	r3, [pc, #560]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d10b      	bne.n	8003336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4b89      	ldr	r3, [pc, #548]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06c      	beq.n	8003404 <HAL_RCC_OscConfig+0x12c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d168      	bne.n	8003404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e24c      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x76>
 8003340:	4b80      	ldr	r3, [pc, #512]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a7f      	ldr	r2, [pc, #508]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e02e      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x98>
 8003356:	4b7b      	ldr	r3, [pc, #492]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7a      	ldr	r2, [pc, #488]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 800335c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b78      	ldr	r3, [pc, #480]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a77      	ldr	r2, [pc, #476]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0xbc>
 800337a:	4b72      	ldr	r3, [pc, #456]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a71      	ldr	r2, [pc, #452]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xd4>
 8003394:	4b6b      	ldr	r3, [pc, #428]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6a      	ldr	r2, [pc, #424]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b68      	ldr	r3, [pc, #416]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a67      	ldr	r2, [pc, #412]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe fe7e 	bl	80020b4 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe fe7a 	bl	80020b4 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e200      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b5d      	ldr	r3, [pc, #372]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xe4>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fe6a 	bl	80020b4 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe fe66 	bl	80020b4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1ec      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x10c>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d063      	beq.n	80034da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003412:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800341e:	4b49      	ldr	r3, [pc, #292]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x18c>
 800342a:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b43      	ldr	r3, [pc, #268]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x176>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1c0      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4939      	ldr	r1, [pc, #228]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e03a      	b.n	80034da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fe fe1f 	bl	80020b4 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347a:	f7fe fe1b 	bl	80020b4 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1a1      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4927      	ldr	r1, [pc, #156]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fdfe 	bl	80020b4 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe fdfa 	bl	80020b4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e180      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d03a      	beq.n	800355c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d019      	beq.n	8003522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b17      	ldr	r3, [pc, #92]	; (800354c <HAL_RCC_OscConfig+0x274>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f4:	f7fe fdde 	bl	80020b4 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fdda 	bl	80020b4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e160      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_RCC_OscConfig+0x26c>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800351a:	2001      	movs	r0, #1
 800351c:	f000 fa9c 	bl	8003a58 <RCC_Delay>
 8003520:	e01c      	b.n	800355c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_RCC_OscConfig+0x274>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fe fdc4 	bl	80020b4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352e:	e00f      	b.n	8003550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003530:	f7fe fdc0 	bl	80020b4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d908      	bls.n	8003550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e146      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	42420000 	.word	0x42420000
 800354c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003550:	4b92      	ldr	r3, [pc, #584]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e9      	bne.n	8003530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80a6 	beq.w	80036b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b8b      	ldr	r3, [pc, #556]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4a87      	ldr	r2, [pc, #540]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003584:	61d3      	str	r3, [r2, #28]
 8003586:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003592:	2301      	movs	r3, #1
 8003594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b82      	ldr	r3, [pc, #520]	; (80037a0 <HAL_RCC_OscConfig+0x4c8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d118      	bne.n	80035d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a2:	4b7f      	ldr	r3, [pc, #508]	; (80037a0 <HAL_RCC_OscConfig+0x4c8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7e      	ldr	r2, [pc, #504]	; (80037a0 <HAL_RCC_OscConfig+0x4c8>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ae:	f7fe fd81 	bl	80020b4 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe fd7d 	bl	80020b4 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b64      	cmp	r3, #100	; 0x64
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e103      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_OscConfig+0x4c8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x312>
 80035dc:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4a6e      	ldr	r2, [pc, #440]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6213      	str	r3, [r2, #32]
 80035e8:	e02d      	b.n	8003646 <HAL_RCC_OscConfig+0x36e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x334>
 80035f2:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4a69      	ldr	r2, [pc, #420]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6213      	str	r3, [r2, #32]
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4a66      	ldr	r2, [pc, #408]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	e01c      	b.n	8003646 <HAL_RCC_OscConfig+0x36e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b05      	cmp	r3, #5
 8003612:	d10c      	bne.n	800362e <HAL_RCC_OscConfig+0x356>
 8003614:	4b61      	ldr	r3, [pc, #388]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	4a60      	ldr	r2, [pc, #384]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	6213      	str	r3, [r2, #32]
 8003620:	4b5e      	ldr	r3, [pc, #376]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a5d      	ldr	r2, [pc, #372]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	e00b      	b.n	8003646 <HAL_RCC_OscConfig+0x36e>
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	4a5a      	ldr	r2, [pc, #360]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6213      	str	r3, [r2, #32]
 800363a:	4b58      	ldr	r3, [pc, #352]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	4a57      	ldr	r2, [pc, #348]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d015      	beq.n	800367a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7fe fd31 	bl	80020b4 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fe fd2d 	bl	80020b4 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0b1      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ee      	beq.n	8003656 <HAL_RCC_OscConfig+0x37e>
 8003678:	e014      	b.n	80036a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367a:	f7fe fd1b 	bl	80020b4 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe fd17 	bl	80020b4 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e09b      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	4b40      	ldr	r3, [pc, #256]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1ee      	bne.n	8003682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d105      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036aa:	4b3c      	ldr	r3, [pc, #240]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	4a3b      	ldr	r2, [pc, #236]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8087 	beq.w	80037ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c0:	4b36      	ldr	r3, [pc, #216]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d061      	beq.n	8003790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d146      	bne.n	8003762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d4:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <HAL_RCC_OscConfig+0x4cc>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fe fceb 	bl	80020b4 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fe fce7 	bl	80020b4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e06d      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f0      	bne.n	80036e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003708:	d108      	bne.n	800371c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4921      	ldr	r1, [pc, #132]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a19      	ldr	r1, [r3, #32]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	430b      	orrs	r3, r1
 800372e:	491b      	ldr	r1, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCC_OscConfig+0x4cc>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe fcbb 	bl	80020b4 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fe fcb7 	bl	80020b4 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e03d      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x46a>
 8003760:	e035      	b.n	80037ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_RCC_OscConfig+0x4cc>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe fca4 	bl	80020b4 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fe fca0 	bl	80020b4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e026      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_OscConfig+0x4c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x498>
 800378e:	e01e      	b.n	80037ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e019      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
 800379c:	40021000 	.word	0x40021000
 80037a0:	40007000 	.word	0x40007000
 80037a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x500>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000

080037dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0d0      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b6a      	ldr	r3, [pc, #424]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d910      	bls.n	8003820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b67      	ldr	r3, [pc, #412]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 0207 	bic.w	r2, r3, #7
 8003806:	4965      	ldr	r1, [pc, #404]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b63      	ldr	r3, [pc, #396]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0b8      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d020      	beq.n	800386e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003838:	4b59      	ldr	r3, [pc, #356]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003850:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800385a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	494d      	ldr	r1, [pc, #308]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d040      	beq.n	80038fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d115      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e07f      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e073      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	4b3d      	ldr	r3, [pc, #244]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06b      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4936      	ldr	r1, [pc, #216]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038cc:	f7fe fbf2 	bl	80020b4 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fe fbee 	bl	80020b4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e053      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d210      	bcs.n	800392c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b24      	ldr	r3, [pc, #144]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 0207 	bic.w	r2, r3, #7
 8003912:	4922      	ldr	r1, [pc, #136]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e032      	b.n	8003992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003938:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4916      	ldr	r1, [pc, #88]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	490e      	ldr	r1, [pc, #56]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800396a:	f000 f821 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 800396e:	4602      	mov	r2, r0
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	490a      	ldr	r1, [pc, #40]	; (80039a4 <HAL_RCC_ClockConfig+0x1c8>)
 800397c:	5ccb      	ldrb	r3, [r1, r3]
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_RCC_ClockConfig+0x1d0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fb50 	bl	8002030 <HAL_InitTick>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40022000 	.word	0x40022000
 80039a0:	40021000 	.word	0x40021000
 80039a4:	08003d2c 	.word	0x08003d2c
 80039a8:	20000020 	.word	0x20000020
 80039ac:	20000024 	.word	0x20000024

080039b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	2300      	movs	r3, #0
 80039c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x94>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0x30>
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d003      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x36>
 80039de:	e027      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x98>)
 80039e2:	613b      	str	r3, [r7, #16]
      break;
 80039e4:	e027      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	0c9b      	lsrs	r3, r3, #18
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
 80039f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d010      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0c5b      	lsrs	r3, r3, #17
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a0d      	ldr	r2, [pc, #52]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a12:	fb03 f202 	mul.w	r2, r3, r2
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e004      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a24:	fb02 f303 	mul.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	613b      	str	r3, [r7, #16]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a32:	613b      	str	r3, [r7, #16]
      break;
 8003a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a36:	693b      	ldr	r3, [r7, #16]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	007a1200 	.word	0x007a1200
 8003a4c:	08003d3c 	.word	0x08003d3c
 8003a50:	08003d4c 	.word	0x08003d4c
 8003a54:	003d0900 	.word	0x003d0900

08003a58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <RCC_Delay+0x34>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <RCC_Delay+0x38>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	0a5b      	lsrs	r3, r3, #9
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a74:	bf00      	nop
  }
  while (Delay --);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1e5a      	subs	r2, r3, #1
 8003a7a:	60fa      	str	r2, [r7, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f9      	bne.n	8003a74 <RCC_Delay+0x1c>
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	20000020 	.word	0x20000020
 8003a90:	10624dd3 	.word	0x10624dd3

08003a94 <memset>:
 8003a94:	4603      	mov	r3, r0
 8003a96:	4402      	add	r2, r0
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <memset+0xa>
 8003a9c:	4770      	bx	lr
 8003a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003aa2:	e7f9      	b.n	8003a98 <memset+0x4>

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	4d0c      	ldr	r5, [pc, #48]	; (8003adc <__libc_init_array+0x38>)
 8003aaa:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	f000 f828 	bl	8003b08 <_init>
 8003ab8:	2600      	movs	r6, #0
 8003aba:	4d0a      	ldr	r5, [pc, #40]	; (8003ae4 <__libc_init_array+0x40>)
 8003abc:	4c0a      	ldr	r4, [pc, #40]	; (8003ae8 <__libc_init_array+0x44>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08003d50 	.word	0x08003d50
 8003ae0:	08003d50 	.word	0x08003d50
 8003ae4:	08003d50 	.word	0x08003d50
 8003ae8:	08003d54 	.word	0x08003d54

08003aec <memcpy>:
 8003aec:	440a      	add	r2, r1
 8003aee:	4291      	cmp	r1, r2
 8003af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003af4:	d100      	bne.n	8003af8 <memcpy+0xc>
 8003af6:	4770      	bx	lr
 8003af8:	b510      	push	{r4, lr}
 8003afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003afe:	4291      	cmp	r1, r2
 8003b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b04:	d1f9      	bne.n	8003afa <memcpy+0xe>
 8003b06:	bd10      	pop	{r4, pc}

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
