
BootLoader_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001860  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800196c  0800196c  0001196c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001990  08001990  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001990  08001990  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001990  08001990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001990  08001990  00011990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001994  08001994  00011994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080019a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080019a4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003037  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000114c  00000000  00000000  000230af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000460  00000000  00000000  00024200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000337  00000000  00000000  00024660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015c69  00000000  00000000  00024997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005490  00000000  00000000  0003a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c2e5  00000000  00000000  0003fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f00  00000000  00000000  000bbd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000bcc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001954 	.word	0x08001954

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001954 	.word	0x08001954

0800014c <MFPEC_u8ProgramHalfWordFlash>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

void MFPEC_u8ProgramHalfWordFlash(uint32 Copy_u32Address, uint16 Copy_u16Data)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	// Check that no main Flash memory operation is ongoing.
   while(GET_BIT(FPEC->SR, BSY) == SET);
 8000158:	bf00      	nop
 800015a:	4b1d      	ldr	r3, [pc, #116]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 800015c:	68db      	ldr	r3, [r3, #12]
 800015e:	f003 0301 	and.w	r3, r3, #1
 8000162:	2b01      	cmp	r3, #1
 8000164:	d0f9      	beq.n	800015a <MFPEC_u8ProgramHalfWordFlash+0xe>
   // Check if the flash locked or not.
   if(GET_BIT(FPEC->CR, LOCK) == SET)
 8000166:	4b1a      	ldr	r3, [pc, #104]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 8000168:	691b      	ldr	r3, [r3, #16]
 800016a:	09db      	lsrs	r3, r3, #7
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b01      	cmp	r3, #1
 8000172:	d105      	bne.n	8000180 <MFPEC_u8ProgramHalfWordFlash+0x34>
   {
      // Perform Unlock Sequence To Unlock FPEC Peripheral.
      FPEC->KEYR = FPEC_KEY_1;
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 8000176:	4a17      	ldr	r2, [pc, #92]	; (80001d4 <MFPEC_u8ProgramHalfWordFlash+0x88>)
 8000178:	605a      	str	r2, [r3, #4]
      FPEC->KEYR = FPEC_KEY_2;
 800017a:	4b15      	ldr	r3, [pc, #84]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 800017c:	4a16      	ldr	r2, [pc, #88]	; (80001d8 <MFPEC_u8ProgramHalfWordFlash+0x8c>)
 800017e:	605a      	str	r2, [r3, #4]
   }
   // Set the PG bit in the FLASH_CR register.
   SET_BIT_REG(FPEC->CR, PG);
 8000180:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 8000182:	691b      	ldr	r3, [r3, #16]
 8000184:	4a12      	ldr	r2, [pc, #72]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6113      	str	r3, [r2, #16]
   // Perform the data write (half-word) at the desired address.
   *((volatile uint16*)(Copy_u32Address)) = Copy_u16Data;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	887a      	ldrh	r2, [r7, #2]
 8000190:	801a      	strh	r2, [r3, #0]
   // Wait for the BSY bit to be reset.
   while(GET_BIT(FPEC->SR, BSY) == SET);
 8000192:	bf00      	nop
 8000194:	4b0e      	ldr	r3, [pc, #56]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 8000196:	68db      	ldr	r3, [r3, #12]
 8000198:	f003 0301 	and.w	r3, r3, #1
 800019c:	2b01      	cmp	r3, #1
 800019e:	d0f9      	beq.n	8000194 <MFPEC_u8ProgramHalfWordFlash+0x48>
   // EOP
   SET_BIT_REG(FPEC->SR, EOP);
 80001a0:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 80001a2:	68db      	ldr	r3, [r3, #12]
 80001a4:	4a0a      	ldr	r2, [pc, #40]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 80001a6:	f043 0320 	orr.w	r3, r3, #32
 80001aa:	60d3      	str	r3, [r2, #12]
   CLR_BIT_REG(FPEC->CR, PG);
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 80001ae:	691b      	ldr	r3, [r3, #16]
 80001b0:	4a07      	ldr	r2, [pc, #28]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 80001b2:	f023 0301 	bic.w	r3, r3, #1
 80001b6:	6113      	str	r3, [r2, #16]
   SET_BIT_REG(FPEC->CR, LOCK);
 80001b8:	4b05      	ldr	r3, [pc, #20]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 80001ba:	691b      	ldr	r3, [r3, #16]
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <MFPEC_u8ProgramHalfWordFlash+0x84>)
 80001be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001c2:	6113      	str	r3, [r2, #16]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	40022000 	.word	0x40022000
 80001d4:	45670123 	.word	0x45670123
 80001d8:	cdef89ab 	.word	0xcdef89ab

080001dc <MFPEC_u8ProgramOneWordFlash>:

uint8 MFPEC_u8ProgramOneWordFlash(uint32 Copy_u32Address, uint32 Copy_u32Data)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b086      	sub	sp, #24
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	6039      	str	r1, [r7, #0]
	 uint32  Local_u32StoredData = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]
	 uint32 Local_u32Address = Copy_u32Address;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	613b      	str	r3, [r7, #16]
	 uint16 Local_u16LeastHalfWord = (uint16)(FPEC_CATCH_LEAST_HALF_WORD)  & (Copy_u32Data);
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	81fb      	strh	r3, [r7, #14]
	 uint16 Local_u16MostHalfWord  = (uint16)(((FPEC_CATCH_MOST_HALF_WORD) & (Copy_u32Data)) >> TWO_BYTES_IN_BITS);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	0c1b      	lsrs	r3, r3, #16
 80001f6:	81bb      	strh	r3, [r7, #12]
	 // Check that no main Flash memory operation is ongoing.
	 MFPEC_u8ProgramHalfWordFlash(Copy_u32Address, Local_u16LeastHalfWord);
 80001f8:	89fb      	ldrh	r3, [r7, #14]
 80001fa:	4619      	mov	r1, r3
 80001fc:	6878      	ldr	r0, [r7, #4]
 80001fe:	f7ff ffa5 	bl	800014c <MFPEC_u8ProgramHalfWordFlash>
	 MFPEC_u8ProgramHalfWordFlash(Copy_u32Address + TWO_BYTE, Local_u16MostHalfWord);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3302      	adds	r3, #2
 8000206:	89ba      	ldrh	r2, [r7, #12]
 8000208:	4611      	mov	r1, r2
 800020a:	4618      	mov	r0, r3
 800020c:	f7ff ff9e 	bl	800014c <MFPEC_u8ProgramHalfWordFlash>
	 Local_u32StoredData = *((volatile uint16*)(Local_u32Address));
 8000210:	693b      	ldr	r3, [r7, #16]
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	b29b      	uxth	r3, r3
 8000216:	617b      	str	r3, [r7, #20]
}
 8000218:	bf00      	nop
 800021a:	4618      	mov	r0, r3
 800021c:	3718      	adds	r7, #24
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MFPEC_voidErasePage>:
   }
   SET_BIT_REG(FPEC->CR, LOCK);
}

void MFPEC_voidErasePage(uint16 Copy_u16PageNumber)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]
	SET_BIT_REG(FPEC->CR,LOCK);
 800022e:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 8000230:	691b      	ldr	r3, [r3, #16]
 8000232:	4a24      	ldr	r2, [pc, #144]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 8000234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000238:	6113      	str	r3, [r2, #16]
   // Check that no main Flash memory operation is ongoing.
   while(GET_BIT(FPEC->SR, BSY) == SET);
 800023a:	bf00      	nop
 800023c:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	f003 0301 	and.w	r3, r3, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	d0f9      	beq.n	800023c <MFPEC_voidErasePage+0x18>
   // Check if the flash locked or not.
   if(GET_BIT(FPEC->CR, LOCK) == SET)
 8000248:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 800024a:	691b      	ldr	r3, [r3, #16]
 800024c:	09db      	lsrs	r3, r3, #7
 800024e:	f003 0301 	and.w	r3, r3, #1
 8000252:	2b01      	cmp	r3, #1
 8000254:	d105      	bne.n	8000262 <MFPEC_voidErasePage+0x3e>
   {
      // Perform Unlock Sequence To Unlock FPEC Peripheral.
      FPEC->KEYR = FPEC_KEY_1;
 8000256:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 8000258:	4a1b      	ldr	r2, [pc, #108]	; (80002c8 <MFPEC_voidErasePage+0xa4>)
 800025a:	605a      	str	r2, [r3, #4]
      FPEC->KEYR = FPEC_KEY_2;
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 800025e:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <MFPEC_voidErasePage+0xa8>)
 8000260:	605a      	str	r2, [r3, #4]
   }
   // Set the PER bit in the FLASH_CR register to erase page.
   SET_BIT_REG(FPEC->CR, PER);
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 8000264:	691b      	ldr	r3, [r3, #16]
 8000266:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 8000268:	f043 0302 	orr.w	r3, r3, #2
 800026c:	6113      	str	r3, [r2, #16]
   // Program the FLASH_AR register to select a page to erase.
   FPEC->AR = FLASH_START_ADDRESS + (uint32)(Copy_u16PageNumber * PAGE_SIZE);
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	029b      	lsls	r3, r3, #10
 8000272:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 8000274:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000278:	6153      	str	r3, [r2, #20]
   // Set the STRT bit in the FLASH_CR register to start erase operation.
   SET_BIT_REG(FPEC->CR, STRT);
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 800027c:	691b      	ldr	r3, [r3, #16]
 800027e:	4a11      	ldr	r2, [pc, #68]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 8000280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000284:	6113      	str	r3, [r2, #16]
   /*Wait for the BSY bit to be reset*/
   while(GET_BIT(FPEC->SR, BSY) == SET);
 8000286:	bf00      	nop
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	2b01      	cmp	r3, #1
 8000292:	d0f9      	beq.n	8000288 <MFPEC_voidErasePage+0x64>
   // EOP
   SET_BIT_REG(FPEC->SR, EOP);
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 800029a:	f043 0320 	orr.w	r3, r3, #32
 800029e:	60d3      	str	r3, [r2, #12]
   CLR_BIT_REG(FPEC->CR, PER);
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 80002a2:	691b      	ldr	r3, [r3, #16]
 80002a4:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 80002a6:	f023 0302 	bic.w	r3, r3, #2
 80002aa:	6113      	str	r3, [r2, #16]
   SET_BIT_REG(FPEC->CR, LOCK);
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <MFPEC_voidErasePage+0xa0>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6113      	str	r3, [r2, #16]
}
 80002b8:	bf00      	nop
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40022000 	.word	0x40022000
 80002c8:	45670123 	.word	0x45670123
 80002cc:	cdef89ab 	.word	0xcdef89ab

080002d0 <bootloaderInit>:

//=====================INIT Bootloader======================//
AppSelection App;

void bootloaderInit()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_RESET)
 80002d6:	2101      	movs	r1, #1
 80002d8:	483b      	ldr	r0, [pc, #236]	; (80003c8 <bootloaderInit+0xf8>)
 80002da:	f000 fe67 	bl	8000fac <HAL_GPIO_ReadPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d103      	bne.n	80002ec <bootloaderInit+0x1c>
	{
		App = App1;
 80002e4:	4b39      	ldr	r3, [pc, #228]	; (80003cc <bootloaderInit+0xfc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
 80002ea:	e002      	b.n	80002f2 <bootloaderInit+0x22>
	}
	else
	{
		App = App2;
 80002ec:	4b37      	ldr	r3, [pc, #220]	; (80003cc <bootloaderInit+0xfc>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	701a      	strb	r2, [r3, #0]
	}

	if(App == App1)
 80002f2:	4b36      	ldr	r3, [pc, #216]	; (80003cc <bootloaderInit+0xfc>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d12d      	bne.n	8000356 <bootloaderInit+0x86>
	{
		MFPEC_voidErasePage(48);
 80002fa:	2030      	movs	r0, #48	; 0x30
 80002fc:	f7ff ff92 	bl	8000224 <MFPEC_voidErasePage>
		MFPEC_u8ProgramOneWordFlash(0x0800C000,0x12345678);
 8000300:	4933      	ldr	r1, [pc, #204]	; (80003d0 <bootloaderInit+0x100>)
 8000302:	4834      	ldr	r0, [pc, #208]	; (80003d4 <bootloaderInit+0x104>)
 8000304:	f7ff ff6a 	bl	80001dc <MFPEC_u8ProgramOneWordFlash>
		uint8_t readataEmpty_Counter = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	71fb      	strb	r3, [r7, #7]
		for(uint8_t i = 0; i < 10 ;i++)
 800030c:	2300      	movs	r3, #0
 800030e:	71bb      	strb	r3, [r7, #6]
 8000310:	e012      	b.n	8000338 <bootloaderInit+0x68>
		{
			if(readData(APP1_ADDRESS_START + (i*4)) == -1)
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000318:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f95e 	bl	80005e0 <readData>
 8000324:	4603      	mov	r3, r0
 8000326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800032a:	d102      	bne.n	8000332 <bootloaderInit+0x62>
			{
				readataEmpty_Counter ++ ;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	3301      	adds	r3, #1
 8000330:	71fb      	strb	r3, [r7, #7]
		for(uint8_t i = 0; i < 10 ;i++)
 8000332:	79bb      	ldrb	r3, [r7, #6]
 8000334:	3301      	adds	r3, #1
 8000336:	71bb      	strb	r3, [r7, #6]
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2b09      	cmp	r3, #9
 800033c:	d9e9      	bls.n	8000312 <bootloaderInit+0x42>
			}
		}
		if(readataEmpty_Counter != 10)
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b0a      	cmp	r3, #10
 8000342:	d005      	beq.n	8000350 <bootloaderInit+0x80>
		{
			DeInit();
 8000344:	f000 f84e 	bl	80003e4 <DeInit>
			JumpToApplicationApp(APP1_ADDRESS_START);
 8000348:	4823      	ldr	r0, [pc, #140]	; (80003d8 <bootloaderInit+0x108>)
 800034a:	f000 f87f 	bl	800044c <JumpToApplicationApp>
			JumpToApplicationApp(APP2_ADDRESS_START);
		}
		else	errorBlink();
	}
	else	errorBlink();
}
 800034e:	e036      	b.n	80003be <bootloaderInit+0xee>
		else	errorBlink();
 8000350:	f000 f890 	bl	8000474 <errorBlink>
}
 8000354:	e033      	b.n	80003be <bootloaderInit+0xee>
	else if (App == App2)
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <bootloaderInit+0xfc>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d12d      	bne.n	80003ba <bootloaderInit+0xea>
		MFPEC_voidErasePage(48);
 800035e:	2030      	movs	r0, #48	; 0x30
 8000360:	f7ff ff60 	bl	8000224 <MFPEC_voidErasePage>
		MFPEC_u8ProgramOneWordFlash(0x0800C000,0x87654321);
 8000364:	491d      	ldr	r1, [pc, #116]	; (80003dc <bootloaderInit+0x10c>)
 8000366:	481b      	ldr	r0, [pc, #108]	; (80003d4 <bootloaderInit+0x104>)
 8000368:	f7ff ff38 	bl	80001dc <MFPEC_u8ProgramOneWordFlash>
		uint8_t readataEmpty_Counter = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	717b      	strb	r3, [r7, #5]
		for(uint8_t i = 0; i < 10 ;i++)
 8000370:	2300      	movs	r3, #0
 8000372:	713b      	strb	r3, [r7, #4]
 8000374:	e012      	b.n	800039c <bootloaderInit+0xcc>
			if(readData(APP2_ADDRESS_START + (i*4)) == -1)
 8000376:	793b      	ldrb	r3, [r7, #4]
 8000378:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800037c:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f92c 	bl	80005e0 <readData>
 8000388:	4603      	mov	r3, r0
 800038a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800038e:	d102      	bne.n	8000396 <bootloaderInit+0xc6>
				readataEmpty_Counter ++ ;
 8000390:	797b      	ldrb	r3, [r7, #5]
 8000392:	3301      	adds	r3, #1
 8000394:	717b      	strb	r3, [r7, #5]
		for(uint8_t i = 0; i < 10 ;i++)
 8000396:	793b      	ldrb	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	713b      	strb	r3, [r7, #4]
 800039c:	793b      	ldrb	r3, [r7, #4]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	d9e9      	bls.n	8000376 <bootloaderInit+0xa6>
		if(readataEmpty_Counter != 10)
 80003a2:	797b      	ldrb	r3, [r7, #5]
 80003a4:	2b0a      	cmp	r3, #10
 80003a6:	d005      	beq.n	80003b4 <bootloaderInit+0xe4>
			DeInit();
 80003a8:	f000 f81c 	bl	80003e4 <DeInit>
			JumpToApplicationApp(APP2_ADDRESS_START);
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <bootloaderInit+0x110>)
 80003ae:	f000 f84d 	bl	800044c <JumpToApplicationApp>
}
 80003b2:	e004      	b.n	80003be <bootloaderInit+0xee>
		else	errorBlink();
 80003b4:	f000 f85e 	bl	8000474 <errorBlink>
}
 80003b8:	e001      	b.n	80003be <bootloaderInit+0xee>
	else	errorBlink();
 80003ba:	f000 f85b 	bl	8000474 <errorBlink>
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010800 	.word	0x40010800
 80003cc:	20000028 	.word	0x20000028
 80003d0:	12345678 	.word	0x12345678
 80003d4:	0800c000 	.word	0x0800c000
 80003d8:	08005000 	.word	0x08005000
 80003dc:	87654321 	.word	0x87654321
 80003e0:	0800a800 	.word	0x0800a800

080003e4 <DeInit>:
//===================Sub-Func Bootloader====================//
void DeInit()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	//-- reset peripherals to guarantee flawless start of user application
	HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 80003e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ec:	4814      	ldr	r0, [pc, #80]	; (8000440 <DeInit+0x5c>)
 80003ee:	f000 fd21 	bl	8000e34 <HAL_GPIO_DeInit>
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 80003f2:	4b14      	ldr	r3, [pc, #80]	; (8000444 <DeInit+0x60>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a13      	ldr	r2, [pc, #76]	; (8000444 <DeInit+0x60>)
 80003f8:	f023 0310 	bic.w	r3, r3, #16
 80003fc:	6193      	str	r3, [r2, #24]
	  __HAL_RCC_GPIOD_CLK_DISABLE();
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <DeInit+0x60>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a10      	ldr	r2, [pc, #64]	; (8000444 <DeInit+0x60>)
 8000404:	f023 0320 	bic.w	r3, r3, #32
 8000408:	6193      	str	r3, [r2, #24]
	  __HAL_RCC_GPIOB_CLK_DISABLE();
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <DeInit+0x60>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <DeInit+0x60>)
 8000410:	f023 0308 	bic.w	r3, r3, #8
 8000414:	6193      	str	r3, [r2, #24]
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <DeInit+0x60>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <DeInit+0x60>)
 800041c:	f023 0304 	bic.w	r3, r3, #4
 8000420:	6193      	str	r3, [r2, #24]
	HAL_RCC_DeInit();
 8000422:	f000 fdf3 	bl	800100c <HAL_RCC_DeInit>
	HAL_DeInit();
 8000426:	f000 fa0f 	bl	8000848 <HAL_DeInit>
	SysTick->CTRL = 0;
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <DeInit+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <DeInit+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000436:	4b04      	ldr	r3, [pc, #16]	; (8000448 <DeInit+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40011000 	.word	0x40011000
 8000444:	40021000 	.word	0x40021000
 8000448:	e000e010 	.word	0xe000e010

0800044c <JumpToApplicationApp>:

void JumpToApplicationApp(const uint32_t address)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	60fb      	str	r3, [r7, #12]

	DeInit();
 8000458:	f7ff ffc4 	bl	80003e4 <DeInit>
	/* let's do The Jump! */
	/* Jump, used asm to avoid stack optimization */
	asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	6852      	ldr	r2, [r2, #4]
 8000464:	f383 8808 	msr	MSP, r3
 8000468:	4710      	bx	r2
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <errorBlink>:

void errorBlink()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	4857      	ldr	r0, [pc, #348]	; (80005dc <errorBlink+0x168>)
 8000480:	f000 fdab 	bl	8000fda <HAL_GPIO_WritePin>
	while(1)
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048a:	4854      	ldr	r0, [pc, #336]	; (80005dc <errorBlink+0x168>)
 800048c:	f000 fda5 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000490:	20c8      	movs	r0, #200	; 0xc8
 8000492:	f000 fa43 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049c:	484f      	ldr	r0, [pc, #316]	; (80005dc <errorBlink+0x168>)
 800049e:	f000 fd9c 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80004a2:	20c8      	movs	r0, #200	; 0xc8
 80004a4:	f000 fa3a 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	484b      	ldr	r0, [pc, #300]	; (80005dc <errorBlink+0x168>)
 80004b0:	f000 fd93 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80004b4:	20c8      	movs	r0, #200	; 0xc8
 80004b6:	f000 fa31 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c0:	4846      	ldr	r0, [pc, #280]	; (80005dc <errorBlink+0x168>)
 80004c2:	f000 fd8a 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80004c6:	20c8      	movs	r0, #200	; 0xc8
 80004c8:	f000 fa28 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d2:	4842      	ldr	r0, [pc, #264]	; (80005dc <errorBlink+0x168>)
 80004d4:	f000 fd81 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80004d8:	20c8      	movs	r0, #200	; 0xc8
 80004da:	f000 fa1f 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	483d      	ldr	r0, [pc, #244]	; (80005dc <errorBlink+0x168>)
 80004e6:	f000 fd78 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80004ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ee:	f000 fa15 	bl	800091c <HAL_Delay>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f8:	4838      	ldr	r0, [pc, #224]	; (80005dc <errorBlink+0x168>)
 80004fa:	f000 fd6e 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(800);
 80004fe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000502:	f000 fa0b 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050c:	4833      	ldr	r0, [pc, #204]	; (80005dc <errorBlink+0x168>)
 800050e:	f000 fd64 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000516:	f000 fa01 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000520:	482e      	ldr	r0, [pc, #184]	; (80005dc <errorBlink+0x168>)
 8000522:	f000 fd5a 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(800);
 8000526:	f44f 7048 	mov.w	r0, #800	; 0x320
 800052a:	f000 f9f7 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	4829      	ldr	r0, [pc, #164]	; (80005dc <errorBlink+0x168>)
 8000536:	f000 fd50 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800053a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053e:	f000 f9ed 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000548:	4824      	ldr	r0, [pc, #144]	; (80005dc <errorBlink+0x168>)
 800054a:	f000 fd46 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(800);
 800054e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000552:	f000 f9e3 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	481f      	ldr	r0, [pc, #124]	; (80005dc <errorBlink+0x168>)
 800055e:	f000 fd3c 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000566:	f000 f9d9 	bl	800091c <HAL_Delay>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	481a      	ldr	r0, [pc, #104]	; (80005dc <errorBlink+0x168>)
 8000572:	f000 fd32 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000576:	20c8      	movs	r0, #200	; 0xc8
 8000578:	f000 f9d0 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	4816      	ldr	r0, [pc, #88]	; (80005dc <errorBlink+0x168>)
 8000584:	f000 fd29 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000588:	20c8      	movs	r0, #200	; 0xc8
 800058a:	f000 f9c7 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <errorBlink+0x168>)
 8000596:	f000 fd20 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800059a:	20c8      	movs	r0, #200	; 0xc8
 800059c:	f000 f9be 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <errorBlink+0x168>)
 80005a8:	f000 fd17 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80005ac:	20c8      	movs	r0, #200	; 0xc8
 80005ae:	f000 f9b5 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <errorBlink+0x168>)
 80005ba:	f000 fd0e 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80005be:	20c8      	movs	r0, #200	; 0xc8
 80005c0:	f000 f9ac 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <errorBlink+0x168>)
 80005cc:	f000 fd05 	bl	8000fda <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 80005d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d4:	f000 f9a2 	bl	800091c <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005d8:	e754      	b.n	8000484 <errorBlink+0x10>
 80005da:	bf00      	nop
 80005dc:	40011000 	.word	0x40011000

080005e0 <readData>:
	}
}

uint32_t readData(uint32_t address)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uint32_t read_data;
	read_data = *(uint32_t*)(address);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
	return read_data;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 f90d 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f805 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f83f 	bl	8000688 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  bootloaderInit();
 800060a:	f7ff fe61 	bl	80002d0 <bootloaderInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x14>

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	; 0x40
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2228      	movs	r2, #40	; 0x28
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 f96c 	bl	80018fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	2301      	movs	r3, #1
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063e:	2300      	movs	r3, #0
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fd7a 	bl	8001140 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000652:	f000 f867 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ffe8 	bl	8001644 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800067a:	f000 f853 	bl	8000724 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3740      	adds	r7, #64	; 0x40
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_GPIO_Init+0x90>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <MX_GPIO_Init+0x90>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_GPIO_Init+0x90>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0310 	and.w	r3, r3, #16
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_GPIO_Init+0x90>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <MX_GPIO_Init+0x90>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_GPIO_Init+0x90>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <MX_GPIO_Init+0x94>)
 80006d4:	f000 fc81 	bl	8000fda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2302      	movs	r3, #2
 80006e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4619      	mov	r1, r3
 80006f0:	480a      	ldr	r0, [pc, #40]	; (800071c <MX_GPIO_Init+0x94>)
 80006f2:	f000 fa1b 	bl	8000b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 80006f6:	2301      	movs	r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_GPIO_Init+0x98>)
 800070a:	f000 fa0f 	bl	8000b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	40011000 	.word	0x40011000
 8000720:	40010800 	.word	0x40010800

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_MspInit+0x40>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <HAL_MspInit+0x40>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <HAL_MspInit+0x40>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_MspInit+0x40>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_MspInit+0x40>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_MspInit+0x40>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	40021000 	.word	0x40021000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ba:	f000 f893 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
	...

080007d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007d0:	f7ff fff7 	bl	80007c2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007d6:	490c      	ldr	r1, [pc, #48]	; (8000808 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <LoopFillZerobss+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007ec:	4c09      	ldr	r4, [pc, #36]	; (8000814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fa:	f001 f887 	bl	800190c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fefc 	bl	80005fa <main>
  bx lr
 8000802:	4770      	bx	lr
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800080c:	08001998 	.word	0x08001998
  ldr r2, =_sbss
 8000810:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000814:	20000030 	.word	0x20000030

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f949 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f826 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff ff7a 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_DeInit+0x2c>)
 800084e:	f04f 32ff 	mov.w	r2, #4294967295
 8000852:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <HAL_DeInit+0x2c>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_DeInit+0x2c>)
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <HAL_DeInit+0x2c>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000868:	f000 f806 	bl	8000878 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f935 	bl	8000b12 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f90b 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a03      	ldr	r2, [pc, #12]	; (8000904 <HAL_IncTick+0x20>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	20000008 	.word	0x20000008
 8000904:	2000002c 	.word	0x2000002c

08000908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	2000002c 	.word	0x2000002c

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff fff0 	bl	8000908 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffe0 	bl	8000908 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff90 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff49 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff5e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff90 	bl	8000a1c <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5f 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffb0 	bl	8000a80 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3e:	e169      	b.n	8000e14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b40:	2201      	movs	r2, #1
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	69fa      	ldr	r2, [r7, #28]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 8158 	bne.w	8000e0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	4a9a      	ldr	r2, [pc, #616]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d05e      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b68:	4a98      	ldr	r2, [pc, #608]	; (8000dcc <HAL_GPIO_Init+0x2a0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d875      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b6e:	4a98      	ldr	r2, [pc, #608]	; (8000dd0 <HAL_GPIO_Init+0x2a4>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d058      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b74:	4a96      	ldr	r2, [pc, #600]	; (8000dd0 <HAL_GPIO_Init+0x2a4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d86f      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b7a:	4a96      	ldr	r2, [pc, #600]	; (8000dd4 <HAL_GPIO_Init+0x2a8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d052      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b80:	4a94      	ldr	r2, [pc, #592]	; (8000dd4 <HAL_GPIO_Init+0x2a8>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d869      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b86:	4a94      	ldr	r2, [pc, #592]	; (8000dd8 <HAL_GPIO_Init+0x2ac>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d04c      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b8c:	4a92      	ldr	r2, [pc, #584]	; (8000dd8 <HAL_GPIO_Init+0x2ac>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d863      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b92:	4a92      	ldr	r2, [pc, #584]	; (8000ddc <HAL_GPIO_Init+0x2b0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d046      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
 8000b98:	4a90      	ldr	r2, [pc, #576]	; (8000ddc <HAL_GPIO_Init+0x2b0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d85d      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000b9e:	2b12      	cmp	r3, #18
 8000ba0:	d82a      	bhi.n	8000bf8 <HAL_GPIO_Init+0xcc>
 8000ba2:	2b12      	cmp	r3, #18
 8000ba4:	d859      	bhi.n	8000c5a <HAL_GPIO_Init+0x12e>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <HAL_GPIO_Init+0x80>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000c27 	.word	0x08000c27
 8000bb0:	08000c01 	.word	0x08000c01
 8000bb4:	08000c13 	.word	0x08000c13
 8000bb8:	08000c55 	.word	0x08000c55
 8000bbc:	08000c5b 	.word	0x08000c5b
 8000bc0:	08000c5b 	.word	0x08000c5b
 8000bc4:	08000c5b 	.word	0x08000c5b
 8000bc8:	08000c5b 	.word	0x08000c5b
 8000bcc:	08000c5b 	.word	0x08000c5b
 8000bd0:	08000c5b 	.word	0x08000c5b
 8000bd4:	08000c5b 	.word	0x08000c5b
 8000bd8:	08000c5b 	.word	0x08000c5b
 8000bdc:	08000c5b 	.word	0x08000c5b
 8000be0:	08000c5b 	.word	0x08000c5b
 8000be4:	08000c5b 	.word	0x08000c5b
 8000be8:	08000c5b 	.word	0x08000c5b
 8000bec:	08000c5b 	.word	0x08000c5b
 8000bf0:	08000c09 	.word	0x08000c09
 8000bf4:	08000c1d 	.word	0x08000c1d
 8000bf8:	4a79      	ldr	r2, [pc, #484]	; (8000de0 <HAL_GPIO_Init+0x2b4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bfe:	e02c      	b.n	8000c5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e029      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e024      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	3308      	adds	r3, #8
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e01f      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	330c      	adds	r3, #12
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e01a      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	623b      	str	r3, [r7, #32]
          break;
 8000c32:	e013      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d105      	bne.n	8000c48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	611a      	str	r2, [r3, #16]
          break;
 8000c46:	e009      	b.n	8000c5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	615a      	str	r2, [r3, #20]
          break;
 8000c52:	e003      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e000      	b.n	8000c5c <HAL_GPIO_Init+0x130>
          break;
 8000c5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	2bff      	cmp	r3, #255	; 0xff
 8000c60:	d801      	bhi.n	8000c66 <HAL_GPIO_Init+0x13a>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	e001      	b.n	8000c6a <HAL_GPIO_Init+0x13e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2bff      	cmp	r3, #255	; 0xff
 8000c70:	d802      	bhi.n	8000c78 <HAL_GPIO_Init+0x14c>
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0x152>
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	3b08      	subs	r3, #8
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	210f      	movs	r1, #15
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	401a      	ands	r2, r3
 8000c90:	6a39      	ldr	r1, [r7, #32]
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 80b1 	beq.w	8000e0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cac:	4b4d      	ldr	r3, [pc, #308]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a4c      	ldr	r2, [pc, #304]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <HAL_GPIO_Init+0x2b8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cc4:	4a48      	ldr	r2, [pc, #288]	; (8000de8 <HAL_GPIO_Init+0x2bc>)
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a40      	ldr	r2, [pc, #256]	; (8000dec <HAL_GPIO_Init+0x2c0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d013      	beq.n	8000d18 <HAL_GPIO_Init+0x1ec>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a3f      	ldr	r2, [pc, #252]	; (8000df0 <HAL_GPIO_Init+0x2c4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <HAL_GPIO_Init+0x1e8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a3e      	ldr	r2, [pc, #248]	; (8000df4 <HAL_GPIO_Init+0x2c8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x1e4>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a3d      	ldr	r2, [pc, #244]	; (8000df8 <HAL_GPIO_Init+0x2cc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_GPIO_Init+0x1e0>
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e006      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	e004      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <HAL_GPIO_Init+0x1ee>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1c:	f002 0203 	and.w	r2, r2, #3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4093      	lsls	r3, r2
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2a:	492f      	ldr	r1, [pc, #188]	; (8000de8 <HAL_GPIO_Init+0x2bc>)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	492c      	ldr	r1, [pc, #176]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	608b      	str	r3, [r1, #8]
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4928      	ldr	r1, [pc, #160]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	4922      	ldr	r1, [pc, #136]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60cb      	str	r3, [r1, #12]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	491e      	ldr	r1, [pc, #120]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4918      	ldr	r1, [pc, #96]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	4914      	ldr	r1, [pc, #80]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d021      	beq.n	8000e00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	490e      	ldr	r1, [pc, #56]	; (8000dfc <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	600b      	str	r3, [r1, #0]
 8000dc8:	e021      	b.n	8000e0e <HAL_GPIO_Init+0x2e2>
 8000dca:	bf00      	nop
 8000dcc:	10320000 	.word	0x10320000
 8000dd0:	10310000 	.word	0x10310000
 8000dd4:	10220000 	.word	0x10220000
 8000dd8:	10210000 	.word	0x10210000
 8000ddc:	10120000 	.word	0x10120000
 8000de0:	10110000 	.word	0x10110000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	40011000 	.word	0x40011000
 8000df8:	40011400 	.word	0x40011400
 8000dfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_GPIO_Init+0x304>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	4909      	ldr	r1, [pc, #36]	; (8000e30 <HAL_GPIO_Init+0x304>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	3301      	adds	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f47f ae8e 	bne.w	8000b40 <HAL_GPIO_Init+0x14>
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	372c      	adds	r7, #44	; 0x2c
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000e42:	e09a      	b.n	8000f7a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 808d 	beq.w	8000f74 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000e5a:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <HAL_GPIO_DeInit+0x160>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_GPIO_DeInit+0x164>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d013      	beq.n	8000eac <HAL_GPIO_DeInit+0x78>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_GPIO_DeInit+0x168>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d00d      	beq.n	8000ea8 <HAL_GPIO_DeInit+0x74>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a44      	ldr	r2, [pc, #272]	; (8000fa0 <HAL_GPIO_DeInit+0x16c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_DeInit+0x70>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a43      	ldr	r2, [pc, #268]	; (8000fa4 <HAL_GPIO_DeInit+0x170>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d101      	bne.n	8000ea0 <HAL_GPIO_DeInit+0x6c>
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e006      	b.n	8000eae <HAL_GPIO_DeInit+0x7a>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e004      	b.n	8000eae <HAL_GPIO_DeInit+0x7a>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e002      	b.n	8000eae <HAL_GPIO_DeInit+0x7a>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_GPIO_DeInit+0x7a>
 8000eac:	2300      	movs	r3, #0
 8000eae:	69fa      	ldr	r2, [r7, #28]
 8000eb0:	f002 0203 	and.w	r2, r2, #3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	4093      	lsls	r3, r2
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d132      	bne.n	8000f24 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <HAL_GPIO_DeInit+0x174>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4938      	ldr	r1, [pc, #224]	; (8000fa8 <HAL_GPIO_DeInit+0x174>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <HAL_GPIO_DeInit+0x174>)
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	4934      	ldr	r1, [pc, #208]	; (8000fa8 <HAL_GPIO_DeInit+0x174>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000eda:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <HAL_GPIO_DeInit+0x174>)
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4931      	ldr	r1, [pc, #196]	; (8000fa8 <HAL_GPIO_DeInit+0x174>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_GPIO_DeInit+0x174>)
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	492d      	ldr	r1, [pc, #180]	; (8000fa8 <HAL_GPIO_DeInit+0x174>)
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000f06:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <HAL_GPIO_DeInit+0x160>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	43da      	mvns	r2, r3
 8000f16:	481f      	ldr	r0, [pc, #124]	; (8000f94 <HAL_GPIO_DeInit+0x160>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	d801      	bhi.n	8000f2e <HAL_GPIO_DeInit+0xfa>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	e001      	b.n	8000f32 <HAL_GPIO_DeInit+0xfe>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3304      	adds	r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2bff      	cmp	r3, #255	; 0xff
 8000f38:	d802      	bhi.n	8000f40 <HAL_GPIO_DeInit+0x10c>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_DeInit+0x112>
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3b08      	subs	r3, #8
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	2104      	movs	r1, #4
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	431a      	orrs	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
    }

    position++;
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3301      	adds	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f af5e 	bne.w	8000e44 <HAL_GPIO_DeInit+0x10>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40010800 	.word	0x40010800
 8000f9c:	40010c00 	.word	0x40010c00
 8000fa0:	40011000 	.word	0x40011000
 8000fa4:	40011400 	.word	0x40011400
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	807b      	strh	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fea:	787b      	ldrb	r3, [r7, #1]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff0:	887a      	ldrh	r2, [r7, #2]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff6:	e003      	b.n	8001000 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	041a      	lsls	r2, r3, #16
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
	...

0800100c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001012:	f7ff fc79 	bl	8000908 <HAL_GetTick>
 8001016:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001018:	4b45      	ldr	r3, [pc, #276]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a44      	ldr	r2, [pc, #272]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fc6f 	bl	8000908 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e077      	b.n	8001128 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001038:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001044:	4b3a      	ldr	r3, [pc, #232]	; (8001130 <HAL_RCC_DeInit+0x124>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800104c:	4a38      	ldr	r2, [pc, #224]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800104e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001052:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001054:	f7ff fc58 	bl	8000908 <HAL_GetTick>
 8001058:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001060:	e00a      	b.n	8001078 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001062:	f7ff fc51 	bl	8000908 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e057      	b.n	8001128 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1ee      	bne.n	8001062 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <HAL_RCC_DeInit+0x128>)
 8001086:	4a2c      	ldr	r2, [pc, #176]	; (8001138 <HAL_RCC_DeInit+0x12c>)
 8001088:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <HAL_RCC_DeInit+0x130>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fbf8 	bl	8000884 <HAL_InitTick>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e044      	b.n	8001128 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800109e:	f7ff fc33 	bl	8000908 <HAL_GetTick>
 80010a2:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_RCC_DeInit+0x124>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <HAL_RCC_DeInit+0x124>)
 80010aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010ae:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b2:	f7ff fc29 	bl	8000908 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e031      	b.n	8001128 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_RCC_DeInit+0x124>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f0      	bne.n	80010b2 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_RCC_DeInit+0x124>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80010d6:	f7ff fc17 	bl	8000908 <HAL_GetTick>
 80010da:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_RCC_DeInit+0x124>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <HAL_RCC_DeInit+0x124>)
 80010e2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010e6:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ea:	f7ff fc0d 	bl	8000908 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e015      	b.n	8001128 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_RCC_DeInit+0x124>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f0      	bne.n	80010ea <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_RCC_DeInit+0x124>)
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	4a05      	ldr	r2, [pc, #20]	; (8001130 <HAL_RCC_DeInit+0x124>)
 800111a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_RCC_DeInit+0x124>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	20000000 	.word	0x20000000
 8001138:	007a1200 	.word	0x007a1200
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e272      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8087 	beq.w	800126e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001160:	4b92      	ldr	r3, [pc, #584]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b04      	cmp	r3, #4
 800116a:	d00c      	beq.n	8001186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800116c:	4b8f      	ldr	r3, [pc, #572]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b08      	cmp	r3, #8
 8001176:	d112      	bne.n	800119e <HAL_RCC_OscConfig+0x5e>
 8001178:	4b8c      	ldr	r3, [pc, #560]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001184:	d10b      	bne.n	800119e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001186:	4b89      	ldr	r3, [pc, #548]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d06c      	beq.n	800126c <HAL_RCC_OscConfig+0x12c>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d168      	bne.n	800126c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e24c      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a6:	d106      	bne.n	80011b6 <HAL_RCC_OscConfig+0x76>
 80011a8:	4b80      	ldr	r3, [pc, #512]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a7f      	ldr	r2, [pc, #508]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	e02e      	b.n	8001214 <HAL_RCC_OscConfig+0xd4>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x98>
 80011be:	4b7b      	ldr	r3, [pc, #492]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b78      	ldr	r3, [pc, #480]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a77      	ldr	r2, [pc, #476]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e01d      	b.n	8001214 <HAL_RCC_OscConfig+0xd4>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0xbc>
 80011e2:	4b72      	ldr	r3, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a71      	ldr	r2, [pc, #452]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6e      	ldr	r2, [pc, #440]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0xd4>
 80011fc:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a6a      	ldr	r2, [pc, #424]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b68      	ldr	r3, [pc, #416]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a67      	ldr	r2, [pc, #412]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fb74 	bl	8000908 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fb70 	bl	8000908 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e200      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	4b5d      	ldr	r3, [pc, #372]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0xe4>
 8001242:	e014      	b.n	800126e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fb60 	bl	8000908 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fb5c 	bl	8000908 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e1ec      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	4b53      	ldr	r3, [pc, #332]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x10c>
 800126a:	e000      	b.n	800126e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d063      	beq.n	8001342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800127a:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001286:	4b49      	ldr	r3, [pc, #292]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b08      	cmp	r3, #8
 8001290:	d11c      	bne.n	80012cc <HAL_RCC_OscConfig+0x18c>
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d116      	bne.n	80012cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	4b43      	ldr	r3, [pc, #268]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d005      	beq.n	80012b6 <HAL_RCC_OscConfig+0x176>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e1c0      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4939      	ldr	r1, [pc, #228]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ca:	e03a      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d020      	beq.n	8001316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d4:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <HAL_RCC_OscConfig+0x270>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fb15 	bl	8000908 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e2:	f7ff fb11 	bl	8000908 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e1a1      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4927      	ldr	r1, [pc, #156]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
 8001314:	e015      	b.n	8001342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_RCC_OscConfig+0x270>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff faf4 	bl	8000908 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff faf0 	bl	8000908 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e180      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d03a      	beq.n	80013c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d019      	beq.n	800138a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_RCC_OscConfig+0x274>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff fad4 	bl	8000908 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff fad0 	bl	8000908 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e160      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_RCC_OscConfig+0x26c>)
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 fa9c 	bl	80018c0 <RCC_Delay>
 8001388:	e01c      	b.n	80013c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_RCC_OscConfig+0x274>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001390:	f7ff faba 	bl	8000908 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001396:	e00f      	b.n	80013b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fab6 	bl	8000908 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d908      	bls.n	80013b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e146      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	42420000 	.word	0x42420000
 80013b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e9      	bne.n	8001398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80a6 	beq.w	800151e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b8b      	ldr	r3, [pc, #556]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10d      	bne.n	80013fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b88      	ldr	r3, [pc, #544]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a87      	ldr	r2, [pc, #540]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b85      	ldr	r3, [pc, #532]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fe:	4b82      	ldr	r3, [pc, #520]	; (8001608 <HAL_RCC_OscConfig+0x4c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d118      	bne.n	800143c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140a:	4b7f      	ldr	r3, [pc, #508]	; (8001608 <HAL_RCC_OscConfig+0x4c8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a7e      	ldr	r2, [pc, #504]	; (8001608 <HAL_RCC_OscConfig+0x4c8>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001416:	f7ff fa77 	bl	8000908 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141e:	f7ff fa73 	bl	8000908 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b64      	cmp	r3, #100	; 0x64
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e103      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001430:	4b75      	ldr	r3, [pc, #468]	; (8001608 <HAL_RCC_OscConfig+0x4c8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d106      	bne.n	8001452 <HAL_RCC_OscConfig+0x312>
 8001444:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4a6e      	ldr	r2, [pc, #440]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6213      	str	r3, [r2, #32]
 8001450:	e02d      	b.n	80014ae <HAL_RCC_OscConfig+0x36e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0x334>
 800145a:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4a69      	ldr	r2, [pc, #420]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6213      	str	r3, [r2, #32]
 8001466:	4b67      	ldr	r3, [pc, #412]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	4a66      	ldr	r2, [pc, #408]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	f023 0304 	bic.w	r3, r3, #4
 8001470:	6213      	str	r3, [r2, #32]
 8001472:	e01c      	b.n	80014ae <HAL_RCC_OscConfig+0x36e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b05      	cmp	r3, #5
 800147a:	d10c      	bne.n	8001496 <HAL_RCC_OscConfig+0x356>
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a60      	ldr	r2, [pc, #384]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a5d      	ldr	r2, [pc, #372]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6213      	str	r3, [r2, #32]
 8001494:	e00b      	b.n	80014ae <HAL_RCC_OscConfig+0x36e>
 8001496:	4b5b      	ldr	r3, [pc, #364]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a5a      	ldr	r2, [pc, #360]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	4b58      	ldr	r3, [pc, #352]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d015      	beq.n	80014e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fa27 	bl	8000908 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff fa23 	bl	8000908 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0b1      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0ee      	beq.n	80014be <HAL_RCC_OscConfig+0x37e>
 80014e0:	e014      	b.n	800150c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fa11 	bl	8000908 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	e00a      	b.n	8001500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ea:	f7ff fa0d 	bl	8000908 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e09b      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ee      	bne.n	80014ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d105      	bne.n	800151e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a3b      	ldr	r2, [pc, #236]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8087 	beq.w	8001636 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d061      	beq.n	80015f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d146      	bne.n	80015ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x4cc>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff f9e1 	bl	8000908 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800154a:	f7ff f9dd 	bl	8000908 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e06d      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001570:	d108      	bne.n	8001584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001572:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	4921      	ldr	r1, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a19      	ldr	r1, [r3, #32]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	430b      	orrs	r3, r1
 8001596:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_OscConfig+0x4cc>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff f9b1 	bl	8000908 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff f9ad 	bl	8000908 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e03d      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x46a>
 80015c8:	e035      	b.n	8001636 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_RCC_OscConfig+0x4cc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f99a 	bl	8000908 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff f996 	bl	8000908 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e026      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x498>
 80015f6:	e01e      	b.n	8001636 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e019      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
 8001604:	40021000 	.word	0x40021000
 8001608:	40007000 	.word	0x40007000
 800160c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x500>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	429a      	cmp	r2, r3
 8001622:	d106      	bne.n	8001632 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d001      	beq.n	8001636 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0d0      	b.n	80017fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001658:	4b6a      	ldr	r3, [pc, #424]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d910      	bls.n	8001688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b67      	ldr	r3, [pc, #412]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 0207 	bic.w	r2, r3, #7
 800166e:	4965      	ldr	r1, [pc, #404]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	4b63      	ldr	r3, [pc, #396]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0b8      	b.n	80017fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a0:	4b59      	ldr	r3, [pc, #356]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a58      	ldr	r2, [pc, #352]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b8:	4b53      	ldr	r3, [pc, #332]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a52      	ldr	r2, [pc, #328]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4b50      	ldr	r3, [pc, #320]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	494d      	ldr	r1, [pc, #308]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d040      	beq.n	8001764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d115      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e07f      	b.n	80017fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d107      	bne.n	8001712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e073      	b.n	80017fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e06b      	b.n	80017fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f023 0203 	bic.w	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001734:	f7ff f8e8 	bl	8000908 <HAL_GetTick>
 8001738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	e00a      	b.n	8001752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173c:	f7ff f8e4 	bl	8000908 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f241 3288 	movw	r2, #5000	; 0x1388
 800174a:	4293      	cmp	r3, r2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e053      	b.n	80017fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 020c 	and.w	r2, r3, #12
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	429a      	cmp	r2, r3
 8001762:	d1eb      	bne.n	800173c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d210      	bcs.n	8001794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 0207 	bic.w	r2, r3, #7
 800177a:	4922      	ldr	r1, [pc, #136]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e032      	b.n	80017fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4916      	ldr	r1, [pc, #88]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017be:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	490e      	ldr	r1, [pc, #56]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017d2:	f000 f821 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	490a      	ldr	r1, [pc, #40]	; (800180c <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	5ccb      	ldrb	r3, [r1, r3]
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1cc>)
 80017ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1d0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff f846 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40022000 	.word	0x40022000
 8001808:	40021000 	.word	0x40021000
 800180c:	0800196c 	.word	0x0800196c
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b04      	cmp	r3, #4
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x30>
 8001842:	2b08      	cmp	r3, #8
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x36>
 8001846:	e027      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800184a:	613b      	str	r3, [r7, #16]
      break;
 800184c:	e027      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	0c9b      	lsrs	r3, r3, #18
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d010      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	0c5b      	lsrs	r3, r3, #17
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001872:	5cd3      	ldrb	r3, [r2, r3]
 8001874:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800187a:	fb03 f202 	mul.w	r2, r3, r2
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e004      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	613b      	str	r3, [r7, #16]
      break;
 8001896:	e002      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800189a:	613b      	str	r3, [r7, #16]
      break;
 800189c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189e:	693b      	ldr	r3, [r7, #16]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	007a1200 	.word	0x007a1200
 80018b4:	0800197c 	.word	0x0800197c
 80018b8:	0800198c 	.word	0x0800198c
 80018bc:	003d0900 	.word	0x003d0900

080018c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <RCC_Delay+0x34>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <RCC_Delay+0x38>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	0a5b      	lsrs	r3, r3, #9
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018dc:	bf00      	nop
  }
  while (Delay --);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	60fa      	str	r2, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f9      	bne.n	80018dc <RCC_Delay+0x1c>
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000000 	.word	0x20000000
 80018f8:	10624dd3 	.word	0x10624dd3

080018fc <memset>:
 80018fc:	4603      	mov	r3, r0
 80018fe:	4402      	add	r2, r0
 8001900:	4293      	cmp	r3, r2
 8001902:	d100      	bne.n	8001906 <memset+0xa>
 8001904:	4770      	bx	lr
 8001906:	f803 1b01 	strb.w	r1, [r3], #1
 800190a:	e7f9      	b.n	8001900 <memset+0x4>

0800190c <__libc_init_array>:
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	2600      	movs	r6, #0
 8001910:	4d0c      	ldr	r5, [pc, #48]	; (8001944 <__libc_init_array+0x38>)
 8001912:	4c0d      	ldr	r4, [pc, #52]	; (8001948 <__libc_init_array+0x3c>)
 8001914:	1b64      	subs	r4, r4, r5
 8001916:	10a4      	asrs	r4, r4, #2
 8001918:	42a6      	cmp	r6, r4
 800191a:	d109      	bne.n	8001930 <__libc_init_array+0x24>
 800191c:	f000 f81a 	bl	8001954 <_init>
 8001920:	2600      	movs	r6, #0
 8001922:	4d0a      	ldr	r5, [pc, #40]	; (800194c <__libc_init_array+0x40>)
 8001924:	4c0a      	ldr	r4, [pc, #40]	; (8001950 <__libc_init_array+0x44>)
 8001926:	1b64      	subs	r4, r4, r5
 8001928:	10a4      	asrs	r4, r4, #2
 800192a:	42a6      	cmp	r6, r4
 800192c:	d105      	bne.n	800193a <__libc_init_array+0x2e>
 800192e:	bd70      	pop	{r4, r5, r6, pc}
 8001930:	f855 3b04 	ldr.w	r3, [r5], #4
 8001934:	4798      	blx	r3
 8001936:	3601      	adds	r6, #1
 8001938:	e7ee      	b.n	8001918 <__libc_init_array+0xc>
 800193a:	f855 3b04 	ldr.w	r3, [r5], #4
 800193e:	4798      	blx	r3
 8001940:	3601      	adds	r6, #1
 8001942:	e7f2      	b.n	800192a <__libc_init_array+0x1e>
 8001944:	08001990 	.word	0x08001990
 8001948:	08001990 	.word	0x08001990
 800194c:	08001990 	.word	0x08001990
 8001950:	08001994 	.word	0x08001994

08001954 <_init>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	bf00      	nop
 8001958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195a:	bc08      	pop	{r3}
 800195c:	469e      	mov	lr, r3
 800195e:	4770      	bx	lr

08001960 <_fini>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	bf00      	nop
 8001964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001966:	bc08      	pop	{r3}
 8001968:	469e      	mov	lr, r3
 800196a:	4770      	bx	lr
