
BootLoader_f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800260c  0800260c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800260c  0800260c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800260c  0800260c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002610  08002610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000010  08002620  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002620  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006054  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a8e  00000000  00000000  000260cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00027b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000051a  00000000  00000000  00028258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168d0  00000000  00000000  00028772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008664  00000000  00000000  0003f042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000800ac  00000000  00000000  000476a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a1c  00000000  00000000  000c7754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000c9170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080025d0 	.word	0x080025d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080025d0 	.word	0x080025d0

0800014c <BL_ReadAddressData>:

#define Debug
//**************************Include***************************//
#include "BL_Header.h"
//**************************Include***************************//
static uint32_t BL_ReadAddressData(uint32_t address){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32AddressData = *((volatile uint32_t*)(address));
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	return Local_u32AddressData;
 800015a:	68fb      	ldr	r3, [r7, #12]
}
 800015c:	4618      	mov	r0, r3
 800015e:	3714      	adds	r7, #20
 8000160:	46bd      	mov	sp, r7
 8000162:	bc80      	pop	{r7}
 8000164:	4770      	bx	lr
	...

08000168 <BL_voidBootLoader_Init>:
//**************************Function Define***************************//
void BL_voidBootLoader_Init(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
	// Read Branching Request Update Flag to determine behaviour.
	uint32_t Local_u32Flag = BL_ReadAddressData(FLAG_STATUS_BOOTLOADER);
 800016e:	480a      	ldr	r0, [pc, #40]	; (8000198 <BL_voidBootLoader_Init+0x30>)
 8000170:	f7ff ffec 	bl	800014c <BL_ReadAddressData>
 8000174:	6078      	str	r0, [r7, #4]
	if(Local_u32Flag  == BL_BRANCHING_FLAG_RESET)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800017c:	d102      	bne.n	8000184 <BL_voidBootLoader_Init+0x1c>
	{
		// Check images existence, status (and CRC).
		BL_voidCheckActiveRegion();
 800017e:	f000 f80d 	bl	800019c <BL_voidCheckActiveRegion>
	}
	else
	{
		// Do nothing
	}
}
 8000182:	e004      	b.n	800018e <BL_voidBootLoader_Init+0x26>
	else if(Local_u32Flag == BL_BRANCHING_FLAG_SET)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d101      	bne.n	800018e <BL_voidBootLoader_Init+0x26>
	    BL_voidJumpToBootloader();
 800018a:	f000 f887 	bl	800029c <BL_voidJumpToBootloader>
}
 800018e:	bf00      	nop
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	0801fc00 	.word	0x0801fc00

0800019c <BL_voidCheckActiveRegion>:

void BL_voidCheckActiveRegion(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
    // Read Images Status To Determine Which Image Will Be Excuted.
	uint32_t Local_u32ActiveImageStatus = BL_ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80001a2:	4818      	ldr	r0, [pc, #96]	; (8000204 <BL_voidCheckActiveRegion+0x68>)
 80001a4:	f7ff ffd2 	bl	800014c <BL_ReadAddressData>
 80001a8:	6078      	str	r0, [r7, #4]
	//uint32_t Local_u32ReceivedCRC       = BL_ReadAddressData(FLAG_STATUS_CRC_ACTIVE_REGION_ADDRESS);
	uint32_t Local_u32BackupStatus      = BL_INITIALIZE_EITH_CORRUPTED;
 80001aa:	f06f 030c 	mvn.w	r3, #12
 80001ae:	603b      	str	r3, [r7, #0]

    // if 
    if(Local_u32ActiveImageStatus == BR_IMAGE_IS_ACTIVE)
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f113 0f0f 	cmn.w	r3, #15
 80001b6:	d102      	bne.n	80001be <BL_voidCheckActiveRegion+0x22>
	{
		BL_voidJumpToActiveRegion();
 80001b8:	f000 f846 	bl	8000248 <BL_voidJumpToActiveRegion>
	}
    else
    {
        // Do nothing
    }
}
 80001bc:	e01d      	b.n	80001fa <BL_voidCheckActiveRegion+0x5e>
    else if(Local_u32ActiveImageStatus == BR_IMAGE_IS_CORRUPTED || Local_u32ActiveImageStatus == BR_IMAGE_IS_NOT_EXISTING)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f113 0f0c 	cmn.w	r3, #12
 80001c4:	d003      	beq.n	80001ce <BL_voidCheckActiveRegion+0x32>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001cc:	d115      	bne.n	80001fa <BL_voidCheckActiveRegion+0x5e>
    	Local_u32BackupStatus    = BL_32CheckBackupRegion();
 80001ce:	f000 f81b 	bl	8000208 <BL_32CheckBackupRegion>
 80001d2:	6038      	str	r0, [r7, #0]
		if(Local_u32BackupStatus == BR_IMAGE_IS_CORRECT)
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	f113 0f0e 	cmn.w	r3, #14
 80001da:	d104      	bne.n	80001e6 <BL_voidCheckActiveRegion+0x4a>
			BL_voidCopyImageToActiveRegion();
 80001dc:	f000 f866 	bl	80002ac <BL_voidCopyImageToActiveRegion>
			BL_voidJumpToActiveRegion();
 80001e0:	f000 f832 	bl	8000248 <BL_voidJumpToActiveRegion>
}
 80001e4:	e009      	b.n	80001fa <BL_voidCheckActiveRegion+0x5e>
		else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	f113 0f0c 	cmn.w	r3, #12
 80001ec:	d003      	beq.n	80001f6 <BL_voidCheckActiveRegion+0x5a>
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001f4:	d101      	bne.n	80001fa <BL_voidCheckActiveRegion+0x5e>
			BL_voidSetBranchingFlagAndMakeSWR();
 80001f6:	f000 f9c3 	bl	8000580 <BL_voidSetBranchingFlagAndMakeSWR>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	0801fc14 	.word	0x0801fc14

08000208 <BL_32CheckBackupRegion>:

uint32_t BL_32CheckBackupRegion(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
	uint32_t Local_u32BackupStatus =BL_ReadAddressData(FLAG_STATUS_BACKUP_REGION_ADDRESS);
 800020e:	480d      	ldr	r0, [pc, #52]	; (8000244 <BL_32CheckBackupRegion+0x3c>)
 8000210:	f7ff ff9c 	bl	800014c <BL_ReadAddressData>
 8000214:	6078      	str	r0, [r7, #4]
	// if
	if(Local_u32BackupStatus == BR_IMAGE_IS_BACKUP)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f113 0f0d 	cmn.w	r3, #13
 800021c:	d102      	bne.n	8000224 <BL_32CheckBackupRegion+0x1c>
	{
		return BR_IMAGE_IS_CORRECT;
 800021e:	f06f 030d 	mvn.w	r3, #13
 8000222:	e00b      	b.n	800023c <BL_32CheckBackupRegion+0x34>
	}
	else if(Local_u32BackupStatus == BR_IMAGE_IS_CORRUPTED || Local_u32BackupStatus == BR_IMAGE_IS_NOT_EXISTING)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f113 0f0c 	cmn.w	r3, #12
 800022a:	d003      	beq.n	8000234 <BL_32CheckBackupRegion+0x2c>
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000232:	d102      	bne.n	800023a <BL_32CheckBackupRegion+0x32>
	{
		return BR_IMAGE_IS_CORRUPTED;
 8000234:	f06f 030b 	mvn.w	r3, #11
 8000238:	e000      	b.n	800023c <BL_32CheckBackupRegion+0x34>
	}
	else
	{
		//Do nothing here
	}
	return Local_u32BackupStatus;
 800023a:	687b      	ldr	r3, [r7, #4]
}
 800023c:	4618      	mov	r0, r3
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	0801fc34 	.word	0x0801fc34

08000248 <BL_voidJumpToActiveRegion>:

void BL_voidJumpToActiveRegion(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	//MX_GPIO_Deinit();
	SysTick->CTRL = 0x0; //Disables SysTick timer and its related interrupt
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <BL_voidJumpToActiveRegion+0x40>)
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
	HAL_DeInit();
 8000254:	f000 fd56 	bl	8000d04 <HAL_DeInit>
	RCC->CIR = 0x00000000; //Disable all interrupts related to clock
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <BL_voidJumpToActiveRegion+0x44>)
 800025a:	2200      	movs	r2, #0
 800025c:	609a      	str	r2, [r3, #8]

	Application_t AddressToCall = 0 ;
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
	AddressToCall = *(Application_t*)(ACTIVE_IMAGE + 4); // Point to Reset Handler
 8000262:	4b0b      	ldr	r3, [pc, #44]	; (8000290 <BL_voidJumpToActiveRegion+0x48>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	607b      	str	r3, [r7, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000268:	f3bf 8f5f 	dmb	sy
}
 800026c:	bf00      	nop

	__DMB(); //ARM says to use a DMB instruction before relocating VTOR *
	SCB->VTOR = ACTIVE_IMAGE; //We relocate vector table to the sector 1
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <BL_voidJumpToActiveRegion+0x4c>)
 8000270:	4a09      	ldr	r2, [pc, #36]	; (8000298 <BL_voidJumpToActiveRegion+0x50>)
 8000272:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000274:	f3bf 8f4f 	dsb	sy
}
 8000278:	bf00      	nop
	__DSB(); //ARM says to use a DSB instruction just after relocating VTOR */

	AddressToCall();
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4798      	blx	r3
}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	e000e010 	.word	0xe000e010
 800028c:	40021000 	.word	0x40021000
 8000290:	08005004 	.word	0x08005004
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	08005000 	.word	0x08005000

0800029c <BL_voidJumpToBootloader>:

void BL_voidJumpToBootloader(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	//@TODO: In develop
	BL_voidUpdateHeaders();
 80002a0:	f000 f97a 	bl	8000598 <BL_voidUpdateHeaders>
	BL_voidReceiveUpdate();
 80002a4:	f000 f9f6 	bl	8000694 <BL_voidReceiveUpdate>

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}

080002ac <BL_voidCopyImageToActiveRegion>:

void BL_voidCopyImageToActiveRegion(void)
{
 80002ac:	b5b0      	push	{r4, r5, r7, lr}
 80002ae:	b08a      	sub	sp, #40	; 0x28
 80002b0:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress = BL_INITIALIZE_WITH_ZERO;
 80002b2:	2300      	movs	r3, #0
 80002b4:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveDataAddress = BL_INITIALIZE_WITH_ZERO;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32BackUpDataWord 	= BL_INITIALIZE_WITH_ZERO;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
	uint32_t Local_u32BackupSizeInWord 	= BL_ReadAddressData(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS);
 80002be:	482b      	ldr	r0, [pc, #172]	; (800036c <BL_voidCopyImageToActiveRegion+0xc0>)
 80002c0:	f7ff ff44 	bl	800014c <BL_ReadAddressData>
 80002c4:	6178      	str	r0, [r7, #20]
	Local_u32BackupSizeInWord = Local_u32BackupSizeInWord / 4;
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	089b      	lsrs	r3, r3, #2
 80002ca:	617b      	str	r3, [r7, #20]
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80002cc:	2300      	movs	r3, #0
 80002ce:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80002d0:	2301      	movs	r3, #1
 80002d2:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 80002d4:	4b26      	ldr	r3, [pc, #152]	; (8000370 <BL_voidCopyImageToActiveRegion+0xc4>)
 80002d6:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 80002d8:	2316      	movs	r3, #22
 80002da:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80002dc:	f001 fa00 	bl	80016e0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80002e0:	463a      	mov	r2, r7
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4611      	mov	r1, r2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fae2 	bl	80018b0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80002ec:	f001 fa1e 	bl	800172c <HAL_FLASH_Lock>

	//Copy data from backup to active region.
	HAL_FLASH_Unlock();
 80002f0:	f001 f9f6 	bl	80016e0 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	e01d      	b.n	8000336 <BL_voidCopyImageToActiveRegion+0x8a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80002fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000300:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	61fb      	str	r3, [r7, #28]
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 8000308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800030a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800030e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	623b      	str	r3, [r7, #32]
		Local_u32BackUpDataWord    = *((volatile uint32_t*)(Local_u32BackupDataAddress));
 8000316:	6a3b      	ldr	r3, [r7, #32]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32ActiveDataAddress, Local_u32BackUpDataWord);
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	2200      	movs	r2, #0
 8000320:	461c      	mov	r4, r3
 8000322:	4615      	mov	r5, r2
 8000324:	4622      	mov	r2, r4
 8000326:	462b      	mov	r3, r5
 8000328:	69f9      	ldr	r1, [r7, #28]
 800032a:	2002      	movs	r0, #2
 800032c:	f001 f968 	bl	8001600 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32BackupSizeInWord ; Local_uint32Count++)
 8000330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000332:	3301      	adds	r3, #1
 8000334:	627b      	str	r3, [r7, #36]	; 0x24
 8000336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	429a      	cmp	r2, r3
 800033c:	d3dd      	bcc.n	80002fa <BL_voidCopyImageToActiveRegion+0x4e>
	}
	HAL_FLASH_Lock();
 800033e:	f001 f9f5 	bl	800172c <HAL_FLASH_Lock>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS , Local_u32BackupSizeInWord*4);
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	4619      	mov	r1, r3
 8000348:	480a      	ldr	r0, [pc, #40]	; (8000374 <BL_voidCopyImageToActiveRegion+0xc8>)
 800034a:	f000 f883 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE );
 800034e:	f06f 010e 	mvn.w	r1, #14
 8000352:	4809      	ldr	r0, [pc, #36]	; (8000378 <BL_voidCopyImageToActiveRegion+0xcc>)
 8000354:	f000 f87e 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 8000358:	f06f 010c 	mvn.w	r1, #12
 800035c:	4807      	ldr	r0, [pc, #28]	; (800037c <BL_voidCopyImageToActiveRegion+0xd0>)
 800035e:	f000 f879 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
}
 8000362:	bf00      	nop
 8000364:	3728      	adds	r7, #40	; 0x28
 8000366:	46bd      	mov	sp, r7
 8000368:	bdb0      	pop	{r4, r5, r7, pc}
 800036a:	bf00      	nop
 800036c:	0801fc38 	.word	0x0801fc38
 8000370:	08005000 	.word	0x08005000
 8000374:	0801fc18 	.word	0x0801fc18
 8000378:	0801fc14 	.word	0x0801fc14
 800037c:	0801fc34 	.word	0x0801fc34

08000380 <BL_voidCopyImageToBackupRegion>:

void BL_voidCopyImageToBackupRegion(void)
{
 8000380:	b5b0      	push	{r4, r5, r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	uint32_t Local_u32BackupDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 8000386:	2300      	movs	r3, #0
 8000388:	623b      	str	r3, [r7, #32]
	uint32_t Local_u32ActiveDataAddress 		= BL_INITIALIZE_WITH_ZERO;
 800038a:	2300      	movs	r3, #0
 800038c:	61fb      	str	r3, [r7, #28]
	uint32_t Local_u32ActiveDataWord 			= BL_INITIALIZE_WITH_ZERO;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
	uint32_t Local_u32ActiveSizeInWord 			= BL_ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 8000392:	482b      	ldr	r0, [pc, #172]	; (8000440 <BL_voidCopyImageToBackupRegion+0xc0>)
 8000394:	f7ff feda 	bl	800014c <BL_ReadAddressData>
 8000398:	6178      	str	r0, [r7, #20]
	Local_u32ActiveSizeInWord = Local_u32ActiveSizeInWord / 4;
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	089b      	lsrs	r3, r3, #2
 800039e:	617b      	str	r3, [r7, #20]

	// Erase the Backup region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
	Local_eraseInfo.PageAddress = BACKUP_IMAGE;
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <BL_voidCopyImageToBackupRegion+0xc4>)
 80003aa:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 80003ac:	2316      	movs	r3, #22
 80003ae:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80003b0:	f001 f996 	bl	80016e0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80003b4:	463a      	mov	r2, r7
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fa78 	bl	80018b0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80003c0:	f001 f9b4 	bl	800172c <HAL_FLASH_Lock>

	//Copy data from active region to backup region
	HAL_FLASH_Unlock();
 80003c4:	f001 f98c 	bl	80016e0 <HAL_FLASH_Unlock>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	627b      	str	r3, [r7, #36]	; 0x24
 80003cc:	e01d      	b.n	800040a <BL_voidCopyImageToBackupRegion+0x8a>
	{
		Local_u32ActiveDataAddress = (ACTIVE_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80003ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80003d4:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	61fb      	str	r3, [r7, #28]
		Local_u32BackupDataAddress = (BACKUP_IMAGE + (WORD_SIZE_IN_BYTE * Local_uint32Count));
 80003dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003de:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80003e2:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	623b      	str	r3, [r7, #32]
		Local_u32ActiveDataWord    = *((volatile uint32_t*)(Local_u32ActiveDataAddress));
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	61bb      	str	r3, [r7, #24]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32BackupDataAddress, Local_u32ActiveDataWord);
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	2200      	movs	r2, #0
 80003f4:	461c      	mov	r4, r3
 80003f6:	4615      	mov	r5, r2
 80003f8:	4622      	mov	r2, r4
 80003fa:	462b      	mov	r3, r5
 80003fc:	6a39      	ldr	r1, [r7, #32]
 80003fe:	2002      	movs	r0, #2
 8000400:	f001 f8fe 	bl	8001600 <HAL_FLASH_Program>
	for(uint32_t Local_uint32Count = 0 ; Local_uint32Count  < Local_u32ActiveSizeInWord ; Local_uint32Count++)
 8000404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000406:	3301      	adds	r3, #1
 8000408:	627b      	str	r3, [r7, #36]	; 0x24
 800040a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	429a      	cmp	r2, r3
 8000410:	d3dd      	bcc.n	80003ce <BL_voidCopyImageToBackupRegion+0x4e>
	}
	HAL_FLASH_Lock();
 8000412:	f001 f98b 	bl	800172c <HAL_FLASH_Lock>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_BACKUP_REGION_ADDRESS , Local_u32ActiveSizeInWord*4 );
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4619      	mov	r1, r3
 800041c:	480a      	ldr	r0, [pc, #40]	; (8000448 <BL_voidCopyImageToBackupRegion+0xc8>)
 800041e:	f000 f819 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8000422:	f06f 010e 	mvn.w	r1, #14
 8000426:	4809      	ldr	r0, [pc, #36]	; (800044c <BL_voidCopyImageToBackupRegion+0xcc>)
 8000428:	f000 f814 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BACKUP_REGION_ADDRESS , BR_SET_IMAGE_BACKUP);
 800042c:	f06f 010c 	mvn.w	r1, #12
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <BL_voidCopyImageToBackupRegion+0xd0>)
 8000432:	f000 f80f 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
}
 8000436:	bf00      	nop
 8000438:	3728      	adds	r7, #40	; 0x28
 800043a:	46bd      	mov	sp, r7
 800043c:	bdb0      	pop	{r4, r5, r7, pc}
 800043e:	bf00      	nop
 8000440:	0801fc18 	.word	0x0801fc18
 8000444:	0800a800 	.word	0x0800a800
 8000448:	0801fc38 	.word	0x0801fc38
 800044c:	0801fc14 	.word	0x0801fc14
 8000450:	0801fc34 	.word	0x0801fc34

08000454 <BL_voidEraseRestoreHeaderPage>:

void BL_voidEraseRestoreHeaderPage(uint32_t Copy_u32Address, uint32_t Copy_u32NewData)
{
 8000454:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000458:	b0b2      	sub	sp, #200	; 0xc8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	uint32_t Local_u32AddressArray	[NUMBER_OF_FLAGS];
	uint32_t Local_u32DataArray		[NUMBER_OF_FLAGS];
	uint16_t Local_u16DataIndex        = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	uint16_t Local_u16DataCounter      = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	uint32_t Local_u32AddressCounter   = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	//Copy all flag to array before erase
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 8000472:	4b41      	ldr	r3, [pc, #260]	; (8000578 <BL_voidEraseRestoreHeaderPage+0x124>)
 8000474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000478:	e031      	b.n	80004de <BL_voidEraseRestoreHeaderPage+0x8a>
	{
		if( (Local_u32AddressCounter != Copy_u32Address) & (*((volatile uint32_t*)(Local_u32AddressCounter)) != ERASED_VALUE))
 800047a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	bf14      	ite	ne
 8000484:	2301      	movne	r3, #1
 8000486:	2300      	moveq	r3, #0
 8000488:	b2da      	uxtb	r2, r3
 800048a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000494:	bf14      	ite	ne
 8000496:	2301      	movne	r3, #1
 8000498:	2300      	moveq	r3, #0
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4013      	ands	r3, r2
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d017      	beq.n	80004d4 <BL_voidEraseRestoreHeaderPage+0x80>
		{
			Local_u32AddressArray[Local_u16DataIndex] = Local_u32AddressCounter;
 80004a4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	33c8      	adds	r3, #200	; 0xc8
 80004ac:	443b      	add	r3, r7
 80004ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80004b2:	f843 2c58 	str.w	r2, [r3, #-88]
			Local_u32DataArray[Local_u16DataIndex] = *((volatile uint32_t*)(Local_u32AddressCounter));
 80004b6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80004ba:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80004be:	6812      	ldr	r2, [r2, #0]
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	33c8      	adds	r3, #200	; 0xc8
 80004c4:	443b      	add	r3, r7
 80004c6:	f843 2ca8 	str.w	r2, [r3, #-168]
			Local_u16DataIndex++ ;
 80004ca:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80004ce:	3301      	adds	r3, #1
 80004d0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		Local_u32AddressCounter = Local_u32AddressCounter + WORD_SIZE_IN_BYTE;
 80004d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80004d8:	3304      	adds	r3, #4
 80004da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	for( Local_u32AddressCounter = START_OF_FLAG_REGION ;Local_u32AddressCounter < END_OF_FLAG_REGION;)
 80004de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80004e2:	4a26      	ldr	r2, [pc, #152]	; (800057c <BL_voidEraseRestoreHeaderPage+0x128>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d9c8      	bls.n	800047a <BL_voidEraseRestoreHeaderPage+0x26>
	}

	// Erase the Flag region.
	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80004e8:	2300      	movs	r3, #0
 80004ea:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.PageAddress = FLAG_IMAGE;
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <BL_voidEraseRestoreHeaderPage+0x124>)
 80004f2:	61bb      	str	r3, [r7, #24]
	Local_eraseInfo.NbPages = 1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61fb      	str	r3, [r7, #28]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80004f8:	f001 f8f2 	bl	80016e0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80004fc:	f107 020c 	add.w	r2, r7, #12
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4611      	mov	r1, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f001 f9d2 	bl	80018b0 <HAL_FLASHEx_Erase>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 800050c:	2300      	movs	r3, #0
 800050e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8000512:	e01a      	b.n	800054a <BL_voidEraseRestoreHeaderPage+0xf6>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Local_u32AddressArray[Local_u16DataCounter], Local_u32DataArray[Local_u16DataCounter]);
 8000514:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	33c8      	adds	r3, #200	; 0xc8
 800051c:	443b      	add	r3, r7
 800051e:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8000522:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	33c8      	adds	r3, #200	; 0xc8
 800052a:	443b      	add	r3, r7
 800052c:	f853 3ca8 	ldr.w	r3, [r3, #-168]
 8000530:	2200      	movs	r2, #0
 8000532:	4698      	mov	r8, r3
 8000534:	4691      	mov	r9, r2
 8000536:	4642      	mov	r2, r8
 8000538:	464b      	mov	r3, r9
 800053a:	2002      	movs	r0, #2
 800053c:	f001 f860 	bl	8001600 <HAL_FLASH_Program>
	for (Local_u16DataCounter = 0 ; Local_u16DataCounter < Local_u16DataIndex ; Local_u16DataCounter++ )
 8000540:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000544:	3301      	adds	r3, #1
 8000546:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800054a:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 800054e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8000552:	429a      	cmp	r2, r3
 8000554:	d3de      	bcc.n	8000514 <BL_voidEraseRestoreHeaderPage+0xc0>
	}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Copy_u32Address, Copy_u32NewData); //Replace new data to flash
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	2200      	movs	r2, #0
 800055a:	461c      	mov	r4, r3
 800055c:	4615      	mov	r5, r2
 800055e:	4622      	mov	r2, r4
 8000560:	462b      	mov	r3, r5
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	2002      	movs	r0, #2
 8000566:	f001 f84b 	bl	8001600 <HAL_FLASH_Program>
	HAL_FLASH_Lock();  //Locks again the flash memory
 800056a:	f001 f8df 	bl	800172c <HAL_FLASH_Lock>
}
 800056e:	bf00      	nop
 8000570:	37c8      	adds	r7, #200	; 0xc8
 8000572:	46bd      	mov	sp, r7
 8000574:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000578:	0801fc00 	.word	0x0801fc00
 800057c:	0801fc4f 	.word	0x0801fc4f

08000580 <BL_voidSetBranchingFlagAndMakeSWR>:

void BL_voidSetBranchingFlagAndMakeSWR(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	// Set Branching Flag To Receive New Code.
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER, BL_SET_BRANCHING_FLAG);
 8000584:	2100      	movs	r1, #0
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <BL_voidSetBranchingFlagAndMakeSWR+0x14>)
 8000588:	f7ff ff64 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	// Make Software Reset.
	BL_voidMakeSoftWareReset();
 800058c:	f000 f9de 	bl	800094c <BL_voidMakeSoftWareReset>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	0801fc00 	.word	0x0801fc00

08000598 <BL_voidUpdateHeaders>:

void BL_voidUpdateHeaders(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
	uint8_t  Local_u8DataArray[8]              = {BL_INITIALIZE_WITH_ZERO};
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	uint32_t Local_u32ActiveRegionStatus       = BL_INITIALIZE_WITH_ZERO;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
	uint32_t Local_u32ImageSizeInBytes         = BL_INITIALIZE_WITH_ZERO;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
	uint8_t	 Local_u8HeaderFlag                = BL_INITIALIZE_WITH_ZERO;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]

	Local_u32ActiveRegionStatus = BL_ReadAddressData(FLAG_STATUS_ACTIVE_REGION_ADDRESS);
 80005b2:	4831      	ldr	r0, [pc, #196]	; (8000678 <BL_voidUpdateHeaders+0xe0>)
 80005b4:	f7ff fdca 	bl	800014c <BL_ReadAddressData>
 80005b8:	6178      	str	r0, [r7, #20]

	//Structure CAN Transmit
	TxHeader.IDE = CAN_ID_STD;
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <BL_voidUpdateHeaders+0xe4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <BL_voidUpdateHeaders+0xe4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = NODE_ID_ONE;  // ID
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <BL_voidUpdateHeaders+0xe4>)
 80005c8:	f240 1201 	movw	r2, #257	; 0x101
 80005cc:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = HEADER_DATA_LENGTH;  // data length
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <BL_voidUpdateHeaders+0xe4>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	611a      	str	r2, [r3, #16]
	TxData[0] = UDS_MCU_ACKNOWLEDGE_UPGRADE_REQUEST;
 80005d4:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <BL_voidUpdateHeaders+0xe8>)
 80005d6:	2250      	movs	r2, #80	; 0x50
 80005d8:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <BL_voidUpdateHeaders+0xec>)
 80005dc:	4a28      	ldr	r2, [pc, #160]	; (8000680 <BL_voidUpdateHeaders+0xe8>)
 80005de:	4927      	ldr	r1, [pc, #156]	; (800067c <BL_voidUpdateHeaders+0xe4>)
 80005e0:	4829      	ldr	r0, [pc, #164]	; (8000688 <BL_voidUpdateHeaders+0xf0>)
 80005e2:	f000 fd38 	bl	8001056 <HAL_CAN_AddTxMessage>

	// Wait until FIFO 0 become pending state
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 80005e6:	bf00      	nop
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <BL_voidUpdateHeaders+0xf0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	f003 0303 	and.w	r3, r3, #3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f8      	beq.n	80005e8 <BL_voidUpdateHeaders+0x50>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, Local_u8DataArray);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4a24      	ldr	r2, [pc, #144]	; (800068c <BL_voidUpdateHeaders+0xf4>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4822      	ldr	r0, [pc, #136]	; (8000688 <BL_voidUpdateHeaders+0xf0>)
 80005fe:	f000 fdf9 	bl	80011f4 <HAL_CAN_GetRxMessage>

	Local_u8HeaderFlag = Local_u8DataArray[0];
 8000602:	793b      	ldrb	r3, [r7, #4]
 8000604:	73fb      	strb	r3, [r7, #15]

	if(Local_u8HeaderFlag == UDS_GWY_PROVIDE_HEADER)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2b34      	cmp	r3, #52	; 0x34
 800060a:	d130      	bne.n	800066e <BL_voidUpdateHeaders+0xd6>
	{
		TxData[0] = UDS_MCU_ACCEPT_RECEIVING_HEADER;
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <BL_voidUpdateHeaders+0xe8>)
 800060e:	2273      	movs	r2, #115	; 0x73
 8000610:	701a      	strb	r2, [r3, #0]
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <BL_voidUpdateHeaders+0xec>)
 8000614:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <BL_voidUpdateHeaders+0xe8>)
 8000616:	4919      	ldr	r1, [pc, #100]	; (800067c <BL_voidUpdateHeaders+0xe4>)
 8000618:	481b      	ldr	r0, [pc, #108]	; (8000688 <BL_voidUpdateHeaders+0xf0>)
 800061a:	f000 fd1c 	bl	8001056 <HAL_CAN_AddTxMessage>

		// Wait until FIFO 0 become pending state
		while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 800061e:	bf00      	nop
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <BL_voidUpdateHeaders+0xf0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	f003 0303 	and.w	r3, r3, #3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f8      	beq.n	8000620 <BL_voidUpdateHeaders+0x88>
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, Local_u8DataArray);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4a16      	ldr	r2, [pc, #88]	; (800068c <BL_voidUpdateHeaders+0xf4>)
 8000632:	2100      	movs	r1, #0
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <BL_voidUpdateHeaders+0xf0>)
 8000636:	f000 fddd 	bl	80011f4 <HAL_CAN_GetRxMessage>

		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) |
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	061a      	lsls	r2, r3, #24
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	431a      	orrs	r2, r3
									(Local_u8DataArray[1] << SHIFT_8_BIT) | (Local_u8DataArray[0] << SHIFT_0_BIT);
 8000644:	797b      	ldrb	r3, [r7, #5]
 8000646:	021b      	lsls	r3, r3, #8
		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) |
 8000648:	4313      	orrs	r3, r2
									(Local_u8DataArray[1] << SHIFT_8_BIT) | (Local_u8DataArray[0] << SHIFT_0_BIT);
 800064a:	793a      	ldrb	r2, [r7, #4]
 800064c:	4313      	orrs	r3, r2
		Local_u32ImageSizeInBytes = (Local_u8DataArray[3] << SHIFT_24_BIT) | (Local_u8DataArray[2] << SHIFT_16_BIT) |
 800064e:	613b      	str	r3, [r7, #16]

		if(Local_u32ActiveRegionStatus == BR_IMAGE_IS_ACTIVE )
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	f113 0f0f 	cmn.w	r3, #15
 8000656:	d101      	bne.n	800065c <BL_voidUpdateHeaders+0xc4>
		{
			BL_voidCopyImageToBackupRegion();
 8000658:	f7ff fe92 	bl	8000380 <BL_voidCopyImageToBackupRegion>
		}
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS,BR_SET_IMAGE_CORRUPTED);
 800065c:	f06f 010b 	mvn.w	r1, #11
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <BL_voidUpdateHeaders+0xe0>)
 8000662:	f7ff fef7 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
		BL_voidEraseRestoreHeaderPage(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS,Local_u32ImageSizeInBytes);
 8000666:	6939      	ldr	r1, [r7, #16]
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <BL_voidUpdateHeaders+0xf8>)
 800066a:	f7ff fef3 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	}
}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	0801fc14 	.word	0x0801fc14
 800067c:	20000060 	.word	0x20000060
 8000680:	20000094 	.word	0x20000094
 8000684:	200000a4 	.word	0x200000a4
 8000688:	2000002c 	.word	0x2000002c
 800068c:	20000078 	.word	0x20000078
 8000690:	0801fc18 	.word	0x0801fc18

08000694 <BL_voidReceiveUpdate>:

void BL_voidReceiveUpdate(void)
{
 8000694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000698:	b08c      	sub	sp, #48	; 0x30
 800069a:	af00      	add	r7, sp, #0
	uint32_t Local_u32HighByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Local_u32LowByteDataReceive  						  = BL_INITIALIZE_WITH_ZERO;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
	uint8_t  Local_u8RecordCounter                                = BL_RESET_COUNTER_TO_START_NEW_REC ;
 80006a4:	2300      	movs	r3, #0
 80006a6:	77fb      	strb	r3, [r7, #31]
	uint8_t  Local_u8GatewayRequest                               = BL_INITIALIZE_WITH_FALSE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	77bb      	strb	r3, [r7, #30]
	uint32_t Local_u32InactiveImageAddressCounter                 = ACTIVE_IMAGE_START_ADDRESS;
 80006ac:	4b86      	ldr	r3, [pc, #536]	; (80008c8 <BL_voidReceiveUpdate+0x234>)
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Local_u32SizeOfCode 								  = BL_ReadAddressData(FLAG_STATUS_SIZE_ACTIVE_REGION_ADDRESS);
 80006b0:	4886      	ldr	r0, [pc, #536]	; (80008cc <BL_voidReceiveUpdate+0x238>)
 80006b2:	f7ff fd4b 	bl	800014c <BL_ReadAddressData>
 80006b6:	62b8      	str	r0, [r7, #40]	; 0x28

	FLASH_EraseInitTypeDef Local_eraseInfo;
	uint32_t Local_u32PageError;
	// Erase the Active region.
	Local_eraseInfo.TypeErase = FLASH_TYPEERASE_PAGES;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
	Local_eraseInfo.Banks = FLASH_BANK_1;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
	Local_eraseInfo.PageAddress = ACTIVE_IMAGE;
 80006c0:	4b81      	ldr	r3, [pc, #516]	; (80008c8 <BL_voidReceiveUpdate+0x234>)
 80006c2:	617b      	str	r3, [r7, #20]
	Local_eraseInfo.NbPages =	FLASH_BANK_NUMOFPAGE;
 80006c4:	2316      	movs	r3, #22
 80006c6:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock(); //Unlocks the flash memory
 80006c8:	f001 f80a 	bl	80016e0 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&Local_eraseInfo, &Local_u32PageError); //Deletes given sectors
 80006cc:	f107 0208 	add.w	r2, r7, #8
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f8ea 	bl	80018b0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();  //Locks again the flash memory
 80006dc:	f001 f826 	bl	800172c <HAL_FLASH_Lock>

	//Structure CAN Transmit
	TxHeader.IDE = CAN_ID_STD;
 80006e0:	4b7b      	ldr	r3, [pc, #492]	; (80008d0 <BL_voidReceiveUpdate+0x23c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80006e6:	4b7a      	ldr	r3, [pc, #488]	; (80008d0 <BL_voidReceiveUpdate+0x23c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = NODE_ID_ONE;  // ID
 80006ec:	4b78      	ldr	r3, [pc, #480]	; (80008d0 <BL_voidReceiveUpdate+0x23c>)
 80006ee:	f240 1201 	movw	r2, #257	; 0x101
 80006f2:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = HEADER_DATA_LENGTH;  // data length
 80006f4:	4b76      	ldr	r3, [pc, #472]	; (80008d0 <BL_voidReceiveUpdate+0x23c>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	611a      	str	r2, [r3, #16]
	TxData[0] = UDS_MCU_ACKNOWLEDGE_HEADER_RECEIVED;
 80006fa:	4b76      	ldr	r3, [pc, #472]	; (80008d4 <BL_voidReceiveUpdate+0x240>)
 80006fc:	2274      	movs	r2, #116	; 0x74
 80006fe:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000700:	4b75      	ldr	r3, [pc, #468]	; (80008d8 <BL_voidReceiveUpdate+0x244>)
 8000702:	4a74      	ldr	r2, [pc, #464]	; (80008d4 <BL_voidReceiveUpdate+0x240>)
 8000704:	4972      	ldr	r1, [pc, #456]	; (80008d0 <BL_voidReceiveUpdate+0x23c>)
 8000706:	4875      	ldr	r0, [pc, #468]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 8000708:	f000 fca5 	bl	8001056 <HAL_CAN_AddTxMessage>

	//Loop to receive code update
	while(Local_u32SizeOfCode)
 800070c:	e0be      	b.n	800088c <BL_voidReceiveUpdate+0x1f8>
	{
		// Wait until FIFO 0 become pending state
		while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 800070e:	bf00      	nop
 8000710:	4b72      	ldr	r3, [pc, #456]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	f003 0303 	and.w	r3, r3, #3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d0f8      	beq.n	8000710 <BL_voidReceiveUpdate+0x7c>
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800071e:	4b70      	ldr	r3, [pc, #448]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000720:	4a70      	ldr	r2, [pc, #448]	; (80008e4 <BL_voidReceiveUpdate+0x250>)
 8000722:	2100      	movs	r1, #0
 8000724:	486d      	ldr	r0, [pc, #436]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 8000726:	f000 fd65 	bl	80011f4 <HAL_CAN_GetRxMessage>

		//Check UDS ID
		if(RxData[0] == UDS_GWY_REQUEST_SENDING_LINE_OF_CODE)
 800072a:	4b6d      	ldr	r3, [pc, #436]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b36      	cmp	r3, #54	; 0x36
 8000730:	f040 80ac 	bne.w	800088c <BL_voidReceiveUpdate+0x1f8>
		{
			TxData[0] = UDS_MCU_ACCEPT_RECEIVING_PACKET_OF_CODE;
 8000734:	4b67      	ldr	r3, [pc, #412]	; (80008d4 <BL_voidReceiveUpdate+0x240>)
 8000736:	2275      	movs	r2, #117	; 0x75
 8000738:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800073a:	4b67      	ldr	r3, [pc, #412]	; (80008d8 <BL_voidReceiveUpdate+0x244>)
 800073c:	4a65      	ldr	r2, [pc, #404]	; (80008d4 <BL_voidReceiveUpdate+0x240>)
 800073e:	4964      	ldr	r1, [pc, #400]	; (80008d0 <BL_voidReceiveUpdate+0x23c>)
 8000740:	4866      	ldr	r0, [pc, #408]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 8000742:	f000 fc88 	bl	8001056 <HAL_CAN_AddTxMessage>

			if (Local_u32SizeOfCode > 8)
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	2b08      	cmp	r3, #8
 800074a:	d94b      	bls.n	80007e4 <BL_voidReceiveUpdate+0x150>
			{
				while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 800074c:	bf00      	nop
 800074e:	4b63      	ldr	r3, [pc, #396]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	f003 0303 	and.w	r3, r3, #3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0f8      	beq.n	800074e <BL_voidReceiveUpdate+0xba>
				HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800075c:	4b60      	ldr	r3, [pc, #384]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 800075e:	4a61      	ldr	r2, [pc, #388]	; (80008e4 <BL_voidReceiveUpdate+0x250>)
 8000760:	2100      	movs	r1, #0
 8000762:	485e      	ldr	r0, [pc, #376]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 8000764:	f000 fd46 	bl	80011f4 <HAL_CAN_GetRxMessage>

				Local_u32HighByteDataReceive = (RxData[7] << SHIFT_24_BIT) | (RxData[6] << SHIFT_16_BIT)
 8000768:	4b5d      	ldr	r3, [pc, #372]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 800076a:	79db      	ldrb	r3, [r3, #7]
 800076c:	061a      	lsls	r2, r3, #24
 800076e:	4b5c      	ldr	r3, [pc, #368]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000770:	799b      	ldrb	r3, [r3, #6]
 8000772:	041b      	lsls	r3, r3, #16
 8000774:	431a      	orrs	r2, r3
											| (RxData[5] << SHIFT_8_BIT) |(RxData[4] << SHIFT_0_BIT) ;
 8000776:	4b5a      	ldr	r3, [pc, #360]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	4313      	orrs	r3, r2
 800077e:	4a58      	ldr	r2, [pc, #352]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000780:	7912      	ldrb	r2, [r2, #4]
 8000782:	4313      	orrs	r3, r2
				Local_u32HighByteDataReceive = (RxData[7] << SHIFT_24_BIT) | (RxData[6] << SHIFT_16_BIT)
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
				Local_u32LowByteDataReceive  = (RxData[3] << SHIFT_24_BIT) | (RxData[2] << SHIFT_16_BIT)
 8000786:	4b56      	ldr	r3, [pc, #344]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000788:	78db      	ldrb	r3, [r3, #3]
 800078a:	061a      	lsls	r2, r3, #24
 800078c:	4b54      	ldr	r3, [pc, #336]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 800078e:	789b      	ldrb	r3, [r3, #2]
 8000790:	041b      	lsls	r3, r3, #16
 8000792:	431a      	orrs	r2, r3
											| (RxData[1] << SHIFT_8_BIT) | (RxData[0] << SHIFT_0_BIT) ;
 8000794:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000796:	785b      	ldrb	r3, [r3, #1]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4313      	orrs	r3, r2
 800079c:	4a50      	ldr	r2, [pc, #320]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	4313      	orrs	r3, r2
				Local_u32LowByteDataReceive  = (RxData[3] << SHIFT_24_BIT) | (RxData[2] << SHIFT_16_BIT)
 80007a2:	623b      	str	r3, [r7, #32]

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 80007a4:	f000 ff9c 	bl	80016e0 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	2200      	movs	r2, #0
 80007ac:	461c      	mov	r4, r3
 80007ae:	4615      	mov	r5, r2
 80007b0:	4622      	mov	r2, r4
 80007b2:	462b      	mov	r3, r5
 80007b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80007b6:	2002      	movs	r0, #2
 80007b8:	f000 ff22 	bl	8001600 <HAL_FLASH_Program>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 80007bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007be:	1d19      	adds	r1, r3, #4
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	2200      	movs	r2, #0
 80007c4:	4698      	mov	r8, r3
 80007c6:	4691      	mov	r9, r2
 80007c8:	4642      	mov	r2, r8
 80007ca:	464b      	mov	r3, r9
 80007cc:	2002      	movs	r0, #2
 80007ce:	f000 ff17 	bl	8001600 <HAL_FLASH_Program>
				HAL_FLASH_Lock();  //Locks again the flash memory
 80007d2:	f000 ffab 	bl	800172c <HAL_FLASH_Lock>

				Local_u32InactiveImageAddressCounter += 8;
 80007d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d8:	3308      	adds	r3, #8
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
				Local_u32SizeOfCode -= 8;
 80007dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007de:	3b08      	subs	r3, #8
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80007e2:	e04a      	b.n	800087a <BL_voidReceiveUpdate+0x1e6>
			}
			else
			{
				while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 80007e4:	bf00      	nop
 80007e6:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	f003 0303 	and.w	r3, r3, #3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0f8      	beq.n	80007e6 <BL_voidReceiveUpdate+0x152>
				HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80007f4:	4b3a      	ldr	r3, [pc, #232]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 80007f6:	4a3b      	ldr	r2, [pc, #236]	; (80008e4 <BL_voidReceiveUpdate+0x250>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	4838      	ldr	r0, [pc, #224]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 80007fc:	f000 fcfa 	bl	80011f4 <HAL_CAN_GetRxMessage>

				Local_u32HighByteDataReceive = (RxData[7] << SHIFT_24_BIT) | (RxData[6] << SHIFT_16_BIT)
 8000800:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000802:	79db      	ldrb	r3, [r3, #7]
 8000804:	061a      	lsls	r2, r3, #24
 8000806:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000808:	799b      	ldrb	r3, [r3, #6]
 800080a:	041b      	lsls	r3, r3, #16
 800080c:	431a      	orrs	r2, r3
											| (RxData[5] << SHIFT_8_BIT) |(RxData[4] << SHIFT_0_BIT) ;
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000810:	795b      	ldrb	r3, [r3, #5]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	4313      	orrs	r3, r2
 8000816:	4a32      	ldr	r2, [pc, #200]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000818:	7912      	ldrb	r2, [r2, #4]
 800081a:	4313      	orrs	r3, r2
				Local_u32HighByteDataReceive = (RxData[7] << SHIFT_24_BIT) | (RxData[6] << SHIFT_16_BIT)
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
				Local_u32LowByteDataReceive  = (RxData[3] << SHIFT_24_BIT) | (RxData[2] << SHIFT_16_BIT)
 800081e:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000820:	78db      	ldrb	r3, [r3, #3]
 8000822:	061a      	lsls	r2, r3, #24
 8000824:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	041b      	lsls	r3, r3, #16
 800082a:	431a      	orrs	r2, r3
											| (RxData[1] << SHIFT_8_BIT) | (RxData[0] << SHIFT_0_BIT) ;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 800082e:	785b      	ldrb	r3, [r3, #1]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	4313      	orrs	r3, r2
 8000834:	4a2a      	ldr	r2, [pc, #168]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 8000836:	7812      	ldrb	r2, [r2, #0]
 8000838:	4313      	orrs	r3, r2
				Local_u32LowByteDataReceive  = (RxData[3] << SHIFT_24_BIT) | (RxData[2] << SHIFT_16_BIT)
 800083a:	623b      	str	r3, [r7, #32]

				HAL_FLASH_Unlock(); //Unlocks the flash memory
 800083c:	f000 ff50 	bl	80016e0 <HAL_FLASH_Unlock>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter, Local_u32LowByteDataReceive);
 8000840:	6a3b      	ldr	r3, [r7, #32]
 8000842:	2200      	movs	r2, #0
 8000844:	469a      	mov	sl, r3
 8000846:	4693      	mov	fp, r2
 8000848:	4652      	mov	r2, sl
 800084a:	465b      	mov	r3, fp
 800084c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800084e:	2002      	movs	r0, #2
 8000850:	f000 fed6 	bl	8001600 <HAL_FLASH_Program>
				if(RxHeader.DLC > 4){
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <BL_voidReceiveUpdate+0x250>)
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	2b04      	cmp	r3, #4
 800085a:	d90a      	bls.n	8000872 <BL_voidReceiveUpdate+0x1de>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Local_u32InactiveImageAddressCounter + 4, Local_u32HighByteDataReceive);
 800085c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085e:	1d19      	adds	r1, r3, #4
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	2200      	movs	r2, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800086c:	2002      	movs	r0, #2
 800086e:	f000 fec7 	bl	8001600 <HAL_FLASH_Program>
				}
				HAL_FLASH_Lock();  //Locks again the flash memory
 8000872:	f000 ff5b 	bl	800172c <HAL_FLASH_Lock>

				Local_u32SizeOfCode -= Local_u32SizeOfCode ;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			TxData[0] = UDS_MCU_ACKNOWLEDGE_LINE_OF_CODE_RECEIVED;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <BL_voidReceiveUpdate+0x240>)
 800087c:	2276      	movs	r2, #118	; 0x76
 800087e:	701a      	strb	r2, [r3, #0]
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <BL_voidReceiveUpdate+0x244>)
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <BL_voidReceiveUpdate+0x240>)
 8000884:	4912      	ldr	r1, [pc, #72]	; (80008d0 <BL_voidReceiveUpdate+0x23c>)
 8000886:	4815      	ldr	r0, [pc, #84]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 8000888:	f000 fbe5 	bl	8001056 <HAL_CAN_AddTxMessage>
	while(Local_u32SizeOfCode)
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	2b00      	cmp	r3, #0
 8000890:	f47f af3d 	bne.w	800070e <BL_voidReceiveUpdate+0x7a>
		}
	}
	// Wait for finish code of GW
	while(!(hcan.Instance->RF0R & CAN_RF0R_FMP0));
 8000894:	bf00      	nop
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f8      	beq.n	8000896 <BL_voidReceiveUpdate+0x202>
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <BL_voidReceiveUpdate+0x250>)
 80008a8:	2100      	movs	r1, #0
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <BL_voidReceiveUpdate+0x248>)
 80008ac:	f000 fca2 	bl	80011f4 <HAL_CAN_GetRxMessage>
	if (RxData[0] == UDS_GWY_ACKNOWLEDGE_FINISHING_SENDING_CODE)
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <BL_voidReceiveUpdate+0x24c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b37      	cmp	r3, #55	; 0x37
 80008b6:	d101      	bne.n	80008bc <BL_voidReceiveUpdate+0x228>
	{
		BL_voidFinishBootLoader();
 80008b8:	f000 f816 	bl	80008e8 <BL_voidFinishBootLoader>
	}
}
 80008bc:	bf00      	nop
 80008be:	3730      	adds	r7, #48	; 0x30
 80008c0:	46bd      	mov	sp, r7
 80008c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80008c6:	bf00      	nop
 80008c8:	08005000 	.word	0x08005000
 80008cc:	0801fc18 	.word	0x0801fc18
 80008d0:	20000060 	.word	0x20000060
 80008d4:	20000094 	.word	0x20000094
 80008d8:	200000a4 	.word	0x200000a4
 80008dc:	2000002c 	.word	0x2000002c
 80008e0:	2000009c 	.word	0x2000009c
 80008e4:	20000078 	.word	0x20000078

080008e8 <BL_voidFinishBootLoader>:

void BL_voidFinishBootLoader(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	//Structure CAN Transmit
	TxHeader.IDE = CAN_ID_STD;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <BL_voidFinishBootLoader+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <BL_voidFinishBootLoader+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = NODE_ID_ONE;  // ID
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <BL_voidFinishBootLoader+0x4c>)
 80008fa:	f240 1201 	movw	r2, #257	; 0x101
 80008fe:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = HEADER_DATA_LENGTH;  // data length
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <BL_voidFinishBootLoader+0x4c>)
 8000902:	2201      	movs	r2, #1
 8000904:	611a      	str	r2, [r3, #16]
	TxData[0] = UDS_MCU_ACKNOWLEDGE_FINISHING;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <BL_voidFinishBootLoader+0x50>)
 8000908:	2277      	movs	r2, #119	; 0x77
 800090a:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <BL_voidFinishBootLoader+0x54>)
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <BL_voidFinishBootLoader+0x50>)
 8000910:	4908      	ldr	r1, [pc, #32]	; (8000934 <BL_voidFinishBootLoader+0x4c>)
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <BL_voidFinishBootLoader+0x58>)
 8000914:	f000 fb9f 	bl	8001056 <HAL_CAN_AddTxMessage>

	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_ACTIVE_REGION_ADDRESS , BR_SET_IMAGE_ACTIVE);
 8000918:	f06f 010e 	mvn.w	r1, #14
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <BL_voidFinishBootLoader+0x5c>)
 800091e:	f7ff fd99 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidEraseRestoreHeaderPage(FLAG_STATUS_BOOTLOADER , BL_RESET_BRANCHING_FLAG);
 8000922:	f04f 31ff 	mov.w	r1, #4294967295
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <BL_voidFinishBootLoader+0x60>)
 8000928:	f7ff fd94 	bl	8000454 <BL_voidEraseRestoreHeaderPage>
	BL_voidMakeSoftWareReset();
 800092c:	f000 f80e 	bl	800094c <BL_voidMakeSoftWareReset>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000060 	.word	0x20000060
 8000938:	20000094 	.word	0x20000094
 800093c:	200000a4 	.word	0x200000a4
 8000940:	2000002c 	.word	0x2000002c
 8000944:	0801fc14 	.word	0x0801fc14
 8000948:	0801fc00 	.word	0x0801fc00

0800094c <BL_voidMakeSoftWareReset>:

void BL_voidMakeSoftWareReset(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
#ifdef Debug
	__HAL_DBGMCU_FREEZE_IWDG();
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <BL_voidMakeSoftWareReset+0x38>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <BL_voidMakeSoftWareReset+0x38>)
 8000956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095a:	6053      	str	r3, [r2, #4]
#endif

	hiwdg.Instance = IWDG;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <BL_voidMakeSoftWareReset+0x3c>)
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <BL_voidMakeSoftWareReset+0x40>)
 8000960:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <BL_voidMakeSoftWareReset+0x3c>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 9;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <BL_voidMakeSoftWareReset+0x3c>)
 800096a:	2209      	movs	r2, #9
 800096c:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <BL_voidMakeSoftWareReset+0x3c>)
 8000970:	f001 f9e2 	bl	8001d38 <HAL_IWDG_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <BL_voidMakeSoftWareReset+0x32>
	{
		Error_Handler();
 800097a:	f000 f8e5 	bl	8000b48 <Error_Handler>
	}
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e0042000 	.word	0xe0042000
 8000988:	20000054 	.word	0x20000054
 800098c:	40003000 	.word	0x40003000

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 f9a0 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f80c 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 f888 	bl	8000ab0 <MX_GPIO_Init>
  MX_CAN_Init();
 80009a0:	f000 f850 	bl	8000a44 <MX_CAN_Init>

  HAL_CAN_Start(&hcan);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <main+0x20>)
 80009a6:	f000 fb12 	bl	8000fce <HAL_CAN_Start>

   // Activate the notification
//HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
  /* USER CODE BEGIN 2 */
  BL_voidBootLoader_Init();
 80009aa:	f7ff fbdd 	bl	8000168 <BL_voidBootLoader_Init>
  /* USER CODE END 2 */
  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <main+0x1e>
 80009b0:	2000002c 	.word	0x2000002c

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b090      	sub	sp, #64	; 0x40
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	2228      	movs	r2, #40	; 0x28
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fdd8 	bl	8002578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009d6:	2309      	movs	r3, #9
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f9db 	bl	8001dbc <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 f89c 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2302      	movs	r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fc48 	bl	80022c0 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a36:	f000 f887 	bl	8000b48 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3740      	adds	r7, #64	; 0x40
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a4a:	4a18      	ldr	r2, [pc, #96]	; (8000aac <MX_CAN_Init+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a50:	2204      	movs	r2, #4
 8000a52:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a66:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a6e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_CAN_Init+0x64>)
 8000a96:	f000 f99f 	bl	8000dd8 <HAL_CAN_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000aa0:	f000 f852 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000002c 	.word	0x2000002c
 8000aac:	40006400 	.word	0x40006400

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000aca:	f043 0310 	orr.w	r3, r3, #16
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0310 	and.w	r3, r3, #16
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000ae2:	f043 0320 	orr.w	r3, r3, #32
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_GPIO_Init+0x90>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_GPIO_Init+0x94>)
 8000b14:	f001 f8f8 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_GPIO_Init+0x94>)
 8000b32:	f000 ff65 	bl	8001a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40011000 	.word	0x40011000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_MspInit+0x40>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_MspInit+0x40>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_MspInit+0x40>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_MspInit+0x40>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_MspInit+0x40>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_MspInit+0x40>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <HAL_CAN_MspInit+0x8c>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d131      	bne.n	8000c1c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_CAN_MspInit+0x90>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <HAL_CAN_MspInit+0x90>)
 8000bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc2:	61d3      	str	r3, [r2, #28]
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_CAN_MspInit+0x90>)
 8000bc6:	69db      	ldr	r3, [r3, #28]
 8000bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_CAN_MspInit+0x90>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_CAN_MspInit+0x90>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_CAN_MspInit+0x90>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <HAL_CAN_MspInit+0x94>)
 8000bfe:	f000 feff 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_CAN_MspInit+0x94>)
 8000c18:	f000 fef2 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c1c:	bf00      	nop
 8000c1e:	3720      	adds	r7, #32
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40006400 	.word	0x40006400
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c76:	f000 f893 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff fff7 	bl	8000c7e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480b      	ldr	r0, [pc, #44]	; (8000cc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c92:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c94:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ca8:	4c09      	ldr	r4, [pc, #36]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f001 fc67 	bl	8002588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cba:	f7ff fe69 	bl	8000990 <main>
  bx lr
 8000cbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc8:	08002614 	.word	0x08002614
  ldr r2, =_sbss
 8000ccc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cd0:	200000d0 	.word	0x200000d0

08000cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_2_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x28>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x28>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 fc55 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f000 f826 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff ff2e 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40022000 	.word	0x40022000

08000d04 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_DeInit+0x2c>)
 8000d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_DeInit+0x2c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_DeInit+0x2c>)
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_DeInit+0x2c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000d24:	f000 f806 	bl	8000d34 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fc41 	bl	80015e6 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 fc17 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x1c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_IncTick+0x20>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <HAL_IncTick+0x20>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	200000a8 	.word	0x200000a8

08000dc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <HAL_GetTick+0x10>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	200000a8 	.word	0x200000a8

08000dd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e0ed      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d102      	bne.n	8000dfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fece 	bl	8000b98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0201 	orr.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e0c:	f7ff ffda 	bl	8000dc4 <HAL_GetTick>
 8000e10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e12:	e012      	b.n	8000e3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e14:	f7ff ffd6 	bl	8000dc4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	d90b      	bls.n	8000e3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2205      	movs	r2, #5
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e0c5      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0e5      	beq.n	8000e14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0202 	bic.w	r2, r2, #2
 8000e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e58:	f7ff ffb4 	bl	8000dc4 <HAL_GetTick>
 8000e5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e5e:	e012      	b.n	8000e86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e60:	f7ff ffb0 	bl	8000dc4 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b0a      	cmp	r3, #10
 8000e6c:	d90b      	bls.n	8000e86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e09f      	b.n	8000fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1e5      	bne.n	8000e60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7e1b      	ldrb	r3, [r3, #24]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d108      	bne.n	8000eae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e007      	b.n	8000ebe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7e5b      	ldrb	r3, [r3, #25]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d108      	bne.n	8000ed8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e007      	b.n	8000ee8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7e9b      	ldrb	r3, [r3, #26]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d108      	bne.n	8000f02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0220 	orr.w	r2, r2, #32
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e007      	b.n	8000f12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0220 	bic.w	r2, r2, #32
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7edb      	ldrb	r3, [r3, #27]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d108      	bne.n	8000f2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0210 	bic.w	r2, r2, #16
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e007      	b.n	8000f3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0210 	orr.w	r2, r2, #16
 8000f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7f1b      	ldrb	r3, [r3, #28]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0208 	orr.w	r2, r2, #8
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e007      	b.n	8000f66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0208 	bic.w	r2, r2, #8
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7f5b      	ldrb	r3, [r3, #29]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d108      	bne.n	8000f80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 0204 	orr.w	r2, r2, #4
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e007      	b.n	8000f90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0204 	bic.w	r2, r2, #4
 8000f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	ea42 0103 	orr.w	r1, r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	1e5a      	subs	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d12e      	bne.n	8001040 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0201 	bic.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ffa:	f7ff fee3 	bl	8000dc4 <HAL_GetTick>
 8000ffe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001000:	e012      	b.n	8001028 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001002:	f7ff fedf 	bl	8000dc4 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b0a      	cmp	r3, #10
 800100e:	d90b      	bls.n	8001028 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2205      	movs	r2, #5
 8001020:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e012      	b.n	800104e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1e5      	bne.n	8001002 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	e006      	b.n	800104e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
  }
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001056:	b480      	push	{r7}
 8001058:	b089      	sub	sp, #36	; 0x24
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001074:	7ffb      	ldrb	r3, [r7, #31]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d003      	beq.n	8001082 <HAL_CAN_AddTxMessage+0x2c>
 800107a:	7ffb      	ldrb	r3, [r7, #31]
 800107c:	2b02      	cmp	r3, #2
 800107e:	f040 80ad 	bne.w	80011dc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10a      	bne.n	80010a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001092:	2b00      	cmp	r3, #0
 8001094:	d105      	bne.n	80010a2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 8095 	beq.w	80011cc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	0e1b      	lsrs	r3, r3, #24
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010ac:	2201      	movs	r2, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	409a      	lsls	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10d      	bne.n	80010da <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010c8:	68f9      	ldr	r1, [r7, #12]
 80010ca:	6809      	ldr	r1, [r1, #0]
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3318      	adds	r3, #24
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	440b      	add	r3, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e00f      	b.n	80010fa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3318      	adds	r3, #24
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	440b      	add	r3, r1
 80010f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6819      	ldr	r1, [r3, #0]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3318      	adds	r3, #24
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	440b      	add	r3, r1
 800110a:	3304      	adds	r3, #4
 800110c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	7d1b      	ldrb	r3, [r3, #20]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d111      	bne.n	800113a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3318      	adds	r3, #24
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	4413      	add	r3, r2
 8001122:	3304      	adds	r3, #4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	6811      	ldr	r1, [r2, #0]
 800112a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3318      	adds	r3, #24
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	440b      	add	r3, r1
 8001136:	3304      	adds	r3, #4
 8001138:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3307      	adds	r3, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	061a      	lsls	r2, r3, #24
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3306      	adds	r3, #6
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	041b      	lsls	r3, r3, #16
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3305      	adds	r3, #5
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	4313      	orrs	r3, r2
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	3204      	adds	r2, #4
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	4610      	mov	r0, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	6811      	ldr	r1, [r2, #0]
 8001162:	ea43 0200 	orr.w	r2, r3, r0
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	440b      	add	r3, r1
 800116c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001170:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3303      	adds	r3, #3
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	061a      	lsls	r2, r3, #24
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3302      	adds	r3, #2
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	041b      	lsls	r3, r3, #16
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3301      	adds	r3, #1
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	4313      	orrs	r3, r2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	4610      	mov	r0, r2
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	6811      	ldr	r1, [r2, #0]
 8001198:	ea43 0200 	orr.w	r2, r3, r0
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	440b      	add	r3, r1
 80011a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3318      	adds	r3, #24
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	6811      	ldr	r1, [r2, #0]
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	3318      	adds	r3, #24
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	440b      	add	r3, r1
 80011c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e00e      	b.n	80011ea <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e006      	b.n	80011ea <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
  }
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001208:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d003      	beq.n	8001218 <HAL_CAN_GetRxMessage+0x24>
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	2b02      	cmp	r3, #2
 8001214:	f040 8103 	bne.w	800141e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10e      	bne.n	800123c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d116      	bne.n	800125a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0f7      	b.n	800142c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d107      	bne.n	800125a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0e8      	b.n	800142c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	331b      	adds	r3, #27
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0204 	and.w	r2, r3, #4
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10c      	bne.n	8001292 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	331b      	adds	r3, #27
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	0d5b      	lsrs	r3, r3, #21
 8001288:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e00b      	b.n	80012aa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	331b      	adds	r3, #27
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4413      	add	r3, r2
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	331b      	adds	r3, #27
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0202 	and.w	r2, r3, #2
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	331b      	adds	r3, #27
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4413      	add	r3, r2
 80012cc:	3304      	adds	r3, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2208      	movs	r2, #8
 80012dc:	611a      	str	r2, [r3, #16]
 80012de:	e00b      	b.n	80012f8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	331b      	adds	r3, #27
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	3304      	adds	r3, #4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 020f 	and.w	r2, r3, #15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	331b      	adds	r3, #27
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	3304      	adds	r3, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b2da      	uxtb	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	331b      	adds	r3, #27
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	4413      	add	r3, r2
 800131c:	3304      	adds	r3, #4
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0c1b      	lsrs	r3, r3, #16
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4413      	add	r3, r2
 8001348:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	0a1a      	lsrs	r2, r3, #8
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0c1a      	lsrs	r2, r3, #16
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	3302      	adds	r3, #2
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0e1a      	lsrs	r2, r3, #24
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3303      	adds	r3, #3
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	4413      	add	r3, r2
 8001396:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3304      	adds	r3, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0a1a      	lsrs	r2, r3, #8
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	3305      	adds	r3, #5
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	4413      	add	r3, r2
 80013c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0c1a      	lsrs	r2, r3, #16
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3306      	adds	r3, #6
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4413      	add	r3, r2
 80013e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0e1a      	lsrs	r2, r3, #24
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3307      	adds	r3, #7
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d108      	bne.n	800140a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f042 0220 	orr.w	r2, r2, #32
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	e007      	b.n	800141a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	e006      	b.n	800142c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
  }
}
 800142c:	4618      	mov	r0, r3
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
	...

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff90 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff49 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff5e 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff90 	bl	80014f0 <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5f 	bl	800149c <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffb0 	bl	8001554 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800161a:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <HAL_FLASH_Program+0xd8>)
 800161c:	7e1b      	ldrb	r3, [r3, #24]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d101      	bne.n	8001626 <HAL_FLASH_Program+0x26>
 8001622:	2302      	movs	r3, #2
 8001624:	e054      	b.n	80016d0 <HAL_FLASH_Program+0xd0>
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <HAL_FLASH_Program+0xd8>)
 8001628:	2201      	movs	r2, #1
 800162a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800162c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001630:	f000 f8a8 	bl	8001784 <FLASH_WaitForLastOperation>
 8001634:	4603      	mov	r3, r0
 8001636:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d144      	bne.n	80016c8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d102      	bne.n	800164a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001644:	2301      	movs	r3, #1
 8001646:	757b      	strb	r3, [r7, #21]
 8001648:	e007      	b.n	800165a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d102      	bne.n	8001656 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001650:	2302      	movs	r3, #2
 8001652:	757b      	strb	r3, [r7, #21]
 8001654:	e001      	b.n	800165a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001656:	2304      	movs	r3, #4
 8001658:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800165a:	2300      	movs	r3, #0
 800165c:	75bb      	strb	r3, [r7, #22]
 800165e:	e02d      	b.n	80016bc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001660:	7dbb      	ldrb	r3, [r7, #22]
 8001662:	005a      	lsls	r2, r3, #1
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	eb02 0c03 	add.w	ip, r2, r3
 800166a:	7dbb      	ldrb	r3, [r7, #22]
 800166c:	0119      	lsls	r1, r3, #4
 800166e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001672:	f1c1 0620 	rsb	r6, r1, #32
 8001676:	f1a1 0020 	sub.w	r0, r1, #32
 800167a:	fa22 f401 	lsr.w	r4, r2, r1
 800167e:	fa03 f606 	lsl.w	r6, r3, r6
 8001682:	4334      	orrs	r4, r6
 8001684:	fa23 f000 	lsr.w	r0, r3, r0
 8001688:	4304      	orrs	r4, r0
 800168a:	fa23 f501 	lsr.w	r5, r3, r1
 800168e:	b2a3      	uxth	r3, r4
 8001690:	4619      	mov	r1, r3
 8001692:	4660      	mov	r0, ip
 8001694:	f000 f85a 	bl	800174c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001698:	f24c 3050 	movw	r0, #50000	; 0xc350
 800169c:	f000 f872 	bl	8001784 <FLASH_WaitForLastOperation>
 80016a0:	4603      	mov	r3, r0
 80016a2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_FLASH_Program+0xdc>)
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <HAL_FLASH_Program+0xdc>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d107      	bne.n	80016c6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80016b6:	7dbb      	ldrb	r3, [r7, #22]
 80016b8:	3301      	adds	r3, #1
 80016ba:	75bb      	strb	r3, [r7, #22]
 80016bc:	7dba      	ldrb	r2, [r7, #22]
 80016be:	7d7b      	ldrb	r3, [r7, #21]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3cd      	bcc.n	8001660 <HAL_FLASH_Program+0x60>
 80016c4:	e000      	b.n	80016c8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80016c6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_FLASH_Program+0xd8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	761a      	strb	r2, [r3, #24]

  return status;
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	200000b0 	.word	0x200000b0
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_FLASH_Unlock+0x40>)
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00d      	beq.n	8001712 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_FLASH_Unlock+0x40>)
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_FLASH_Unlock+0x44>)
 80016fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_FLASH_Unlock+0x40>)
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_FLASH_Unlock+0x48>)
 8001700:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_FLASH_Unlock+0x40>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001712:	79fb      	ldrb	r3, [r7, #7]
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000
 8001724:	45670123 	.word	0x45670123
 8001728:	cdef89ab 	.word	0xcdef89ab

0800172c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_FLASH_Lock+0x1c>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_FLASH_Lock+0x1c>)
 8001736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40022000 	.word	0x40022000

0800174c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <FLASH_Program_HalfWord+0x30>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <FLASH_Program_HalfWord+0x34>)
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <FLASH_Program_HalfWord+0x34>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	887a      	ldrh	r2, [r7, #2]
 800176e:	801a      	strh	r2, [r3, #0]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200000b0 	.word	0x200000b0
 8001780:	40022000 	.word	0x40022000

08001784 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff fb1a 	bl	8000dc4 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001792:	e010      	b.n	80017b6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d00c      	beq.n	80017b6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <FLASH_WaitForLastOperation+0x2e>
 80017a2:	f7ff fb0f 	bl	8000dc4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d201      	bcs.n	80017b6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e025      	b.n	8001802 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <FLASH_WaitForLastOperation+0x88>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e8      	bne.n	8001794 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <FLASH_WaitForLastOperation+0x88>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f003 0320 	and.w	r3, r3, #32
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <FLASH_WaitForLastOperation+0x88>)
 80017d0:	2220      	movs	r2, #32
 80017d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <FLASH_WaitForLastOperation+0x88>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10b      	bne.n	80017f8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <FLASH_WaitForLastOperation+0x88>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <FLASH_WaitForLastOperation+0x88>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80017f8:	f000 f80a 	bl	8001810 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <FLASH_SetErrorCode+0x98>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <FLASH_SetErrorCode+0x9c>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <FLASH_SetErrorCode+0x9c>)
 8001830:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <FLASH_SetErrorCode+0x98>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <FLASH_SetErrorCode+0x9c>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <FLASH_SetErrorCode+0x9c>)
 8001850:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <FLASH_SetErrorCode+0x98>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <FLASH_SetErrorCode+0x9c>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <FLASH_SetErrorCode+0x9c>)
 8001870:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <FLASH_SetErrorCode+0x98>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <FLASH_SetErrorCode+0x98>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f240 1201 	movw	r2, #257	; 0x101
 8001884:	4293      	cmp	r3, r2
 8001886:	d106      	bne.n	8001896 <FLASH_SetErrorCode+0x86>
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <FLASH_SetErrorCode+0x98>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <FLASH_SetErrorCode+0x98>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	61d3      	str	r3, [r2, #28]
}  
 8001894:	e002      	b.n	800189c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <FLASH_SetErrorCode+0x98>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60d3      	str	r3, [r2, #12]
}  
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000
 80018ac:	200000b0 	.word	0x200000b0

080018b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <HAL_FLASHEx_Erase+0xd0>)
 80018c4:	7e1b      	ldrb	r3, [r3, #24]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_FLASHEx_Erase+0x1e>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e053      	b.n	8001976 <HAL_FLASHEx_Erase+0xc6>
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_FLASHEx_Erase+0xd0>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d116      	bne.n	800190a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018e0:	f7ff ff50 	bl	8001784 <FLASH_WaitForLastOperation>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d141      	bne.n	800196e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 f84c 	bl	8001988 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018f4:	f7ff ff46 	bl	8001784 <FLASH_WaitForLastOperation>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_FLASHEx_Erase+0xd4>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	4a20      	ldr	r2, [pc, #128]	; (8001984 <HAL_FLASHEx_Erase+0xd4>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6113      	str	r3, [r2, #16]
 8001908:	e031      	b.n	800196e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800190a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800190e:	f7ff ff39 	bl	8001784 <FLASH_WaitForLastOperation>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d12a      	bne.n	800196e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f04f 32ff 	mov.w	r2, #4294967295
 800191e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	e019      	b.n	800195c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f000 f849 	bl	80019c0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800192e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001932:	f7ff ff27 	bl	8001784 <FLASH_WaitForLastOperation>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_FLASHEx_Erase+0xd4>)
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_FLASHEx_Erase+0xd4>)
 8001940:	f023 0302 	bic.w	r3, r3, #2
 8001944:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	601a      	str	r2, [r3, #0]
            break;
 8001952:	e00c      	b.n	800196e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800195a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	029a      	lsls	r2, r3, #10
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4413      	add	r3, r2
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	429a      	cmp	r2, r3
 800196c:	d3dc      	bcc.n	8001928 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_FLASHEx_Erase+0xd0>)
 8001970:	2200      	movs	r2, #0
 8001972:	761a      	strb	r2, [r3, #24]

  return status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200000b0 	.word	0x200000b0
 8001984:	40022000 	.word	0x40022000

08001988 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <FLASH_MassErase+0x30>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <FLASH_MassErase+0x34>)
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <FLASH_MassErase+0x34>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <FLASH_MassErase+0x34>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <FLASH_MassErase+0x34>)
 80019a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ac:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	200000b0 	.word	0x200000b0
 80019bc:	40022000 	.word	0x40022000

080019c0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <FLASH_PageErase+0x38>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <FLASH_PageErase+0x3c>)
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <FLASH_PageErase+0x3c>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <FLASH_PageErase+0x3c>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <FLASH_PageErase+0x3c>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4a05      	ldr	r2, [pc, #20]	; (80019fc <FLASH_PageErase+0x3c>)
 80019e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200000b0 	.word	0x200000b0
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b08b      	sub	sp, #44	; 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e169      	b.n	8001ce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a14:	2201      	movs	r2, #1
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8158 	bne.w	8001ce2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a9a      	ldr	r2, [pc, #616]	; (8001ca0 <HAL_GPIO_Init+0x2a0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d05e      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a3c:	4a98      	ldr	r2, [pc, #608]	; (8001ca0 <HAL_GPIO_Init+0x2a0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d875      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a42:	4a98      	ldr	r2, [pc, #608]	; (8001ca4 <HAL_GPIO_Init+0x2a4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d058      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a48:	4a96      	ldr	r2, [pc, #600]	; (8001ca4 <HAL_GPIO_Init+0x2a4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d86f      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a4e:	4a96      	ldr	r2, [pc, #600]	; (8001ca8 <HAL_GPIO_Init+0x2a8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d052      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a54:	4a94      	ldr	r2, [pc, #592]	; (8001ca8 <HAL_GPIO_Init+0x2a8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d869      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a5a:	4a94      	ldr	r2, [pc, #592]	; (8001cac <HAL_GPIO_Init+0x2ac>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d04c      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a60:	4a92      	ldr	r2, [pc, #584]	; (8001cac <HAL_GPIO_Init+0x2ac>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d863      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a66:	4a92      	ldr	r2, [pc, #584]	; (8001cb0 <HAL_GPIO_Init+0x2b0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d046      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a6c:	4a90      	ldr	r2, [pc, #576]	; (8001cb0 <HAL_GPIO_Init+0x2b0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d85d      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d82a      	bhi.n	8001acc <HAL_GPIO_Init+0xcc>
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d859      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <HAL_GPIO_Init+0x80>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001ad5 	.word	0x08001ad5
 8001a88:	08001ae7 	.word	0x08001ae7
 8001a8c:	08001b29 	.word	0x08001b29
 8001a90:	08001b2f 	.word	0x08001b2f
 8001a94:	08001b2f 	.word	0x08001b2f
 8001a98:	08001b2f 	.word	0x08001b2f
 8001a9c:	08001b2f 	.word	0x08001b2f
 8001aa0:	08001b2f 	.word	0x08001b2f
 8001aa4:	08001b2f 	.word	0x08001b2f
 8001aa8:	08001b2f 	.word	0x08001b2f
 8001aac:	08001b2f 	.word	0x08001b2f
 8001ab0:	08001b2f 	.word	0x08001b2f
 8001ab4:	08001b2f 	.word	0x08001b2f
 8001ab8:	08001b2f 	.word	0x08001b2f
 8001abc:	08001b2f 	.word	0x08001b2f
 8001ac0:	08001b2f 	.word	0x08001b2f
 8001ac4:	08001add 	.word	0x08001add
 8001ac8:	08001af1 	.word	0x08001af1
 8001acc:	4a79      	ldr	r2, [pc, #484]	; (8001cb4 <HAL_GPIO_Init+0x2b4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ad2:	e02c      	b.n	8001b2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	623b      	str	r3, [r7, #32]
          break;
 8001ada:	e029      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	623b      	str	r3, [r7, #32]
          break;
 8001ae4:	e024      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	3308      	adds	r3, #8
 8001aec:	623b      	str	r3, [r7, #32]
          break;
 8001aee:	e01f      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	330c      	adds	r3, #12
 8001af6:	623b      	str	r3, [r7, #32]
          break;
 8001af8:	e01a      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b02:	2304      	movs	r3, #4
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e013      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b10:	2308      	movs	r3, #8
 8001b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	611a      	str	r2, [r3, #16]
          break;
 8001b1a:	e009      	b.n	8001b30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	615a      	str	r2, [r3, #20]
          break;
 8001b26:	e003      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          break;
 8001b2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2bff      	cmp	r3, #255	; 0xff
 8001b34:	d801      	bhi.n	8001b3a <HAL_GPIO_Init+0x13a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	e001      	b.n	8001b3e <HAL_GPIO_Init+0x13e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2bff      	cmp	r3, #255	; 0xff
 8001b44:	d802      	bhi.n	8001b4c <HAL_GPIO_Init+0x14c>
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x152>
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	3b08      	subs	r3, #8
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	210f      	movs	r1, #15
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	6a39      	ldr	r1, [r7, #32]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80b1 	beq.w	8001ce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b80:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	; (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b98:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_GPIO_Init+0x2bc>)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a40      	ldr	r2, [pc, #256]	; (8001cc0 <HAL_GPIO_Init+0x2c0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_GPIO_Init+0x1ec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a3f      	ldr	r2, [pc, #252]	; (8001cc4 <HAL_GPIO_Init+0x2c4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00d      	beq.n	8001be8 <HAL_GPIO_Init+0x1e8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a3e      	ldr	r2, [pc, #248]	; (8001cc8 <HAL_GPIO_Init+0x2c8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_Init+0x1e4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <HAL_GPIO_Init+0x2cc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_GPIO_Init+0x1e0>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e006      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e004      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001bec:	2300      	movs	r3, #0
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	f002 0203 	and.w	r2, r2, #3
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bfe:	492f      	ldr	r1, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x2bc>)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	492c      	ldr	r1, [pc, #176]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4928      	ldr	r1, [pc, #160]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c40:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	4922      	ldr	r1, [pc, #136]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	491e      	ldr	r1, [pc, #120]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	4918      	ldr	r1, [pc, #96]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4914      	ldr	r1, [pc, #80]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e021      	b.n	8001ce2 <HAL_GPIO_Init+0x2e2>
 8001c9e:	bf00      	nop
 8001ca0:	10320000 	.word	0x10320000
 8001ca4:	10310000 	.word	0x10310000
 8001ca8:	10220000 	.word	0x10220000
 8001cac:	10210000 	.word	0x10210000
 8001cb0:	10120000 	.word	0x10120000
 8001cb4:	10110000 	.word	0x10110000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	40010800 	.word	0x40010800
 8001cc4:	40010c00 	.word	0x40010c00
 8001cc8:	40011000 	.word	0x40011000
 8001ccc:	40011400 	.word	0x40011400
 8001cd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	4909      	ldr	r1, [pc, #36]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f47f ae8e 	bne.w	8001a14 <HAL_GPIO_Init+0x14>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	372c      	adds	r7, #44	; 0x2c
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d24:	e003      	b.n	8001d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	041a      	lsls	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e034      	b.n	8001db4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001d52:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f245 5255 	movw	r2, #21845	; 0x5555
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6852      	ldr	r2, [r2, #4]
 8001d66:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6892      	ldr	r2, [r2, #8]
 8001d70:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d72:	f7ff f827 	bl	8000dc4 <HAL_GetTick>
 8001d76:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d78:	e00f      	b.n	8001d9a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d7a:	f7ff f823 	bl	8000dc4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b27      	cmp	r3, #39	; 0x27
 8001d86:	d908      	bls.n	8001d9a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e00c      	b.n	8001db4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e8      	bne.n	8001d7a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001db0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e272      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de8:	4b8f      	ldr	r3, [pc, #572]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d112      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5e>
 8001df4:	4b8c      	ldr	r3, [pc, #560]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d10b      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	4b89      	ldr	r3, [pc, #548]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d06c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x12c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d168      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e24c      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x76>
 8001e24:	4b80      	ldr	r3, [pc, #512]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a7f      	ldr	r2, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e02e      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7a      	ldr	r2, [pc, #488]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b78      	ldr	r3, [pc, #480]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a77      	ldr	r2, [pc, #476]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0xbc>
 8001e5e:	4b72      	ldr	r3, [pc, #456]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a71      	ldr	r2, [pc, #452]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e78:	4b6b      	ldr	r3, [pc, #428]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a67      	ldr	r2, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe ff94 	bl	8000dc4 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7fe ff90 	bl	8000dc4 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e200      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xe4>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7fe ff80 	bl	8000dc4 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ff7c 	bl	8000dc4 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1ec      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x10c>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d063      	beq.n	8001fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef6:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x18c>
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	4b43      	ldr	r3, [pc, #268]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e1c0      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4939      	ldr	r1, [pc, #228]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e03a      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe ff35 	bl	8000dc4 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7fe ff31 	bl	8000dc4 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1a1      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4927      	ldr	r1, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_RCC_OscConfig+0x270>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe ff14 	bl	8000dc4 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7fe ff10 	bl	8000dc4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e180      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03a      	beq.n	8002040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d019      	beq.n	8002006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fef4 	bl	8000dc4 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7fe fef0 	bl	8000dc4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e160      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f000 fa9c 	bl	800253c <RCC_Delay>
 8002004:	e01c      	b.n	8002040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_OscConfig+0x274>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7fe feda 	bl	8000dc4 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002012:	e00f      	b.n	8002034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7fe fed6 	bl	8000dc4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d908      	bls.n	8002034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e146      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	42420000 	.word	0x42420000
 8002030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b92      	ldr	r3, [pc, #584]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e9      	bne.n	8002014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a6 	beq.w	800219a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a87      	ldr	r2, [pc, #540]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b85      	ldr	r3, [pc, #532]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b82      	ldr	r3, [pc, #520]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b7f      	ldr	r3, [pc, #508]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7e      	ldr	r2, [pc, #504]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7fe fe97 	bl	8000dc4 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7fe fe93 	bl	8000dc4 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b64      	cmp	r3, #100	; 0x64
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e103      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b75      	ldr	r3, [pc, #468]	; (8002284 <HAL_RCC_OscConfig+0x4c8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x312>
 80020c0:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a6e      	ldr	r2, [pc, #440]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e02d      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x334>
 80020d6:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a66      	ldr	r2, [pc, #408]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	e01c      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x356>
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a60      	ldr	r2, [pc, #384]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	4b5e      	ldr	r3, [pc, #376]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a5d      	ldr	r2, [pc, #372]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e00b      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 8002112:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a57      	ldr	r2, [pc, #348]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d015      	beq.n	800215e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7fe fe47 	bl	8000dc4 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fe43 	bl	8000dc4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0b1      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ee      	beq.n	800213a <HAL_RCC_OscConfig+0x37e>
 800215c:	e014      	b.n	8002188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7fe fe31 	bl	8000dc4 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fe2d 	bl	8000dc4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e09b      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ee      	bne.n	8002166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d061      	beq.n	8002274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d146      	bne.n	8002246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fe01 	bl	8000dc4 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe fdfd 	bl	8000dc4 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e06d      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d108      	bne.n	8002200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4921      	ldr	r1, [pc, #132]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a19      	ldr	r1, [r3, #32]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	430b      	orrs	r3, r1
 8002212:	491b      	ldr	r1, [pc, #108]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fdd1 	bl	8000dc4 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fdcd 	bl	8000dc4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e03d      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x46a>
 8002244:	e035      	b.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fdba 	bl	8000dc4 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fdb6 	bl	8000dc4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e026      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x498>
 8002272:	e01e      	b.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e019      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x500>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	429a      	cmp	r2, r3
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000

080022c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0d0      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b6a      	ldr	r3, [pc, #424]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b67      	ldr	r3, [pc, #412]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4965      	ldr	r1, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800233e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d040      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d115      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e073      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06b      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4936      	ldr	r1, [pc, #216]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fd08 	bl	8000dc4 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe fd04 	bl	8000dc4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e053      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d210      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0207 	bic.w	r2, r3, #7
 80023f6:	4922      	ldr	r1, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f821 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1cc>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1d0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fc66 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	080025e8 	.word	0x080025e8
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d002      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x30>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x36>
 80024c2:	e027      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	613b      	str	r3, [r7, #16]
      break;
 80024c8:	e027      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a17      	ldr	r2, [pc, #92]	; (8002530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0c5b      	lsrs	r3, r3, #17
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024f6:	fb03 f202 	mul.w	r2, r3, r2
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e004      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	613b      	str	r3, [r7, #16]
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	613b      	str	r3, [r7, #16]
      break;
 8002518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251a:	693b      	ldr	r3, [r7, #16]
}
 800251c:	4618      	mov	r0, r3
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	007a1200 	.word	0x007a1200
 8002530:	080025f8 	.word	0x080025f8
 8002534:	08002608 	.word	0x08002608
 8002538:	003d0900 	.word	0x003d0900

0800253c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <RCC_Delay+0x34>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <RCC_Delay+0x38>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0a5b      	lsrs	r3, r3, #9
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002558:	bf00      	nop
  }
  while (Delay --);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	60fa      	str	r2, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <RCC_Delay+0x1c>
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	20000000 	.word	0x20000000
 8002574:	10624dd3 	.word	0x10624dd3

08002578 <memset>:
 8002578:	4603      	mov	r3, r0
 800257a:	4402      	add	r2, r0
 800257c:	4293      	cmp	r3, r2
 800257e:	d100      	bne.n	8002582 <memset+0xa>
 8002580:	4770      	bx	lr
 8002582:	f803 1b01 	strb.w	r1, [r3], #1
 8002586:	e7f9      	b.n	800257c <memset+0x4>

08002588 <__libc_init_array>:
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	2600      	movs	r6, #0
 800258c:	4d0c      	ldr	r5, [pc, #48]	; (80025c0 <__libc_init_array+0x38>)
 800258e:	4c0d      	ldr	r4, [pc, #52]	; (80025c4 <__libc_init_array+0x3c>)
 8002590:	1b64      	subs	r4, r4, r5
 8002592:	10a4      	asrs	r4, r4, #2
 8002594:	42a6      	cmp	r6, r4
 8002596:	d109      	bne.n	80025ac <__libc_init_array+0x24>
 8002598:	f000 f81a 	bl	80025d0 <_init>
 800259c:	2600      	movs	r6, #0
 800259e:	4d0a      	ldr	r5, [pc, #40]	; (80025c8 <__libc_init_array+0x40>)
 80025a0:	4c0a      	ldr	r4, [pc, #40]	; (80025cc <__libc_init_array+0x44>)
 80025a2:	1b64      	subs	r4, r4, r5
 80025a4:	10a4      	asrs	r4, r4, #2
 80025a6:	42a6      	cmp	r6, r4
 80025a8:	d105      	bne.n	80025b6 <__libc_init_array+0x2e>
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b0:	4798      	blx	r3
 80025b2:	3601      	adds	r6, #1
 80025b4:	e7ee      	b.n	8002594 <__libc_init_array+0xc>
 80025b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ba:	4798      	blx	r3
 80025bc:	3601      	adds	r6, #1
 80025be:	e7f2      	b.n	80025a6 <__libc_init_array+0x1e>
 80025c0:	0800260c 	.word	0x0800260c
 80025c4:	0800260c 	.word	0x0800260c
 80025c8:	0800260c 	.word	0x0800260c
 80025cc:	08002610 	.word	0x08002610

080025d0 <_init>:
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d2:	bf00      	nop
 80025d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025d6:	bc08      	pop	{r3}
 80025d8:	469e      	mov	lr, r3
 80025da:	4770      	bx	lr

080025dc <_fini>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	bf00      	nop
 80025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e2:	bc08      	pop	{r3}
 80025e4:	469e      	mov	lr, r3
 80025e6:	4770      	bx	lr
